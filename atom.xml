<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星家|不会搬砖的码农</title>
  <subtitle>（//▽//）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luoweiguang.github.io/"/>
  <updated>2017-07-31T14:06:35.488Z</updated>
  <id>https://luoweiguang.github.io/</id>
  
  <author>
    <name>罗炜光</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用CMake编译NDK</title>
    <link href="https://luoweiguang.github.io/2017/01/02/%E4%BD%BF%E7%94%A8CMake%E7%BC%96%E8%AF%91NDK/"/>
    <id>https://luoweiguang.github.io/2017/01/02/使用CMake编译NDK/</id>
    <published>2017-01-02T14:00:00.000Z</published>
    <updated>2017-07-31T14:06:35.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建Android项目"><a href="#新建Android项目" class="headerlink" title="新建Android项目"></a>新建Android项目</h2><p>使用Android Studio2.2新建一个Android项目</p>
<p>在新建项目时勾选Include C++ Support</p>
<a id="more"></a>
<h2 id="CMake支持"><a href="#CMake支持" class="headerlink" title="CMake支持"></a>CMake支持</h2><p>在Settings点击Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK在右面板点击SDK Tools勾选CMake和LLDB,点击Apply即可</p>
<h2 id="修改build-gradle"><a href="#修改build-gradle" class="headerlink" title="修改build.gradle"></a>修改build.gradle</h2><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'com.android.application'</span>

android <span class="token punctuation">{</span>
    compileSdkVersion <span class="token number">25</span>
    buildToolsVersion <span class="token string">"25.0.0"</span>
    defaultConfig <span class="token punctuation">{</span>
        applicationId <span class="token string">"luoweiguang.github.io.video"</span>
        minSdkVersion <span class="token number">19</span>
        targetSdkVersion <span class="token number">25</span>
        versionCode <span class="token number">1</span>
        versionName <span class="token string">"1.0"</span>

        <span class="token comment" spellcheck="true">//选择要编译的CPU类型</span>
        ndk <span class="token punctuation">{</span>
            abiFilters <span class="token string">'x86'</span><span class="token punctuation">,</span> <span class="token string">'armeabi-v7a'</span>
        <span class="token punctuation">}</span>

        externalNativeBuild <span class="token punctuation">{</span>
            cmake <span class="token punctuation">{</span>
                cppFlags <span class="token string">"-frtti -fexceptions"</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    buildTypes <span class="token punctuation">{</span>
        release <span class="token punctuation">{</span>
            minifyEnabled <span class="token boolean">false</span>
            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//设置CMakeLists.txt的路径,根路径是app</span>
    externalNativeBuild <span class="token punctuation">{</span>
        cmake <span class="token punctuation">{</span>
            path <span class="token string">"CMakeLists.txt"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//选择so所放的目录。不填此项默认目录是在app/src/main/jniLibs</span>
    sourceSets <span class="token punctuation">{</span>
        main <span class="token punctuation">{</span>
            jniLibs<span class="token operator">.</span>srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'libs'</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    compile <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    compile <span class="token string">'com.android.support:appcompat-v7:25.1.0'</span>
    testCompile <span class="token string">'junit:junit:4.12'</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="修改CMakeLists-txt"><a href="#修改CMakeLists-txt" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h2><pre class=" language-txt"><code class="language-txt">cmake_minimum_required(VERSION 3.4.1)

# 设置变量，方便底下使用
set(INC_DIR ${PROJECT_SOURCE_DIR}/src/main/cpp/include)
set(LINK_DIR ${PROJECT_SOURCE_DIR}/libs/${ANDROID_ABI})


# 添加so库对应的头文件目录
include_directories(${INC_DIR})

# 引入so库,IMPORT代表从第三方引入的意思
add_library( avcodec-57 SHARED IMPORTED)
# 设置编译的库文件存放的目录
set_target_properties( avcodec-57 PROPERTIES IMPORTED_LOCATION ${LINK_DIR}/libavcodec-57.so)

add_library( avfilter-6 SHARED IMPORTED)
set_target_properties( avfilter-6 PROPERTIES IMPORTED_LOCATION ${LINK_DIR}/libavfilter-6.so)

add_library( avformat-57 SHARED IMPORTED)
set_target_properties( avformat-57 PROPERTIES IMPORTED_LOCATION ${LINK_DIR}/libavformat-57.so)

add_library( avutil-55 SHARED IMPORTED)
set_target_properties( avutil-55 PROPERTIES IMPORTED_LOCATION ${LINK_DIR}/libavutil-55.so)

add_library( swresample-2 SHARED IMPORTED)
set_target_properties( swresample-2 PROPERTIES IMPORTED_LOCATION ${LINK_DIR}/libswresample-2.so)

add_library( swscale-4 SHARED IMPORTED)
set_target_properties( swscale-4 PROPERTIES IMPORTED_LOCATION ${LINK_DIR}/libswscale-4.so)


# 自己本地的代码所编译的库
add_library(
             # 库的名称
             native-lib
             SHARED
             # 编译文件的目录
             src/main/cpp/native-lib.cpp
           )


find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# 将其他库文件链接到native-lib上
target_link_libraries(
                       native-lib
                        avcodec-57
                        avfilter-6
                        avformat-57
                        avutil-55
                        swresample-2
                        swscale-4
                       ${log-lib})
</code></pre>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>当调用的库为C代码写时，需要用</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token string">"C"</span>
<span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">// #include &lt;*></span>
<span class="token comment" spellcheck="true">//内容</span>
<span class="token punctuation">}</span>
</code></pre>
<p>其中<code>{}</code>也是必不可少的</p>
<p>例如:</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;jni.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token keyword">extern</span> <span class="token string">"C"</span>
<span class="token punctuation">{</span>
    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h></span></span>

    JNIEXPORT jstring JNICALL
    <span class="token function">Java_luoweiguang_github_io_video_MainActivity_getString</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">char</span> info<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token function">sprintf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">avcodec_configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/dbzhang800/article/details/6314073" target="_blank" rel="external">cmake 学习笔记(一)</a><br><a href="http://www.cnblogs.com/meadow-glog/p/6130568.html" target="_blank" rel="external">Android Studio中的CmakeList NDK配置</a><br><a href="http://blog.csdn.net/leixiaohua1020/article/details/47008825" target="_blank" rel="external">最简单的基于FFmpeg的移动端例子：Android HelloWorld</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建Android项目&quot;&gt;&lt;a href=&quot;#新建Android项目&quot; class=&quot;headerlink&quot; title=&quot;新建Android项目&quot;&gt;&lt;/a&gt;新建Android项目&lt;/h2&gt;&lt;p&gt;使用Android Studio2.2新建一个Android项目&lt;/p&gt;
&lt;p&gt;在新建项目时勾选Include C++ Support&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="FFmpeg" scheme="https://luoweiguang.github.io/tags/FFmpeg/"/>
    
      <category term="NDK" scheme="https://luoweiguang.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Win7下编译ffmpeg</title>
    <link href="https://luoweiguang.github.io/2016/12/31/Win7%E4%B8%8B%E7%BC%96%E8%AF%91ffmpeg/"/>
    <id>https://luoweiguang.github.io/2016/12/31/Win7下编译ffmpeg/</id>
    <published>2016-12-31T14:00:00.000Z</published>
    <updated>2017-11-14T15:23:24.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载ffmpeg源码并解压"><a href="#下载ffmpeg源码并解压" class="headerlink" title="下载ffmpeg源码并解压"></a>下载ffmpeg源码并解压</h2><p>地址<a href="http://www.ffmpeg.org/download.html" target="_blank" rel="external"><code>http://www.ffmpeg.org/download.html</code></a></p>
<a id="more"></a>
<h2 id="安装MinGW"><a href="#安装MinGW" class="headerlink" title="安装MinGW"></a>安装MinGW</h2><p>下载MinGW安装器，下载地址<a href="http://www.mingw.org/" target="_blank" rel="external"><code>http://www.mingw.org/</code></a>；下载完成后安装，安装完成后点运行，标记上以下几项：</p>
<p>然后在Installation菜单下点击Apply Changes<br><img src="/img/20161231000001.jpg" alt=""></p>
<h2 id="下载android-NDK"><a href="#下载android-NDK" class="headerlink" title="下载android NDK"></a>下载android NDK</h2><p>假如使用android studio,可在Settings中点击<code>Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK</code>，在右侧面板点击<code>SDK Tools</code>勾选，点击Apply即可</p>
<h2 id="修改ffmpeg-configure文件"><a href="#修改ffmpeg-configure文件" class="headerlink" title="修改ffmpeg/configure文件"></a>修改ffmpeg/configure文件</h2><p>将该文件中的如下四行：</p>
<pre><code>SLIBNAME_WITH_MAJOR=&#39;$(SLIBNAME).$(LIBMAJOR)&#39;
LIB_INSTALL_EXTRA_CMD=&#39;$$(RANLIB)&quot;$(LIBDIR)/$(LIBNAME)&quot;&#39;
SLIB_INSTALL_NAME=&#39;$(SLIBNAME_WITH_VERSION)&#39;
SLIB_INSTALL_LINKS=&#39;$(SLIBNAME_WITH_MAJOR)$(SLIBNAME)&#39;
</code></pre><p>替换为</p>
<pre><code>SLIBNAME_WITH_MAJOR=&#39;$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)&#39;
LIB_INSTALL_EXTRA_CMD=&#39;$$(RANLIB)&quot;$(LIBDIR)/$(LIBNAME)&quot;&#39;
SLIB_INSTALL_NAME=&#39;$(SLIBNAME_WITH_MAJOR)&#39;
SLIB_INSTALL_LINKS=&#39;$(SLIBNAME)&#39;
</code></pre><p>假如不修改会导致编译的so文件的版本号在so后面，导致android无法识别加载</p>
<h2 id="编写build-android-sh脚本文件"><a href="#编写build-android-sh脚本文件" class="headerlink" title="编写build_android.sh脚本文件"></a>编写build_android.sh脚本文件</h2><p>在ffmpeg根目录编写一个文件名为build_android.sh的脚本文件</p>
<h3 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h3><p>内容如下:</p>
<pre class=" language-sh"><code class="language-sh">NDK=D:/Users/Administrator/AppData/Local/Android/sdk/ndk-bundle
SYSROOT=$NDK/platforms/android-19/arch-arm/
TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64
CPU=arm
PREFIX=$(pwd)/android/$CPU 
ADDI_CFLAGS="-marm"

function build_one
{
./configure \
    --prefix=$PREFIX \
    --enable-shared \
    --disable-static \
    --disable-doc \
    --disable-ffmpeg \
    --disable-ffplay \
    --disable-ffprobe \
    --disable-ffserver \
    --disable-asm \
    --enable-gpl \
    --disable-doc \
    --disable-symver \
    --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \
    --target-os=linux \
    --arch=arm \
    --enable-cross-compile \
    --sysroot=$SYSROOT \
    --extra-cflags="-Os -fpic $ADDI_CFLAGS" \
    --extra-ldflags="$ADDI_LDFLAGS" 
make clean
make
make install
}
build_one
</code></pre>
<p>其中要修改NDK,SYSROOT和TOOLCHAIN为自己的目录，注意<code>android-19</code>和<code>arm-linux-androideabi-4.9</code>版本，要修改为自己NDK中的版本</p>
<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><p>内容如下:</p>
<pre class=" language-sh"><code class="language-sh">NDK=D:/Users/Administrator/AppData/Local/Android/sdk/ndk-bundle
SYSROOT=$NDK/platforms/android-19/arch-x86/
TOOLCHAIN=$NDK/toolchains/x86-4.9/prebuilt/windows-x86_64
CPU=x86
PREFIX=$(pwd)/android/$CPU

function build_one
{
./configure \
    --prefix=$PREFIX \
    --enable-shared \
    --disable-static \
    --disable-doc \
    --disable-ffmpeg \
    --disable-ffplay \
    --disable-ffprobe \
    --disable-ffserver \
    --disable-asm \
    --enable-gpl \
    --disable-doc \
    --disable-symver \
    --cross-prefix=$TOOLCHAIN/bin/i686-linux-android- \
    --target-os=linux \
    --arch=x86 \
    --enable-cross-compile \
    --sysroot=$SYSROOT \
    --extra-cflags="-Os -fpic $ADDI_CFLAGS" \
    --extra-ldflags="$ADDI_LDFLAGS" 
make clean
make
make install
}
build_one
</code></pre>
<p>arm与x86两个脚本不能在同一个ffmpeg目录编译，否则会报错</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li><p>点击MinGW/msys/1.0/目录下的msys.bat</p>
</li>
<li><p>输入跳转到ffmpeg源码目录下的命令，如:(cd D:/ffmpeg)</p>
</li>
<li><p>输入<code>chmod +x build_android.sh</code>给build_android.sh增加执行权限</p>
</li>
<li><p>输入<code>build_android.sh</code>编译</p>
</li>
<li><p>等待很长时间后，编译会完成</p>
</li>
</ul>
<p>假如报<code>./configure: line &lt;xxx&gt;: pr: command not found</code>的解决方案<br>下载coreutils-5.97-MSYS-1.0.11-snapshot.tar.bz2之后把bin目录下的内容全部拷贝到了MinGW下的bin目录下面，重新开始上面的步骤即可</p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>编译完的so会在ffmpeg下的android目录下</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/finewind/article/details/42214343" target="_blank" rel="external">win7下编译android版ffmpeg</a><br><a href="http://blog.csdn.net/gobitan/article/details/22750719" target="_blank" rel="external">FFmpeg的Android平台移植—编译篇</a><br><a href="http://blog.csdn.net/dzxsk1988/article/details/5898638" target="_blank" rel="external">MSys中使用configure出现无法找到pr错误解决方案</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载ffmpeg源码并解压&quot;&gt;&lt;a href=&quot;#下载ffmpeg源码并解压&quot; class=&quot;headerlink&quot; title=&quot;下载ffmpeg源码并解压&quot;&gt;&lt;/a&gt;下载ffmpeg源码并解压&lt;/h2&gt;&lt;p&gt;地址&lt;a href=&quot;http://www.ffmpeg.org/download.html&quot;&gt;&lt;code&gt;http://www.ffmpeg.org/download.html&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="FFmpeg" scheme="https://luoweiguang.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Android系统服务概要</title>
    <link href="https://luoweiguang.github.io/2016/10/05/Android%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%A6%81/"/>
    <id>https://luoweiguang.github.io/2016/10/05/Android系统服务概要/</id>
    <published>2016-10-05T14:00:00.000Z</published>
    <updated>2017-11-14T15:26:46.282Z</updated>
    
    <content type="html"><![CDATA[<p>本篇基于android2.2.3<br>Android系统服务提供系统最基本、最核心的功能,如设备控制、位置信息、通知设定、以及消息显示等。这些服务分别存于Application Framework与Libraries层之中</p>
<a id="more"></a>
<h2 id="系统服务分类"><a href="#系统服务分类" class="headerlink" title="系统服务分类"></a>系统服务分类</h2><h3 id="本地系统服务"><a href="#本地系统服务" class="headerlink" title="本地系统服务"></a>本地系统服务</h3><p>本地系统服务使用C++编写，运行在Libraries层，主要包含Audio Flinger、Surface Flinger等</p>
<h4 id="Audio-Flinger服务"><a href="#Audio-Flinger服务" class="headerlink" title="Audio Flinger服务"></a>Audio Flinger服务</h4><p>Audio Flinger服务混合多种Android应用程序的音频数据，并发送到耳机、扬声器等音频输出设备中。在Android设备中，所有音频数据均经由Audio Flinger进行输出</p>
<h4 id="Surface-Flinger服务"><a href="#Surface-Flinger服务" class="headerlink" title="Surface Flinger服务"></a>Surface Flinger服务</h4><p>Surface Flinger是Android Multimedia的一部分，在Android的实现中，它是一个服务，提供系统范围内的surface composer功能，能够将各种应用程序的Surface组合后渲染到Frame Buffer设备中</p>
<h3 id="Java系统服务"><a href="#Java系统服务" class="headerlink" title="Java系统服务"></a>Java系统服务</h3><h4 id="核心平台服务"><a href="#核心平台服务" class="headerlink" title="核心平台服务"></a>核心平台服务</h4><p>一般而已,核心平台服务(Core Platform Service)不会直接与Android应用程序进行交互但它们是Android Framework运行所必须的服务，其中主要服务如下:</p>
<ul>
<li><p>Activity Manager Service<br>管理所有Activity的生命周期与堆栈(Stack)</p>
</li>
<li><p>Window Manager Service<br>位于Surface Flinger之上，将要绘制到机器画面上的内容传递给Surface Flinger</p>
</li>
<li><p>Package Manager Service<br>加载apk文件(Android包文件)的信息，提供信息显示系统中设置了哪些包，以及加载了哪些包</p>
</li>
</ul>
<h4 id="硬件服务"><a href="#硬件服务" class="headerlink" title="硬件服务"></a>硬件服务</h4><p>硬件服务(Hardware Service)提供了一系列API，用于控制底层硬件，主要包括如下服务</p>
<ul>
<li><p>Alarm Manager Service<br>在特定时间后运行指定的应用程序，就像定时器</p>
</li>
<li><p>Connectivity Service<br>提供有关网络当前状态的信息</p>
</li>
<li><p>Location Service<br>提供终端当前的位置信息</p>
</li>
<li><p>Power Service<br>设备电源管理</p>
</li>
<li><p>Sensor Service<br>提供Android中各种传感器的感应值</p>
</li>
<li><p>Telephony Service<br>提供话机状态及电话服务</p>
</li>
<li><p>Wifi Service<br>控制无线网络连接</p>
</li>
</ul>
<h3 id="使用Java系统服务"><a href="#使用Java系统服务" class="headerlink" title="使用Java系统服务"></a>使用Java系统服务</h3><p>无论在Framework内部，还是Android应用程序中，若想使用Java系统服务，必须使用能够与各服务通信的Local Manager对象</p>
<p>应用程序若想使用Location Service,获取终端设备当前的位置信息，需要先调用getSystemService()函数,创建与Location Service相应的Local Manager对象，而后应用程序使用生成的Local Manager对象，调用Location Service提供的各种函数，执行相应的功能。</p>
<h2 id="运行系统服务"><a href="#运行系统服务" class="headerlink" title="运行系统服务"></a>运行系统服务</h2><p>在使用应用程序服务前，Android应用程序会先调用startService()函数，启动指定的应用程序服务，而后再使用它。与之不同的是，使用系统服务时，客户端不需要启动它，直接调用getSystemService()使用即可。因为Android系统的启动过程中,init进程已经启动了这些系统服务。</p>
<p>在Android启动时，系统服务具体由媒体服务器(Media Service)与系统服务器(System Service)两个系统进程运行。媒体服务器进程用来启动除Surface Flinger之外的Audio Flinger、Media Player Service等本地服务。而系统服务器是Zygote最初生成的基于Java进程，它会启动所有Java系统服务，例如本地系统服务Surface Flinger</p>
<h3 id="媒体服务器的运行代码"><a href="#媒体服务器的运行代码" class="headerlink" title="媒体服务器的运行代码"></a>媒体服务器的运行代码</h3><p>媒体服务器是个系统进程，它运行Audio Flinger、Media Player Service、Camera Service、Audio Policy Service等本地系统服务，由init进程启动运行</p>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/rootdir/init.rc#307" target="_blank" rel="external">init.rc</a></p>
<pre><code>service media /system/bin/mediaserver
    user media
    group system audio camera graphics inet net_bt net_bt_admin net_raw
</code></pre><h4 id="生成并初始化本地服务"><a href="#生成并初始化本地服务" class="headerlink" title="生成并初始化本地服务"></a>生成并初始化本地服务</h4><p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/media/mediaserver/main_mediaserver.cpp#36" target="_blank" rel="external">main_mediaserver</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    AudioFlinger<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    MediaPlayerService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CameraService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AudioPolicyService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="分析各系统服务的初始化代码"><a href="#分析各系统服务的初始化代码" class="headerlink" title="分析各系统服务的初始化代码"></a>分析各系统服务的初始化代码</h4><p>系统服务与Framework中的其他模块通信时,使用Binder IPC,系统服务这类服务提供者必须把相关信息注册到Context Manager中，以便Android应用程序这类服务使用者能够使用其提供的服务</p>
<p>各本地服务的初始化代码形式都相似，即首先使用new运算符生成服务的实例，而后调用addService()函数将各个服务注册到Context Manager中</p>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/libs/audioflinger/AudioFlinger.cpp#4050" target="_blank" rel="external">AudioFlinger::instantiate</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> AudioFlinger<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addService</span><span class="token punctuation">(</span>
            <span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">"media.audio_flinger"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">AudioFlinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/media/libmediaplayerservice/MediaPlayerService.cpp#213" target="_blank" rel="external">MediaPlayerService::instantiate</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> MediaPlayerService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addService</span><span class="token punctuation">(</span>
            <span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">"media.player"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">MediaPlayerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/camera/libcameraservice/CameraService.cpp#77" target="_blank" rel="external">CameraService::instantiate</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CameraService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addService</span><span class="token punctuation">(</span>
            <span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">"media.camera"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">CameraService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/libs/audioflinger/AudioPolicyService.cpp#426" target="_blank" rel="external">AudioPolicyService::instantiate</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> AudioPolicyService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addService</span><span class="token punctuation">(</span>
            <span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">"media.audio_policy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">AudioPolicyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>defaultServiceManager()函数会返回Service Manager对象，它是一个代理对象，用来实现Context Manager与Binder之间的通信。在Framework中，若想使用Context Manager的注册或获取服务等功能,必须使用Service Manager</p>
<h3 id="系统服务器的运行代码"><a href="#系统服务器的运行代码" class="headerlink" title="系统服务器的运行代码"></a>系统服务器的运行代码</h3><p>系统服务器(System Service)是一个Java进程，由Zygote进程生成。</p>
<p>System Service由Zygote进程最初生成，运行在Dalvik虚拟机中的Java进程，它用来运行多种Java系统服务，还有Surface Flinger本地系统服务。</p>
<p>由脚本可知，在Zygote运行行带有“-start-system-server”选项时，该选项请求在Zygote中生成System Server.</p>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/rootdir/init.rc#301" target="_blank" rel="external">init.rc</a></p>
<pre><code>service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
    socket zygote stream 666
    onrestart write /sys/android_power/request_state wake
    onrestart write /sys/power/state on
    onrestart restart media
</code></pre><h4 id="加载android-servers库"><a href="#加载android-servers库" class="headerlink" title="加载android_servers库"></a>加载android_servers库</h4><p><a href="/2016/10/03/Zygote#启动运行SystemServer">启动运行SystemServer</a></p>
<p>SystemServer main()方法的主要功能是加载android_servers库(libandroid_server.so),并调用init()方法。init1()通过JNI调用system_init()本地函数。system_init()函数的主要功能是生成并初始化本地系统服务Surface Flinger</p>
<p>Surface Flinger是基于C++的系统服务，而System Server是Java进程，它不能直接调用Surface Flinger服务。System Server必须经由JNI通过调用system_init()函数来运行Surface Flinger服务。Surface Flinger是本地系统服务，它采用类似Audio Flinger的代码来进行初始化</p>
<p>Surface Flinger运行后，执行<code>runtime-&gt;callStaic(&quot;com/android/server/SystemServer&quot;,&quot;init2&quot;)</code>语句，调用SystemServer类的init2()方法。callStaic()函数是JNI包装函数，它运行在C++代码中经由JNI调用Java类的静态方法</p>
<h4 id="Java系统服务的初始化及注册"><a href="#Java系统服务的初始化及注册" class="headerlink" title="Java系统服务的初始化及注册"></a>Java系统服务的初始化及注册</h4><p>在SystemServer的执行中，先初始化Surface Flinger,而后调用init2()方法，该方法能够生成并初始化从Entropy服务到AppWidge服务的所有Java系统服务</p>
<p>init2()方法会首先创建ServerThread对象，而后启动它。ServerThread是一个Java线程，它可以运行Android的所有Java系统服务</p>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/services/java/com/android/server/SystemServer.java#578" target="_blank" rel="external">init2</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Entered the Android system server!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread thr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thr<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"android.server.ServerThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thr<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>同本地系统服务一样，Java系统服务必须先把相关服务注册到Context Manager中，其他模块才能使用这些服务。但是Java系统服务的注册方式与基于C++的本地系统服务不同，它通过调用ServiceManager类的addService()静态方法，将自身注册到Context Manager中</p>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/services/java/com/android/server/SystemServer.java#52" target="_blank" rel="external">SystemServer</a></p>
<pre><code>class ServerThread extends Thread 
{
    ...
    @Override
    public void run() 
    {
    ...
    try {
        Slog.i(TAG, &quot;Entropy Service&quot;);
        ServiceManager.addService(&quot;entropy&quot;, new EntropyService());
        Slog.i(TAG, &quot;Power Manager&quot;);
        power = new PowerManagerService();
        ServiceManager.addService(Context.POWER_SERVICE, power);
        Slog.i(TAG, &quot;Activity Manager&quot;);
        context = ActivityManagerService.main(factoryTest);
        Slog.i(TAG, &quot;Telephony Registry&quot;);
        ServiceManager.addService(&quot;telephony.registry&quot;, new TelephonyRegistry(context));
        ...
    }
    ...
    }
}
</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/10570841/" target="_blank" rel="external">Amdroid框架揭秘</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇基于android2.2.3&lt;br&gt;Android系统服务提供系统最基本、最核心的功能,如设备控制、位置信息、通知设定、以及消息显示等。这些服务分别存于Application Framework与Libraries层之中&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android Framework" scheme="https://luoweiguang.github.io/tags/Android-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Service的使用</title>
    <link href="https://luoweiguang.github.io/2016/10/04/Service%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/10/04/Service的使用/</id>
    <published>2016-10-04T14:00:00.000Z</published>
    <updated>2017-11-14T15:35:41.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Service是一种没有界面且能长时间运行于后台的应用组件．其它应用的组件可以启动一个服务运行于后台，即使用户切换到另一个应用也会继续运行．另外，一个组件可以绑定到一个service来进行交互，即使这个交互是进程间通讯也没问题．例如，一个service可能处理网络事物，播放音乐，执行文件I/O，或与一个内容提供者交互，所有这些都在后台进行．</p>
</blockquote>
<a id="more"></a>
<h2 id="Service与Thread的区别"><a href="#Service与Thread的区别" class="headerlink" title="Service与Thread的区别"></a>Service与Thread的区别</h2><p>进程是系统最小资源分配单位，而线程是则是最小的执行单位，线程需要的资源通过它所在的进程获取</p>
<p><strong>Thread</strong>：Thread 是程序执行的最小单元，可以用 Thread 来执行一些异步的操作。</p>
<p><strong>Service</strong>：Service 是android的一种机制，当它运行的时候如果是<strong>本地Service</strong>，那么对应的 Service 是运行在主进程的<strong>主线程</strong>上的。如果是<strong>远程Service</strong>，那么对应的 Service 则是运行在<strong>独立进程的主线程</strong>上。</p>
<p>Thread 的运行是独立的，也就是说当一个 Activity 被 finish 之后，如果没有主动停止 Thread 或者 Thread 里的 run 方法没有执行完毕的话，Thread 也会一直执行。因此这里会出现一个问题：当 Activity 被 finish 之后，不再持有该 Thread 的引用，也就是不能再控制该Thread。另一方面，没有办法在不同的 Activity 中对同一 Thread 进行控制。</p>
<p>例如：如果 一个Thread 需要每隔一段时间连接服务器校验数据，该Thread需要在后台一直运行。这时候如果创建该Thread的Activity被结束了而该Thread没有停止，那么将没有办法再控制该Thread，除非kill掉该程序的进程。这时候如果创建并启动一个 Service ，在 Service 里面创建、运行并控制该 Thread，这样便解决了该问题(因为任何 Activity 都可以控制同一个Service，而系统也只会创建一个对应 Service 的实例)。<br>      因此可以把 Service 想象成一种消息服务，可以在任何有 Context 的地方调用 Context.startService、Context.stopService、Context.bindService、Context.unbindService来控制它，也可以在 Service 里注册 BroadcastReceiver，通过发送 broadcast 来达到控制的目的，这些都是 Thread 做不到的。</p>
<h2 id="重要的回调方法"><a href="#重要的回调方法" class="headerlink" title="重要的回调方法"></a>重要的回调方法</h2><h3 id="public-void-onCreate"><a href="#public-void-onCreate" class="headerlink" title="public void onCreate()"></a>public void onCreate()</h3><blockquote>
<p>系统在service第一次创建时执行此方法，来执行只运行一次的初始化工作(在调用它方法如onStartCommand()或onBind()之前)．如果service已经运行，这个方法不会被调用．</p>
</blockquote>
<h3 id="public-int-onStartCommand-Intent-intent-int-flags-int-startId"><a href="#public-int-onStartCommand-Intent-intent-int-flags-int-startId" class="headerlink" title="public int onStartCommand(Intent intent, int flags, int startId )"></a>public int onStartCommand(Intent intent, int flags, int startId )</h3><blockquote>
<p>系统在其它组件比如activity通过调用startService()请求service启动时调用这个方法．一旦这个方法执行，service就启动并且在后台长期运行．如果你实现了它，你需要负责在service完成任务时停止它，通过调用stopSelf()或stopService()．(如果你只想提供绑定，你不需实现此方法)．</p>
</blockquote>
<h4 id="onStartCommand的返回值"><a href="#onStartCommand的返回值" class="headerlink" title="onStartCommand的返回值"></a>onStartCommand的返回值</h4><p><strong>onStartCommand()必须返回一个整数．这个整数描述了在系统杀死它的事件中系统如何继续这个服务</strong></p>
<ul>
<li><strong>START_NOT_STICKY</strong></li>
</ul>
<blockquote>
<p>如果系统在onStartCommand()方法返回之后杀死这个服务，那么直到接受到新的Intent对象，这个服务才会被重新创建。这是最安全的选项，用来避免在不需要的时候运行你的服务。</p>
</blockquote>
<ul>
<li><strong>START_STICKY</strong></li>
</ul>
<blockquote>
<p>如果系统在onStartCommand()返回后杀死了这个服务，系统就会重新创建这个服务并且调用onStartCommand()方法，但是它不会重新传递最后的Intent对象，系统会用一个null的Intent对象来调用onStartCommand()方法，在这个情况下，除非有一些被发送的Intent对象在等待启动服务。这适用于不执行命令的媒体播放器（或类似的服务），它只是无限期的运行着并等待工作的到来。</p>
</blockquote>
<ul>
<li><strong>START_REDELIVER_INTENT</strong></li>
</ul>
<blockquote>
<p>如果系统在onStartCommand()方法返回后，系统就会重新创建了这个服务，并且用发送给这个服务的最后的Intent对象调用了onStartCommand()方法。任意等待中的Intent对象会依次被发送。这适用于那些应该立即恢复正在执行的工作的服务，如下载文件。</p>
</blockquote>
<ul>
<li><strong>START_STICKY_COMPATIBILITY</strong></li>
</ul>
<blockquote>
<p>START_STICKY的兼容版本，但不保证服务被kill后一定能重启。</p>
</blockquote>
<h4 id="onStartCommand的参数flags"><a href="#onStartCommand的参数flags" class="headerlink" title="onStartCommand的参数flags"></a>onStartCommand的参数flags</h4><ul>
<li><strong>START_FLAG_REDELIVERY</strong></li>
</ul>
<blockquote>
<p>如果你实现onStartCommand()来安排异步工作或者在另一个线程中工作, 那么你可能需要使用START_FLAG_REDELIVERY来让系统重新发送一个intent。这样如果你的服务在处理它的时候被Kill掉, Intent不会丢失. </p>
</blockquote>
<ul>
<li><strong>START_FLAG_RETRY</strong></li>
</ul>
<blockquote>
<p>表示服务之前被设为START_STICKY，则会被传入这个标记。<br>启动service的时候，onCreate方法只有第一次会调用，onStartCommand和onStart每次都被调用。onStartCommand会告诉系统如何重启服务，如判断是否异常终止后重新启动，在何种情况下异常终止.</p>
</blockquote>
<h3 id="public-IBinder-onBind-Intent-intent"><a href="#public-IBinder-onBind-Intent-intent" class="headerlink" title="public IBinder onBind(Intent intent)"></a>public IBinder onBind(Intent intent)</h3><blockquote>
<p>当组件调用bindService()想要绑定到service时(比如想要执行进程间通讯)系统调用此方法．在你的实现中，你必须提供一个返回一个IBinder来以使客户端能够使用它与service通讯，你必须总是实现这个方法，但是如果你不允许绑定，那么你应返回null．</p>
</blockquote>
<h3 id="public-boolean-onUnbind-Intent-intent"><a href="#public-boolean-onUnbind-Intent-intent" class="headerlink" title="public boolean onUnbind(Intent intent)"></a>public boolean onUnbind(Intent intent)</h3><blockquote>
<p>绑定的所有客户端断开连接的时候回调</p>
</blockquote>
<h3 id="public-void-onDestroy"><a href="#public-void-onDestroy" class="headerlink" title="public void onDestroy()"></a>public void onDestroy()</h3><blockquote>
<p>系统在service不再被使用并要销毁时调用此方法．你的service应在此方法中释放资源，比如线程，已注册的侦听器，接收器等等．这是service收到的最后一个调用．</p>
</blockquote>
<h3 id="public-void-onRebind-Intent-intent"><a href="#public-void-onRebind-Intent-intent" class="headerlink" title="public void onRebind(Intent intent)"></a>public void onRebind(Intent intent)</h3><blockquote>
<p>onUnbind返回true且Service重新绑定时回调</p>
</blockquote>
<h2 id="startService"><a href="#startService" class="headerlink" title="startService"></a>startService</h2><ul>
<li><strong>public ComponentName startService(Intent service)</strong></li>
</ul>
<p>开始服务</p>
<p>　　一个应用组件，比如一个activity可以通过调用startService()启动service同时传递一个指定service和service所用的数据的Intent，service在方法onStartCommand()中接收这个Intent．</p>
<ul>
<li><strong>public boolean stopService(Intent name)</strong></li>
</ul>
<p>停止服务</p>
<p>一个启动的service，在被其它组件调用startService()来启动时，会导致service的onStartCommand()方法被调用．</p>
<h2 id="bindService"><a href="#bindService" class="headerlink" title="bindService"></a>bindService</h2><ul>
<li><strong>public boolean bindService(Intent service, ServiceConnection conn,int flags)</strong></li>
</ul>
<p>绑定服务</p>
<p>应用组件(客户端)可以调用bindService()绑定到一个service．Android系统之后调用service的onBind()方法，它返回一个用来与service交互的IBinder．</p>
<p>绑定是异步的．它不会立即返回IBinder给客户端．要接收IBinder，客户端必须创建一个ServiceConnection的实例并传给bindService()．ServiceConnection包含一个回调方法，系统调用这个方法来传递要返回的IBinder．</p>
<ul>
<li><strong>public void unbindService(ServiceConnection conn)</strong></li>
</ul>
<p>解绑服务</p>
<h3 id="ServiceConnection"><a href="#ServiceConnection" class="headerlink" title="ServiceConnection"></a>ServiceConnection</h3><ul>
<li><strong>public void onServiceConnected(ComponentName name, IBinder service)</strong></li>
</ul>
<p>系统调用这个来传送在service的onBind()中返回的IBinder．</p>
<ul>
<li><strong>public void onServiceDisconnected(ComponentName name)</strong></li>
</ul>
<p>Android系统在同service的连接意外丢失时调用这个．比如当service崩溃了或被强杀了．当客户端解除绑定时，这个方法不会被调用．</p>
<h3 id="bindService的Flags"><a href="#bindService的Flags" class="headerlink" title="bindService的Flags"></a>bindService的Flags</h3><ul>
<li>BIND_AUTO_CREATE</li>
</ul>
<p>表示当收到绑定请求时，如果服务尚未创建，则即刻创建，在系统内存不足，需要先销毁优先级组件来释放内存，且只有驻留该服务的进程成为被销毁对象时，服务才可被销毁；</p>
<ul>
<li>BIND_DEBUG_UNBIND</li>
</ul>
<p>通常用于调试场景中判断绑定的服务是否正确，但其会引起内存泄漏，因此非调试目的不建议使用；</p>
<ul>
<li>BIND_NOT_FOREGROUND</li>
</ul>
<p>表示系统将阻止驻留该服务的进程具有前台优先级，仅在后台运行</p>
<h2 id="终止服务"><a href="#终止服务" class="headerlink" title="终止服务"></a>终止服务</h2><p>被启动类型的服务必须管理它自己的生命周期。也就是说除非系统要回收系统内存，否则系统不会终止或销毁这个服务，在onStartCommand()方法返回后，这个服务会继续运行。因此而这种类型的服务必须通过调用stopSelf()方法或另一个组件通过调用stopService()方法才能终止。<br>一旦用stopSelf()方法或stopService()方法请求终止服务，那么系统一有可能就会销毁这个服务。</p>
<p>但是，如果你的服务同时处理多个对onStartCommand()方法的请求，那么在你完成请求启动过程时，不应该终止这个服务，因为你的服务可能正在接受一个新的启动请求（在第一个请求结束时终止服务有可能会终止第二个请求）。要避免这个问题，你能够使用stopSelf(int)方法来确保你请求终止的服务始终是基于最近启动的请求。也就是说，调用stopSelf(int)方法时，你要把那个要终止的服务ID传递给这个方法（这个ID是发送给onStartCommand()方法的）。这样如果服务在你调用stopSelf(int)方法之前收到了一个新的启动请求，那么这个ID就会因不匹配而不被终止。</p>
<p>警告：重要的是你的应用程序要在工作结束时终止它们的服务，从而避免浪费系统资源和电池电量。如果需要，其他的组件能够调用stopService()方法终止服务。即使对于能够绑定的服务，如果这个服务接收了对onStartCommand()方法的调用，你也必须自己来终止这个服务。</p>
<p>Service组件表示在不影响用户的情况下执行耗时的操作或者提供其他应用使用的功能</p>
<p>5.0开始，必须使用显示Intent启动Service组件</p>
<p>当程序使用startService()和stopService()启动、关闭Service时,Service与访问者之间基本上不存在太多关联，因此Service和访问者之间也无法进行通讯,交换数据</p>
<p>实现ServiceConnection.</p>
<p>你的实现必须重写两个回调方法：</p>
<p>onServiceConnected()</p>
<p>系统调用这个来传送在service的onBind()中返回的IBinder．</p>
<p>OnServiceDisconnected()</p>
<p>Android系统在同service的连接意外丢失时调用这个．比如当service崩溃了或被强杀了．当客户端解除绑定时，这个方法不会被调用．</p>
<p>在你的service中，创建一个Binder实例，提供以下三种功能之一：</p>
<p>Binder包含一些可供客户端调用的公开方法．</p>
<p>返回当前的Service实例，它具有一些客户端可以调用的公开方法．</p>
<p>或者，返回另一个类的实例，这个类具有客户端可调用的公开方法并托管于service．</p>
<h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p>这是一个Service类的子类，它使用工作线程来依次处理所有的启动请求，如果你不想要服务同时处理多个请求，那么这是最好的选择。需要你做的所有工作就是实现onHandleIntent()方法，它接受每个启动请求的Intent对象，以便完成后台工作。</p>
<p>因为大多被启动类型的服务不需要同时处理多个请求（这实际是一个危险的多线程场景），因此使用IntentService类来实现自己的服务可能是最好的。<br>IntentService类执行以下操作：</p>
<ol>
<li><p>创建一个独立与应用程序主线程的默认工作线程，执行所有的给onStartCommand()方法Intent的处理；</p>
</li>
<li><p>创建一个工作队列，以便每次只给你的onHandleIntent()方法实现传递一个Intent，因此你不必担心多线程的问题；</p>
</li>
<li><p>所有的启动请求都被处理之后终止这个服务，因此你不需要自己去调用stopSelf()方法；</p>
</li>
<li><p>提供返回null的onBind()方法的默认实现；</p>
</li>
<li><p>提供一个给工作队列发送Intent对象的onStartCommand()方法的默认实现和onHandleIntent()方法的实现。</p>
</li>
</ol>
<p>所以这些加起来实际上只需要实现onHandleIntent()方法，来完成由客户提供的工作（虽然，你还需要给服务提供一个小的构造器）。</p>
<p>例如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloIntentService</span> <span class="token keyword">extends</span> <span class="token class-name">IntentService</span> <span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">/** 
   * A constructor is required, and must call the super IntentService(String)
   * constructor with a name for the worker thread.
   */</span>
  <span class="token keyword">public</span> <span class="token function">HelloIntentService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"HelloIntentService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * The IntentService calls this method from the default worker thread with
   * the intent that started the service. When this method returns, IntentService
   * stops the service, as appropriate.
   */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onHandleIntent</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// Normally we would do some work here, like download a file.</span>
      <span class="token comment" spellcheck="true">// For our sample, we just sleep for 5 seconds.</span>
      <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> endTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">try</span> <span class="token punctuation">{</span>
                  <span class="token function">wait</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>以上就是你做的全部：一个构造器和一个onHandleIntent()方法的实现。</p>
<p>如果你还决定要重写其他的回调方法，如onCreate()、onStartCommand()、或onDestroy()，那么就要确保调用父类的实现，以便IntentService对象能够适当的处理工作线程的活动。</p>
<p>例如，onStartCommand()方法必须返回默认的实现（默认的实现获取Intent并把它交付给onHandleIntent()方法）：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"service starting"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span>flags<span class="token punctuation">,</span>startId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>除了onHandleIntent()方法以外，唯一不需要调用实现的方法是onBind()方法（但是如果你的服务允许绑定，就要实现这个方法）。</p>
<h2 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h2><h3 id="无绑定Service"><a href="#无绑定Service" class="headerlink" title="无绑定Service"></a>无绑定Service</h3><p><img src="/img/20161004000001.png" alt=""></p>
<h3 id="有绑定Service"><a href="#有绑定Service" class="headerlink" title="有绑定Service"></a>有绑定Service</h3><p><img src="/img/20161004000002.png" alt=""></p>
<h3 id="后绑定Service"><a href="#后绑定Service" class="headerlink" title="后绑定Service"></a>后绑定Service</h3><p><img src="/img/20161004000003.png" alt=""></p>
<h2 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h2><p>Service如果要防止尽可能不被系统杀掉，需要设置为在前台运行。</p>
<p><strong>启动为前台服务</strong></p>
<ul>
<li>创建Notification对象</li>
<li>调用startForeground()方法</li>
</ul>
<p><strong>终止前台服务</strong></p>
<ul>
<li>调用stopForeground()方法</li>
</ul>
<h2 id="检查是否运行"><a href="#检查是否运行" class="headerlink" title="检查是否运行"></a>检查是否运行</h2><p>1.如何检查Android后台服务线程（Service类）是否正在运行</p>
<p>Android系统自己提供了一个函数ActivityManager.getRunningServices，可以列出当前正在运行的后台服务线程</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isServiceRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    ActivityManager manager <span class="token operator">=</span> <span class="token punctuation">(</span>ActivityManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>ACTIVITY_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span>RunningServiceInfo service <span class="token operator">:</span> manager<span class="token punctuation">.</span><span class="token function">getRunningServices</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"com.example.MyService"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/think_soft" target="_blank" rel="external">FireOfStar的专栏</a><br><a href="https://book.douban.com/subject/26744163/" target="_blank" rel="external">Android开发进阶从小工到专家</a><br><a href="https://book.douban.com/subject/26410861/" target="_blank" rel="external">疯狂Android讲义</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Service是一种没有界面且能长时间运行于后台的应用组件．其它应用的组件可以启动一个服务运行于后台，即使用户切换到另一个应用也会继续运行．另外，一个组件可以绑定到一个service来进行交互，即使这个交互是进程间通讯也没问题．例如，一个service可能处理网络事物，播放音乐，执行文件I/O，或与一个内容提供者交互，所有这些都在后台进行．&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Zygote</title>
    <link href="https://luoweiguang.github.io/2016/10/03/Zygote/"/>
    <id>https://luoweiguang.github.io/2016/10/03/Zygote/</id>
    <published>2016-10-03T14:00:00.000Z</published>
    <updated>2017-11-14T15:41:23.466Z</updated>
    
    <content type="html"><![CDATA[<p>本篇基于android2.2.3<br>Zygote是Android系统应用中一个相当重要的进程，它的主要功能就是执行Android应用程序</p>
<a id="more"></a>
<p>Zygote进程运行时，会初始化Dalvik虚拟机，并启动它。</p>
<p>在Android中，应用程序运行前，Zygote进程通过共享已运行的虚拟机的代码与内存信息，缩短应用程序运行所耗费的时间。并且，它会实现将应用程序要使用的Android Framework中的类与资源加载到内存中，并组织形成所用资源的链接信息。新运行的Android应用程序在使用所需资源时不必每次重新形成资源的链接信息，这会节省大量时间，提供程序运行速度</p>
<p>Android的服务与应用程序都由Zygote进程启动运行</p>
<p>Zygote启动后，初始化运行Dalvik虚拟机，而后将需要的类与资源加载到内存中。随后调用fork()创建出Zygote的子进程，接着Zygote的子进程动态加载并运行Android应用程序A。运行的应用程序A会使用Zygote已经初始化并启动运行的Dalvik虚拟机代码，通过使用已加载至内存中的类与资源来加快运行速度。</p>
<p>与其他本地服务或Daemon不同的是，Zygote由Java编写而成，不能直接由init进程启动运行。若想运行Zygote类，必须先生成Dalvik虚拟机，再在Dalvik虚拟机上装载ZygoteInit类，执行这一任务的就是app_process进程。</p>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/cmds/app_process/app_main.cpp#118" target="_blank" rel="external">app_process</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mArgC <span class="token operator">=</span> argc<span class="token punctuation">;</span>
    mArgV <span class="token operator">=</span> argv<span class="token punctuation">;</span>
    mArgLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mArgLen <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    mArgLen<span class="token operator">--</span><span class="token punctuation">;</span>
    AppRuntime runtime<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">addVmArguments</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        runtime<span class="token punctuation">.</span>mParentDir <span class="token operator">=</span> argv<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"--zygote"</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">bool</span> startSystemServer <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token operator">?</span>
            <span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"--start-system-server"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token function">setArgv0</span><span class="token punctuation">(</span>argv0<span class="token punctuation">,</span> <span class="token string">"zygote"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//设置本进程的名称为zygote</span>
            <span class="token function">set_process_name</span><span class="token punctuation">(</span><span class="token string">"zygote"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//注意第二个参数为true</span>
            runtime<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"com.android.internal.os.ZygoteInit"</span><span class="token punctuation">,</span>startSystemServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">set_process_name</span><span class="token punctuation">(</span>argv0<span class="token punctuation">)</span><span class="token punctuation">;</span>
            runtime<span class="token punctuation">.</span>mClassName <span class="token operator">=</span> arg<span class="token punctuation">;</span>


            runtime<span class="token punctuation">.</span>mArgC <span class="token operator">=</span> argc<span class="token operator">-</span>i<span class="token punctuation">;</span>
            runtime<span class="token punctuation">.</span>mArgV <span class="token operator">=</span> argv<span class="token operator">+</span>i<span class="token punctuation">;</span>

            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            runtime<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="AndroidRuntime"><a href="#AndroidRuntime" class="headerlink" title="AndroidRuntime"></a>AndroidRuntime</h2><p>AppRuntime类继承字AndroidRuntime类，AndroidRuntime类用于初始化并运行Dalvik虚拟机，为运行Android应用程序做好准备。</p>
<p>在运行Dalvik虚拟机之前，通过AppRuntime对象，分析环境变量以及运行的参数，并以此生成虚拟机选项。</p>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/include/android_runtime/AndroidRuntime.h#34" target="_blank" rel="external">AndroidRuntime::start</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> AndroidRuntime<span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> className<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> startSystemServer<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//className的值"com.android.internal.os.ZygoteInit"</span>
    <span class="token comment" spellcheck="true">//startSystemServer的值是true</span>
    <span class="token keyword">char</span><span class="token operator">*</span> slashClassName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> cp<span class="token punctuation">;</span>
    JNIEnv<span class="token operator">*</span> env<span class="token punctuation">;</span>

    <span class="token function">blockSigpipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理SIGPIPE信号</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> rootDir <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"ANDROID_ROOT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootDir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//如果环境变量中没有ANDROID_ROOT,则新增该变量。并设置值为"/system"</span>
        rootDir <span class="token operator">=</span> <span class="token string">"/system"</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">"ANDROID_ROOT"</span><span class="token punctuation">,</span> rootDir<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//创建虚拟机</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startVm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mJavaVM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>env<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> bail<span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment" spellcheck="true">//注册JNI函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startReg</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">goto</span> bail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    stringClass <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"java/lang/String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//创建一个有两个元素的String数组，即Java代码String strArray[] = new String[2];</span>
    strArray <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewObjectArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> stringClass<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    classNameStr <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//设置第一个元素"com.android.internal.os.ZygoteInit"</span>
    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetObjectArrayElement</span><span class="token punctuation">(</span>strArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classNameStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    startSystemServerStr <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>startSystemServer <span class="token operator">?</span><span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//设置第二个元素为"true"，注意这两个元素都是String类型，即字符串</span>
    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetObjectArrayElement</span><span class="token punctuation">(</span>strArray<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> startSystemServerStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    jclass <span class="token class-name">startClass</span><span class="token punctuation">;</span>
    jmethodID startMeth<span class="token punctuation">;</span>
    slashClassName <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/*
    将字符串"com.android.internal.os.ZygoteInot"中的"."换成"/".
    即"com/android/internal/os/ZygoteInit",这个名称符合JNI规范。
    */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>cp <span class="token operator">=</span> slashClassName<span class="token punctuation">;</span> <span class="token operator">*</span>cp <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> cp<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>cp <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>
            <span class="token operator">*</span>cp <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>

    startClass <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span>slashClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>startClass <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//找到ZygoteInit类的static main函数的jMethodId</span>
        startMeth <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStaticMethodID</span><span class="token punctuation">(</span>startClass<span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">,</span><span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>startMeth <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/*
            通过JNI调用Java函数，注意调用的函数是main，传入的参数为"true"
            所属的类是com.android.internal.os.ZygoteInit
            在调用ZygoteInit的main函数后，Zygote便进入Java世界
            */</span>
            env<span class="token operator">-</span><span class="token operator">></span><span class="token function">CallStaticVoidMethod</span><span class="token punctuation">(</span>startClass<span class="token punctuation">,</span> startMeth<span class="token punctuation">,</span> strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//zygote退出,在正常情况下，zygote不需要退出</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mJavaVM<span class="token operator">-</span><span class="token operator">></span><span class="token function">DetachCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> JNI_OK<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mJavaVM<span class="token operator">-</span><span class="token operator">></span><span class="token function">DestroyJavaVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

bail<span class="token operator">:</span>
    <span class="token function">free</span><span class="token punctuation">(</span>slashClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">}</span>
</code></pre>
<h3 id="AndroidRuntime-startVm"><a href="#AndroidRuntime-startVm" class="headerlink" title="AndroidRuntime::startVm"></a><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/jni/AndroidRuntime.cpp#522" target="_blank" rel="external">AndroidRuntime::startVm</a></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> AndroidRuntime<span class="token operator">::</span><span class="token function">startVm</span><span class="token punctuation">(</span>JavaVM<span class="token operator">*</span><span class="token operator">*</span> pJavaVM<span class="token punctuation">,</span> JNIEnv<span class="token operator">*</span><span class="token operator">*</span> pEnv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//设置虚拟机参数，创建虚拟机</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="AndroidRuntime-startReg"><a href="#AndroidRuntime-startReg" class="headerlink" title="AndroidRuntime::startReg"></a><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/jni/AndroidRuntime.cpp#1293" target="_blank" rel="external">AndroidRuntime::startReg</a></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> AndroidRuntime<span class="token operator">::</span><span class="token function">startReg</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//设置Thread类的线程创建函数为javaCreateThreadEtc</span>
    <span class="token function">androidSetCreateThreadFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>android_create_thread_fn<span class="token punctuation">)</span> javaCreateThreadEtc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">PushLocalFrame</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//注册JNI函数，gRegJNI是一个全局数组</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">register_jni_procs</span><span class="token punctuation">(</span>gRegJNI<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gRegJNI<span class="token punctuation">)</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">PopLocalFrame</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">PopLocalFrame</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="ZygoteInit"><a href="#ZygoteInit" class="headerlink" title="ZygoteInit"></a><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java" target="_blank" rel="external">ZygoteInit</a></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        SamplingProfilerIntegration<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//注册Zygote用的socket    </span>
        <span class="token function">registerZygoteSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment" spellcheck="true">//预加载类和资源</span>
        <span class="token function">preloadClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">preloadResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment" spellcheck="true">//强制执行一次垃圾收集</span>
        <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">startSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动system_server</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> USAGE_STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ZYGOTE_FORK_MODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">runForkMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//处理新Android应用程序运行请求</span>
            <span class="token function">runSelectLoopMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">closeServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭socket</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MethodAndArgsCaller</span> caller<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        caller<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token function">closeServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>ZygoteInit类的功能</p>
<h3 id="绑定套接字，接收新Android应用程序运行请求"><a href="#绑定套接字，接收新Android应用程序运行请求" class="headerlink" title="绑定套接字，接收新Android应用程序运行请求"></a>绑定套接字，接收新Android应用程序运行请求</h3><p>为了从ActivityManager接收新Android应用程序的运行请求，Zygote使用UDS(Unix Domain Socket),init进程在运行app_process时，使用init.rc文件中以”/dev/zygote”形式注册的套接字<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java#176" target="_blank" rel="external">registerZygoteSocket</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerZygoteSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sServerSocket <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> fileDesc<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//从环境变量中获取Socket的fd</span>
            String env <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span>ANDROID_SOCKET_ENV<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fileDesc <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ANDROID_SOCKET_ENV <span class="token operator">+</span> <span class="token string">" unset or invalid"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//创建服务端Socket，这个Socket将listen并accept Client</span>
            sServerSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalServerSocket</span><span class="token punctuation">(</span><span class="token function">createFileDescriptor</span><span class="token punctuation">(</span>fileDesc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Error binding to local socket '"</span> <span class="token operator">+</span> fileDesc <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="加载Android-Application-Framework使用的类与资源"><a href="#加载Android-Application-Framework使用的类与资源" class="headerlink" title="加载Android Application Framework使用的类与资源"></a>加载Android Application Framework使用的类与资源</h3><p>将应用程序框架中的类、平台资源(图像、XML信息、字符串等)预先加载到内存中。新进程直接使用这些类与资源，而不需要重新加载它们，这大大加快了程序的执行速度<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java#259" target="_blank" rel="external">preloadClasses</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRELOADED_CLASSES <span class="token operator">=</span> <span class="token string">"preloaded-classes"</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preloadClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> VMRuntime runtime <span class="token operator">=</span> VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//预加载类的信息存储在PRELOADED_CLASSES变量中，它的值为"preloaded-classes"</span>
    InputStream is <span class="token operator">=</span> ZygoteInit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>PRELOADED_CLASSES<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Couldn't find "</span> <span class="token operator">+</span> PRELOADED_CLASSES <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//做一些统计和准备工作</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//读取"preloaded-classes"文件的内容</span>
            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            String line<span class="token punctuation">;</span>
            String missingClasses <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//读取文件的每一行，忽略#开头的注释行</span>
                line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token operator">||</span> line<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Config<span class="token punctuation">.</span>LOGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Preloading "</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">//通过Java反射来记载类，line中存储的是预加载的类名</span>
                    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                    count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//扫尾工作</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/preloaded-classes" target="_blank" rel="external">preloaded-classes</a></p>
<pre><code># Classes which are preloaded by com.android.internal.os.ZygoteInit.
2# Automatically generated by frameworks/base/tools/preload/WritePreloadedClassFile.java.
3# MIN_LOAD_TIME_MICROS=1250
4android.R$styleable
5android.accounts.AccountManager
6android.accounts.AccountManager$4
7android.accounts.AccountManager$6
8android.accounts.AccountManager$AmsTask
...
</code></pre><p>preload_class文件由framework/base/tools/preload工具生成，它判断每个类的加载的时间是否大于1250微秒（1.25毫秒）即MIN_LOAD_TIME_MICROS=1250，超时的类会被写入到preload-classes文件中，最后由zygote预加载<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java#402" target="_blank" rel="external">preloadResources</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preloadResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> VMRuntime runtime <span class="token operator">=</span> VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Debug<span class="token punctuation">.</span><span class="token function">startAllocCounting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        runtime<span class="token punctuation">.</span><span class="token function">gcSoftReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        runtime<span class="token punctuation">.</span><span class="token function">runFinalizationSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//预加载系统资源</span>
        mResources <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mResources<span class="token punctuation">.</span><span class="token function">startPreloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>PRELOAD_RESOURCES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Preloading resources..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">long</span> startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//加载Drawable资源</span>
            TypedArray ar <span class="token operator">=</span> mResources<span class="token punctuation">.</span><span class="token function">obtainTypedArray</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>preloaded_drawables<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token function">preloadDrawables</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"...preloaded "</span> <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token string">" resources in "</span><span class="token operator">+</span> <span class="token punctuation">(</span>SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//加载Color State资源</span>
            ar <span class="token operator">=</span> mResources<span class="token punctuation">.</span><span class="token function">obtainTypedArray</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>preloaded_color_state_lists<span class="token punctuation">)</span><span class="token punctuation">;</span>
            N <span class="token operator">=</span> <span class="token function">preloadColorStateLists</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"...preloaded "</span> <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token string">" resources in "</span><span class="token operator">+</span> <span class="token punctuation">(</span>SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mResources<span class="token punctuation">.</span><span class="token function">finishPreloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failure preloading resources"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        Debug<span class="token punctuation">.</span><span class="token function">stopAllocCounting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>加载Drawable与Color State资源,<a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/res/res/values/arrays.xml#24" target="_blank" rel="external">preloaded_drawables</a>与<a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/res/res/values/arrays.xml#92" target="_blank" rel="external">preloaded_color_state_lists</a>记录的会被加载到内存中</p>
<h3 id="启动运行SystemServer"><a href="#启动运行SystemServer" class="headerlink" title="启动运行SystemServer"></a>启动运行SystemServer</h3><p>通过app_process运行zygote时，参数”–start-system-server”会调用startSystemServer方法启动系统服务器，系统服务器用来运行Android平台需要的一些主要的本地服务<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java#525" target="_blank" rel="external">startSystemServer</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">startSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> MethodAndArgsCaller<span class="token punctuation">,</span> RuntimeException <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//该数组保存SystemServer的启动参数</span>
    String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">"--setuid=1000"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//uid</span>
        <span class="token string">"--setgid=1000"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//gid</span>
        <span class="token string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,3001,3002,3003"</span><span class="token punctuation">,</span>
        <span class="token string">"--capabilities=130104352,130104352"</span><span class="token punctuation">,</span>
        <span class="token string">"--runtime-init"</span><span class="token punctuation">,</span>
        <span class="token string">"--nice-name=system_server"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//进程名</span>
        <span class="token string">"com.android.server.SystemServer"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启动的类名</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    ZygoteConnection<span class="token punctuation">.</span>Arguments parsedArgs <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//把上面字符串数组参数转换成Arguments对象</span>
        parsedArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteConnection<span class="token punctuation">.</span>Arguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> debugFlags <span class="token operator">=</span> parsedArgs<span class="token punctuation">.</span>debugFlags<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>SystemProperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ro.debuggable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            debugFlags <span class="token operator">|=</span> Zygote<span class="token punctuation">.</span>DEBUG_ENABLE_DEBUGGER<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//fork一个子进程</span>
        pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkSystemServer</span><span class="token punctuation">(</span>
                    parsedArgs<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>gid<span class="token punctuation">,</span>
                    parsedArgs<span class="token punctuation">.</span>gids<span class="token punctuation">,</span> debugFlags<span class="token punctuation">,</span> null<span class="token punctuation">,</span>
                    parsedArgs<span class="token punctuation">.</span>permittedCapabilities<span class="token punctuation">,</span>
                    parsedArgs<span class="token punctuation">.</span>effectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//如果pid为0，表示处在子进程中，也就是处于system_server进程中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//system_server进程工作</span>
        <span class="token function">handleSystemServerProcess</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>与运行其他应用程序不同，startSystemServer方法会调用forkSystemServer()方法来创建新进程，并运行SystemServer。系统在运行普通Android应用程序时，只负责创建应用程序进程，至于进程是否创建成功并不检查。与此不同，SystemServer是必须运行的，因此在forkSystemServer()方法中必须检查生成的SystemServer进程是否正常</p>
<p>在生成的SystemServer进程中运行com.android.server.SystemServer类的main()方法<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/services/java/com/android/server/SystemServer.java#558" target="_blank" rel="external">main</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTargetHeapUtilization</span><span class="token punctuation">(</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"android_servers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init1</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>执行main()方法时会加载名称为android_server的本地库。<br>本地库加载完毕后，继续加载init1()函数，它是一个JNI本地方法。init1()函数调用system_init()函数，启动Audio Flinger、Surface Flinger、MediaPlayerService、CameraService等本地服务<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/cmds/system_server/library/system_init.cpp#53" target="_blank" rel="external">system_init</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token string">"C"</span> status_t <span class="token function">system_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>propBuf<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SurfaceFlinger<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proc<span class="token operator">-</span><span class="token operator">></span><span class="token function">supportsProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AudioFlinger<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MediaPlayerService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CameraService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AudioPolicyService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    AndroidRuntime<span class="token operator">*</span> runtime <span class="token operator">=</span> AndroidRuntime<span class="token operator">::</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    runtime<span class="token operator">-</span><span class="token operator">></span><span class="token function">callStatic</span><span class="token punctuation">(</span><span class="token string">"com/android/server/SystemServer"</span><span class="token punctuation">,</span> <span class="token string">"init2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token operator">-</span><span class="token operator">></span><span class="token function">supportsProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"System server: entering thread pool.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        IPCThreadState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">joinThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"System server: exiting thread pool.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> NO_ERROR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>本地服务组成完毕后，再此调用SystemServer类的静态方法init2(),init2()方法创建android.server.ServerThread线程，并启动它，从而运行Android Framework的主要服务<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/services/java/com/android/server/SystemServer.java#558" target="_blank" rel="external">init2</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Entered the Android system server!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread thr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thr<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"android.server.ServerThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thr<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>当ServerThread线程创建好并运行后，Thread类的run()方法被调用，此时ServerThread类中重定义的run()方法被调用。在run()方法中包含主要服务生成与注册的代码<br>当所有服务正常启动后，Zygote才做好运行新应用程序的准备</p>
<h3 id="处理新Android应用程序运行请求"><a href="#处理新Android应用程序运行请求" class="headerlink" title="处理新Android应用程序运行请求"></a>处理新Android应用程序运行请求</h3><p>监视UDS,若收到新Android应用程序生成请求，则进入处理循环</p>
<p>在SystemServer运行后，程序会进入一个循环，处理来自多有绑定的套接字的请求，若ZYGOTE_FORK_MODE为false，程序就会调用runSelectLoopMode()方法，直到Zygote进程终止，该方法才会返回<br><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java#670" target="_blank" rel="external">runSelectLoopMode</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runSelectLoopMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MethodAndArgsCaller <span class="token punctuation">{</span>
    ArrayList<span class="token operator">&lt;</span>FileDescriptor<span class="token operator">></span> fds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ArrayList<span class="token operator">&lt;</span>ZygoteConnection<span class="token operator">></span> peers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FileDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> fdArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDescriptor</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//sServerSocket是我们先前在registerZygoteSocket中建立的Socket</span>
    fds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sServerSocket<span class="token punctuation">.</span><span class="token function">getFileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    peers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> loopCount <span class="token operator">=</span> GC_LOOP_COUNT<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> index<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>loopCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            loopCount <span class="token operator">=</span> GC_LOOP_COUNT<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            loopCount<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            fdArray <span class="token operator">=</span> fds<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>fdArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*
                selectReadable内部调用select,使用多路复用I/O模型
                当有客户端连接或有数据时，则selectReadable就会返回
            */</span>
            index <span class="token operator">=</span> <span class="token function">selectReadable</span><span class="token punctuation">(</span>fdArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Error in select()"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Error in select()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ZygoteConnection newPeer <span class="token operator">=</span> <span class="token function">acceptCommandPeer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            peers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newPeer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newPeer<span class="token punctuation">.</span><span class="token function">getFileDesciptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> done<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//客户端发送了请求,peers.get返回的是ZygoteConnection</span>
            done <span class="token operator">=</span> peers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">runOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                peers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                fds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java#167" target="_blank" rel="external">runOnce</a></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">runOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ZygoteInit<span class="token punctuation">.</span>MethodAndArgsCaller <span class="token punctuation">{</span>
    String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    Arguments parsedArgs <span class="token operator">=</span> null<span class="token punctuation">;</span>
    FileDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> descriptors<span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//读取请求信息，请求信息包含创建新进程的参数选项</span>
        args <span class="token operator">=</span> <span class="token function">readArgumentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        descriptors <span class="token operator">=</span> mSocket<span class="token punctuation">.</span><span class="token function">getAncillaryFileDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"IOException on command socket "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">closeSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">closeSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    PrintStream newStderr <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>descriptors <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> descriptors<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newStderr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>descriptors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/*
        分析请求信息中的字符串数组，为运行进程设置好各个选项，具体
        包括了设置应用程序的gid、uid、调试标记处理,设置rlimit，以及检查运行权限等
        */</span>
        parsedArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">applyUidSecurityPolicy</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">,</span> peer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">applyDebuggerSecurityPolicy</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">applyRlimitSecurityPolicy</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">,</span> peer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">applyCapabilitiesSecurityPolicy</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">,</span> peer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rlimits <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>rlimits <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rlimits <span class="token operator">=</span> parsedArgs<span class="token punctuation">.</span>rlimits<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>intArray2d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//创建新进程</span>
        pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkAndSpecialize</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>gid<span class="token punctuation">,</span>
        parsedArgs<span class="token punctuation">.</span>gids<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>debugFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">logAndPrintError</span> <span class="token punctuation">(</span>newStderr<span class="token punctuation">,</span> <span class="token string">"Invalid zygote arguments"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZygoteSecurityException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">logAndPrintError</span><span class="token punctuation">(</span>newStderr<span class="token punctuation">,</span><span class="token string">"Zygote security policy preventsrequest: "</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">handleChildProc</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">,</span> descriptors<span class="token punctuation">,</span> newStderr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token function">handleParentProc</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> descriptors<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/10570841/" target="_blank" rel="external">Amdroid框架揭秘</a><br><a href="https://book.douban.com/subject/6802440/" target="_blank" rel="external">深入理解Android卷I</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇基于android2.2.3&lt;br&gt;Zygote是Android系统应用中一个相当重要的进程，它的主要功能就是执行Android应用程序&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android Framework" scheme="https://luoweiguang.github.io/tags/Android-Framework/"/>
    
  </entry>
  
  <entry>
    <title>JNI(直接注册JNI本地函数)</title>
    <link href="https://luoweiguang.github.io/2016/09/30/JNI(%E7%9B%B4%E6%8E%A5%E6%B3%A8%E5%86%8CJNI%E6%9C%AC%E5%9C%B0%E5%87%BD%E6%95%B0)/"/>
    <id>https://luoweiguang.github.io/2016/09/30/JNI(直接注册JNI本地函数)/</id>
    <published>2016-09-30T14:00:00.000Z</published>
    <updated>2017-11-14T15:49:20.773Z</updated>
    
    <content type="html"><![CDATA[<p>JNI机制提供了名称为RegisterNatives()的JNI函数，该函数运行C/C++开发者将JNI本地函数与Java类的本地方法直接映射在一起。当不调用RegisterNatives()函数时，Java虚拟机会自动检索并将JNI本地函数与相应的Java本地方法链接在一起。但当开发者直接调用RegisterNatives()函数进行映射时，Java虚拟机就不必进行映射处理，这会极大提高运行速度，提高运行效率。<br><a id="more"></a></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>HelloJNI.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJNI</span> 
<span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//本地方法声明</span>
    <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//加载库</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"hellojni"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        HelloJNI myJNI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//调用本地方法(实际调用的是使用C语言编写的JNI本地函数)</span>
        myJNI<span class="token punctuation">.</span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myJNI<span class="token punctuation">.</span><span class="token function">printString</span><span class="token punctuation">(</span><span class="token string">"Hello World from printString fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>hellojnimap.cpp</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"jni.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment" spellcheck="true">//JNI本地函数原型</span>
<span class="token keyword">void</span> <span class="token function">printHelloNative</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>jobject obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">printStringNative</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>jobject obj<span class="token punctuation">,</span>jstring string<span class="token punctuation">)</span><span class="token punctuation">;</span>

JNIEXPORT jint JNICALL <span class="token function">JNI_OnLoad</span><span class="token punctuation">(</span>JavaVM <span class="token operator">*</span>vm<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>reserved<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    JNIEnv<span class="token operator">*</span> env <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    JNINativeMethod nm<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    jclass <span class="token class-name">cls</span><span class="token punctuation">;</span>
    jint result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>vm<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetEnv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>env<span class="token punctuation">,</span>JNI_VERSION_1_4<span class="token punctuation">)</span> <span class="token operator">!=</span> JNI_OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> JNI_ERR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cls <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"HelloJNI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    nm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"printHello"</span><span class="token punctuation">;</span>
    nm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>signature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"()V"</span><span class="token punctuation">;</span>
    nm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fnPtr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>printHelloNative<span class="token punctuation">;</span>

    nm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"printString"</span><span class="token punctuation">;</span>
    nm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>signature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">;</span>
    nm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fnPtr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>printStringNative<span class="token punctuation">;</span>

    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">RegisterNatives</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>nm<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> JNI_VERSION_1_4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//实现JNI本地函数</span>
<span class="token keyword">void</span> <span class="token function">printHelloNative</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>jobject obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printStringNative</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>jobject obj<span class="token punctuation">,</span>jstring string<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s!\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>编译:</p>
<pre><code>gcc -shared -o hellojni.dll hellojnimap.cpp
</code></pre><pre><code>javac HelloJNI.java
</code></pre><p>运行:</p>
<pre><code>java HelloJNI
</code></pre><p>结果:</p>
<pre><code>Hello World!
Hello World from printString fun!
</code></pre><h2 id="JNI-OnLoad-讲解"><a href="#JNI-OnLoad-讲解" class="headerlink" title="JNI_OnLoad()讲解"></a>JNI_OnLoad()讲解</h2><p>在加载指定库文件时，JNI_OnLoad()函数会被自动调用执行，程序开发者若想手工映射本地方法与JNI本地函数，需要在JNI_OnLoad()函数内调用RegisterNatives()函数进行映射匹配。</p>
<h3 id="JNI-OnLoad"><a href="#JNI-OnLoad" class="headerlink" title="JNI_OnLoad()"></a><code>JNI_OnLoad()</code></h3><ul>
<li><p>形式:<br><code>jint JNI_OnLoad(JavaVM *vm,void *reserved)</code></p>
</li>
<li><p>说明:<br>Java虚拟机加载本地库时(System.loadLibrary()等方法被调用时)会调用JNI_OnLoad()函数。在使用加载库的过程中，JNI_OnLoad()函数会向Java虚拟机确认JNI的版本。若库中不包含JNI_OnLoad()函数,Java虚拟机会认为相关库要求JNI1.1版本支持</p>
</li>
<li><p>参数:</p>
<ul>
<li>vm JavaVM接口指针</li>
<li>reserved 预定参数</li>
</ul>
</li>
<li><p>返回值:<br>若执行成功，则返回所生成的数组引用，若失败，则返回NULL</p>
</li>
</ul>
<h2 id="判断支持版本"><a href="#判断支持版本" class="headerlink" title="判断支持版本"></a>判断支持版本</h2><h3 id="GetEnv"><a href="#GetEnv" class="headerlink" title="GetEnv()"></a><code>GetEnv()</code></h3><ul>
<li><p>形式:<br><code>jnit GetEnv(JavaVM *vm,void **env,jint version)</code></p>
</li>
<li><p>说明:<br><code>判断Java虚拟机是否支持version指定的JNI版本，而后将JNI接口指针设置到*env中</code></p>
</li>
<li><p>参数:</p>
<ul>
<li>vm JavaVM接口指针的地址</li>
<li>env JNI接口指针地址</li>
<li>version JNI版本</li>
</ul>
</li>
<li><p>返回值:<br>若执行成功，返回0，失败,返回负数</p>
</li>
</ul>
<h2 id="注册绑定"><a href="#注册绑定" class="headerlink" title="注册绑定"></a>注册绑定</h2><p>JNINativeMethod用来保存待映射的本地方法与JNI本地函数的相关信息</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本地方法名称</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>signature<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本地方法签名</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>fnPtr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与本地方法相对应的JNI本地函数指针</span>
<span class="token punctuation">}</span> JNINativeMethod
</code></pre>
<h3 id="RegisterNatives"><a href="#RegisterNatives" class="headerlink" title="RegisterNatives()"></a><code>RegisterNatives()</code></h3><ul>
<li><p>形式:<br><code>jarray RegisterNatives(JNIEnv *env,jclass clazz,const JNINativeMethod *methods,jnit nMethods)</code></p>
</li>
<li><p>说明:<br>将clazz指定类中的本地方法与JNI本地函数链接在一起，链接信息保存在JNINativeMethod结构体数组中</p>
</li>
<li><p>参数</p>
<ul>
<li>env JNI接口指针</li>
<li>clazz Java类</li>
<li>methods 包含本地方法与JNI本地函数的链接信息</li>
<li>nMethods methods数组元素的个数</li>
</ul>
</li>
<li><p>返回值<br>若执行成功，返回数组引用，否则，返回NULL</p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/10570841/" target="_blank" rel="external">Amdroid框架揭秘</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JNI机制提供了名称为RegisterNatives()的JNI函数，该函数运行C/C++开发者将JNI本地函数与Java类的本地方法直接映射在一起。当不调用RegisterNatives()函数时，Java虚拟机会自动检索并将JNI本地函数与相应的Java本地方法链接在一起。但当开发者直接调用RegisterNatives()函数进行映射时，Java虚拟机就不必进行映射处理，这会极大提高运行速度，提高运行效率。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="JNI" scheme="https://luoweiguang.github.io/tags/JNI/"/>
    
      <category term="Java进阶" scheme="https://luoweiguang.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>JNI(在C程序中运行Java类)</title>
    <link href="https://luoweiguang.github.io/2016/09/29/JNI(%E5%9C%A8C%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%BF%90%E8%A1%8CJava%E7%B1%BB)/"/>
    <id>https://luoweiguang.github.io/2016/09/29/JNI(在C程序中运行Java类)/</id>
    <published>2016-09-29T14:00:00.000Z</published>
    <updated>2017-11-14T15:55:14.573Z</updated>
    
    <content type="html"><![CDATA[<p>C/C++代码中调用Java代码的几种典型情况</p>
<ul>
<li>需要在C/C++编写的本地应用程序中访问用Java语言编写的代码或代码库</li>
<li>希望在C/C++编写的本地应用程序中使用标准Java类库</li>
<li>当需要把已有的C/C++程序与Java程序组织链接在一起时，使用Invocation API,可以将它们组织成一个完整的程序</li>
</ul>
<a id="more"></a>
<h2 id="应用示例步骤"><a href="#应用示例步骤" class="headerlink" title="应用示例步骤"></a>应用示例步骤</h2><ul>
<li>使用Invocation API加载Java虚拟机</li>
<li>加载Java类</li>
<li>执行被加载类的方法</li>
<li>销毁Java虚拟机</li>
</ul>
<h2 id="应用示例代码"><a href="#应用示例代码" class="headerlink" title="应用示例代码"></a>应用示例代码</h2><p>InvocationApiTest.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvocationApiTest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>invocationApi.c</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;jni.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    JNIEnv <span class="token operator">*</span>env<span class="token punctuation">;</span>
    JavaVM <span class="token operator">*</span>vm<span class="token punctuation">;</span>
    JavaVMInitArgs vm_args<span class="token punctuation">;</span>
    JavaVMOption options<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    jint res<span class="token punctuation">;</span>
    jclass cls<span class="token punctuation">;</span>
    jmethodID mid<span class="token punctuation">;</span>
    jstring jstr<span class="token punctuation">;</span>
    jclass stringClass<span class="token punctuation">;</span>
    jobjectArray args<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//生成Java虚拟机选项</span>
    options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>optionString <span class="token operator">=</span> <span class="token string">"-Djava.class.path=."</span><span class="token punctuation">;</span>
    vm_args<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token number">0x00010002</span><span class="token punctuation">;</span>
    vm_args<span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>
    vm_args<span class="token punctuation">.</span>nOptions <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    vm_args<span class="token punctuation">.</span>ignoreUnrecognized <span class="token operator">=</span> JNI_TRUE<span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">//生成Java虚拟机</span>
    res <span class="token operator">=</span> <span class="token function">JNI_CreateJavaVM</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vm<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>env<span class="token punctuation">,</span><span class="token operator">&amp;</span>vm_args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//查找并加载类</span>
    cls <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span><span class="token string">"InvocationApiTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//获取main()方法的ID</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetStaticMethodID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>cls<span class="token punctuation">,</span><span class="token string">"main"</span><span class="token punctuation">,</span><span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//生成字符串对象，用作main()方法的参数</span>
    jstr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span><span class="token string">"Hello Invocation API!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stringClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span><span class="token string">"java/lang/String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">NewObjectArray</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>stringClass<span class="token punctuation">,</span>jstr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// //调用main()方法</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">CallStaticVoidMethod</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>cls<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//销毁Java虚拟机</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>vm<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">DestroyJavaVM</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<p>编译命令</p>
<pre><code>gcc invocationApi.c &quot;C:\Program Files\Java\jdk1.8.0_73\lib\jvm.lib&quot;  -lstdc++ -o invocationApi.exe
</code></pre><p>运行命令</p>
<pre><code>invocationApi.exe
</code></pre><p>结果</p>
<pre><code>Hello Invocation API!!
</code></pre><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>在生成Java虚拟机选项时，使用的JavaVMInitArgs与JavaVMOption结构体，它们定义在jni.h头文件中</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> JavaVMOption <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>optionString<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>extraInfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span> JavaVMOption<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> JavaVMInitArgs <span class="token punctuation">{</span>
    jint version<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//版本号设置</span>
    jint nOptions<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JavaVMOption结构体数组元素个数</span>
    JavaVMOption <span class="token operator">*</span>options<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JavaVMOption结构体的地址</span>
    jboolean ignoreUnrecognized<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//虚拟中读到错误设置是否忽略错误继续执行</span>
<span class="token punctuation">}</span> JavaVMInitArgs<span class="token punctuation">;</span>
</code></pre>
<p>JavaVMOption结构体用来指定Java虚拟机的选项值，其形式为<br><code>-D&lt;property&gt;=&lt;value&gt;</code></p>
<h4 id="JNI-CreateJavaVM"><a href="#JNI-CreateJavaVM" class="headerlink" title="JNI_CreateJavaVM"></a>JNI_CreateJavaVM</h4><ul>
<li><p>形式:<br><code>jint JNI_CreateJavaVM(JavaVM **vm,JNIEnv **env,void *vm_args)</code></p>
</li>
<li><p>说明:<br>装载并初始化Java虚拟机</p>
</li>
<li><p>参数:</p>
<ul>
<li>vm JavaVM指针的地址</li>
<li>env JNI接口指针的地址</li>
<li>vm_args 传递给Java虚拟机的参数</li>
</ul>
</li>
<li><p>返回值:<br>成功，返回0，失败，返回负值</p>
</li>
</ul>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><h4 id="NewObjectArray"><a href="#NewObjectArray" class="headerlink" title="NewObjectArray"></a>NewObjectArray</h4><ul>
<li><p>形式<br><code>jarray NewObjectArray(JNIEnv *env,jsize length,jclass elementClass,jobject initalElement)</code></p>
</li>
<li><p>说明:<br>生成由elementClass对象组成的数组。数组元素个数由length指定，initalElement参数用来初始化对象数组</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>length 数组元素个数</li>
<li>elementClass 数组元素对象的类型</li>
<li>initialElement 数组初始化值</li>
</ul>
</li>
<li><p>返回值:<br>若成功，则返回数组引用，失败，则返回NULL</p>
</li>
</ul>
<h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="NewStringUTF"><a href="#NewStringUTF" class="headerlink" title="NewStringUTF"></a>NewStringUTF</h4><ul>
<li><p>形式:<br><code>jstring NewStringUTF(JNIEnv *env,const char *bytes)</code></p>
</li>
<li><p>说明:<br>将UTF-8形式的C字符串转换成java.lang.String对象</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>bytes 待生成String对象的C字符串的地址</li>
</ul>
</li>
<li><p>返回值:<br>成功，返回String对象的jstring类型的引用,失败,返回NULL</p>
</li>
</ul>
<h4 id="GetStringUTFChars"><a href="#GetStringUTFChars" class="headerlink" title="GetStringUTFChars"></a>GetStringUTFChars</h4><ul>
<li><p>形式:<br><code>const jbyte*GetStringUTFChars(JNIEnv *env,jstring string,jboolean *isCopy)</code></p>
</li>
<li><p>说明:<br>将Java字符串对象转换成UTF-8字符串(C字符串)，并返回指针</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>string Java字符串对象</li>
<li>isCopy 当String对象中的字符串被转换成UTF-8字符串，被复制到内存，且指针被返回时，*isCopy 设置为JNI_TRUE,否则设置为JNI_FALSE</li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/10570841/" target="_blank" rel="external">Amdroid框架揭秘</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C/C++代码中调用Java代码的几种典型情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要在C/C++编写的本地应用程序中访问用Java语言编写的代码或代码库&lt;/li&gt;
&lt;li&gt;希望在C/C++编写的本地应用程序中使用标准Java类库&lt;/li&gt;
&lt;li&gt;当需要把已有的C/C++程序与Java程序组织链接在一起时，使用Invocation API,可以将它们组织成一个完整的程序&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="JNI" scheme="https://luoweiguang.github.io/tags/JNI/"/>
    
      <category term="Java进阶" scheme="https://luoweiguang.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>JNI(调用JNI函数)</title>
    <link href="https://luoweiguang.github.io/2016/09/29/JNI(%E8%B0%83%E7%94%A8JNI%E5%87%BD%E6%95%B0)/"/>
    <id>https://luoweiguang.github.io/2016/09/29/JNI(调用JNI函数)/</id>
    <published>2016-09-29T12:00:00.000Z</published>
    <updated>2017-11-14T16:00:36.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="示例程序运行顺序"><a href="#示例程序运行顺序" class="headerlink" title="示例程序运行顺序"></a>示例程序运行顺序</h2><ul>
<li>调用JNI本地函数</li>
<li>访问静态成员获取值</li>
<li>创建JniTest对象</li>
<li>调用JniTest对象的方法</li>
<li>传递返回值</li>
<li>访问成员变量设定其值</li>
</ul>
<a id="more"></a>
<p>JniFuncMain.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JniFuncMain</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> staticIntField <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//加载本地库jinfunc.dll</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"jnifunc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//本地方法声明</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> JniTest <span class="token function">createJniObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//从本地代码生成JniTest对象</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Java]createJniObject()调用本地方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//使用static关键字，不需要创建对象，直接通过JniFuncMain类调用即可</span>
        JniTest jniObj <span class="token operator">=</span> <span class="token function">createJniObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//调用JniTest对象的方法</span>
        jniObj<span class="token punctuation">.</span><span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>JniTest.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JniTest</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> intField<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//构造方法</span>
    <span class="token keyword">public</span> <span class="token function">JniTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        intField <span class="token operator">=</span> num<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Java] 调用JniTest对象的构造方法:intField = "</span> <span class="token operator">+</span> intField<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//此方法由JNI本地函数调用</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">callByNative</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Java] JniTest对象的callByNative("</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">")调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Java] JniTest对象的callTest()方法调用:intField="</span><span class="token operator">+</span>intField<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>JniFuncMain.h</p>
<pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */
#include &lt;jni.h&gt;
/* Header for class JniFuncMain */

#ifndef _Included_JniFuncMain
#define _Included_JniFuncMain
#ifdef __cplusplus
extern &quot;C&quot; {
#endif
/*
 * Class:     JniFuncMain
 * Method:    createJniObject
 * Signature: ()LJniTest;
 */
JNIEXPORT jobject JNICALL Java_JniFuncMain_createJniObject
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
</code></pre><p>jnifunc.cpp</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"JniFuncMain.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

JNIEXPORT jobject JNICALL <span class="token function">Java_JniFuncMain_createJniObject</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>jclass <span class="token class-name">clazz</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    jclass <span class="token class-name">targetClass</span><span class="token punctuation">;</span>
    jmethodID mid<span class="token punctuation">;</span>
    jobject newObject<span class="token punctuation">;</span>
    jstring helloStr<span class="token punctuation">;</span>
    jfieldID fid<span class="token punctuation">;</span>
    jint staticIntField<span class="token punctuation">;</span>
    jint result<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//获取JniFuncMain类的staticIntField变量值</span>
    fid <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStaticFieldID</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span><span class="token string">"staticIntField"</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//读取jclass与fieldid指定的成员变量值</span>
    staticIntField <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStaticIntField</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span>fid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[CPP]获取JniFuncMain类的staticIntField变量值\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"        JniFuncMain.staticIntField = %d\n"</span><span class="token punctuation">,</span> staticIntField<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//查找生成对象的类</span>
    targetClass <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"JniTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//查找构造方法</span>
    mid <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span><span class="token string">"&lt;init>"</span><span class="token punctuation">,</span><span class="token string">"(I)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//生成JniTest对象(返回对象的引用)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[CPP]JniTest对象生成\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newObject <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewObject</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//调用对象的方法</span>
    mid <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span><span class="token string">"callByNative"</span><span class="token punctuation">,</span><span class="token string">"(I)I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>newObject<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//设置JniObject对象的intField值</span>
    fid <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span><span class="token string">"intField"</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[CPP]设置JniObject对象的intField值为200\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>newObject<span class="token punctuation">,</span>fid<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//返回对象的引用</span>
    <span class="token keyword">return</span> newObject<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<p>编译命令</p>
<pre><code>gcc -finput-charset=UTF-8 -fexec-charset=GBK -shared -o jnifunc.dll jnifunc.cpp
</code></pre><p>运行命令</p>
<pre><code>java JniFuncMain
</code></pre><p>输出结果</p>
<pre><code>[Java]createJniObject()调用本地方法
[CPP]获取JniFuncMain类的staticIntField变量值
                JniFuncMain.staticIntField = 300
[CPP]JniTest对象生成
[Java] 调用JniTest对象的构造方法:intField = 100
[Java] JniTest对象的callByNative(200)调用
[CPP]设置JniObject对象的intField值为200
[Java] JniTest对象的callTest()方法调用:intField=200
</code></pre><h2 id="访问Java类-对象的成员变量"><a href="#访问Java类-对象的成员变量" class="headerlink" title="访问Java类/对象的成员变量"></a>访问Java类/对象的成员变量</h2><p><strong>步骤:</strong></p>
<ul>
<li>查找含待访问的成员变量的Java类的jclass值</li>
<li>查找此类成员变量的jfieldID值</li>
<li>使用jclass与jfieldID值，获取或设置成员变量值</li>
</ul>
<p>若想要在本地代码中访问Java的成员变量，必须获取相应成员变量的ID值。<br>成员变量的ID保存在jfieldID类型的变量中。由于待读取数值的staticIntField成员变量是JniFuncMain类的静态成员变量，在获取staticIntField的ID时，应调用名称为GetStaticFieldID()的JNI函数<br>若想获取普通对象中的非静态成员变量的ID,应调用名称为GetFieldID()的JNI函数</p>
<h3 id="获取jclass值"><a href="#获取jclass值" class="headerlink" title="获取jclass值"></a>获取jclass值</h3><h4 id="FindClass"><a href="#FindClass" class="headerlink" title="FindClass()"></a><code>FindClass()</code></h4><ul>
<li><p>形式:<br><code>jclass FindClass(JNIEnv *env,const char *name)</code></p>
</li>
<li><p>说明:<br>查找name指定的Java类</p>
</li>
<li><p>参数<br>env JNI接口指针<br>name 待查找的类名</p>
</li>
<li><p>返回值<br>返回类的jclass值      </p>
</li>
</ul>
<h4 id="GetObjectClass"><a href="#GetObjectClass" class="headerlink" title="GetObjectClass()"></a><code>GetObjectClass()</code></h4><ul>
<li><p>形式:<br><code>jclass GetObjectClass(JNIEnv *env, jobject obj)</code></p>
</li>
<li><p>功能:</p>
</li>
<li><p>通过对象获取这个类。该函数比较简单，唯一注意的是对象不能为NULL，否则获取的class肯定返回也为NULL。     </p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI 接口指针。</li>
<li>obj Java 类对象实例。</li>
</ul>
</li>
</ul>
<h3 id="获取jfieldID值"><a href="#获取jfieldID值" class="headerlink" title="获取jfieldID值"></a>获取jfieldID值</h3><h4 id="GetStaticFieldID"><a href="#GetStaticFieldID" class="headerlink" title="GetStaticFieldID()"></a><code>GetStaticFieldID()</code></h4><ul>
<li><p>形式:<br><code>jfield GetStaticFieldID(JNIEnv *env,jclass clazz,const char *name,const *signature)</code></p>
</li>
<li><p>说明:<br>返回指定类的指定的静态成员变量的jfieldID的值</p>
</li>
<li><p>参数:   </p>
<ul>
<li>env JNI接口指针</li>
<li>clazz 包含成员变量的类的jclass</li>
<li>name 成员变量名</li>
<li>signature 成员变量签名</li>
</ul>
</li>
</ul>
<h4 id="GetFieldID"><a href="#GetFieldID" class="headerlink" title="GetFieldID()"></a><code>GetFieldID()</code></h4><ul>
<li><p>形式:<br><code>jfield GetFieldID(JNIEnv *env,jclass clazz,const char *name,const *signature)</code></p>
</li>
<li><p>说明:<br>返回对象中指定的成员变量的jfieldID的值</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>clazz 包含成员变量的类的jclass</li>
<li>name 成员变量名</li>
<li>signature 成员变量签名</li>
</ul>
</li>
</ul>
<h4 id="获取签名"><a href="#获取签名" class="headerlink" title="获取签名"></a>获取签名</h4><p>在JNI中获取成员变量或成员方法签名</p>
<p>形式:javap [选项] ‘类名’<br>选项: </p>
<ul>
<li>-s 输出Java签名</li>
<li>-p 输出所有类及成员</li>
</ul>
<pre><code>javap -s -p JniFuncMain
</code></pre><p>输出结果</p>
<pre><code>Compiled from &quot;JniFuncMain.java&quot;
public class JniFuncMain {
  private static int staticIntField;
    descriptor: I   //签名
  public JniFuncMain();
    descriptor: ()V

  public static native JniTest createJniObject();
    descriptor: ()LJniTest;

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V

  static {};
    descriptor: ()V
}
</code></pre><h3 id="获取成员变量值"><a href="#获取成员变量值" class="headerlink" title="获取成员变量值"></a>获取成员变量值</h3><p>在获取成员变量所在的类的ID后，根据个成员变量的类型与存储区块，调用相应的JNI函数读取成员变量值即可。在JNI中有两种函数用来获取成员变量的值，分别为<code>Get&lt;type&gt;Field</code>函数与<code>GetStatic&lt;type&gt;Field</code>函数（<code>&lt;type&gt;</code>指Int、Char、Double等基本数据类型，具体参考JNI文档）</p>
<h4 id="GetStatic-lt-type-gt-Field"><a href="#GetStatic-lt-type-gt-Field" class="headerlink" title="GetStatic&lt;type&gt;Field()"></a><code>GetStatic&lt;type&gt;Field()</code></h4><ul>
<li><p>形式:<br><code>&lt;jnitype&gt; GetStatic&lt;type&gt;Field(JNIEnv *env,jclass clazz,jfieldID fieldID)</code></p>
</li>
<li><p>说明:<br>返回clazz类中ID为fieldID的静态变量的值</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>clazz 包含成员变量的类</li>
<li>fieldID 成员变量的ID</li>
</ul>
</li>
</ul>
<ul>
<li><p>参考:<br><code>&lt;type&gt;</code>指Object、Boolean、Byte、Char、Short、Int、Long、Float、Double九种基本类型。<br>返回类型<code>&lt;jnitype&gt;</code>指jobject、jboolean、jbyte、jchar、jshort、jint、jlong、jfloat、jdouble九种基本类型<br>这些类型也被应用到其他JNI函数的<code>&lt;type&gt;</code>中</p>
</li>
<li><p>返回值<br>返回静态成员变量的值</p>
</li>
</ul>
<h4 id="Get-lt-type-gt-Field"><a href="#Get-lt-type-gt-Field" class="headerlink" title="Get&lt;type&gt;Field()"></a><code>Get&lt;type&gt;Field()</code></h4><ul>
<li><p>形式:<br><code>&lt;jnitype&gt; Get&lt;type&gt;Field(JNIEnv *env,jobject obj,jfieldID fieldID)</code></p>
</li>
<li><p>说明:<br>返回obj对象中ID为fieldID的成员变量的值</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>obj 包含成员变量的对象</li>
<li>fieldID 成员变量的ID</li>
</ul>
</li>
<li><p>返回值<br>返回成员变量的值</p>
</li>
</ul>
<h2 id="生成Java对象"><a href="#生成Java对象" class="headerlink" title="生成Java对象"></a>生成Java对象</h2><p><strong>步骤:</strong></p>
<ul>
<li>查找指定的类，并将查找到的类赋给jclass类型的变量</li>
<li>查找Java类构造方法的ID值(类型为jmethodID)</li>
<li>生成Java类对象</li>
</ul>
<p>首先调用JNi函数FindClass()，查找生成对象的类。</p>
<h3 id="获取jmethodID值"><a href="#获取jmethodID值" class="headerlink" title="获取jmethodID值"></a>获取jmethodID值</h3><p>在JNI函数中有一个<code>GetMethodID()</code>函数用来获取指定类的指定方法ID.此函数除了可以用来获取指定类的构造方法的ID外，还可以获取类的其他方法的ID。若指定的方法是静态方法，则可以调用JNI函数中的GetStaticMethodID()函数，获取指定静态方法的ID</p>
<p>在生成指定类的对象之前，需要先调用GetMethodID()函数获取该类构造方法的ID。在调用GetMethodID()函数时，除了提供生成对象的类，还要提供类的构造方法名称(类的构造方法名称为“<code>&lt;init&gt;</code>”，其他非构造方法，直接提供方法名即可)，以及构造方法的签名。</p>
<h4 id="GetMethodID"><a href="#GetMethodID" class="headerlink" title="GetMethodID()"></a><code>GetMethodID()</code></h4><ul>
<li><p>形式:<br><code>jmethodID GetMethodID(JNIEnv *env,jclass clazz,const char *name,const char *signature)</code></p>
</li>
<li><p>说明:<br>获取clazz类对象的指定方法的ID。注意,方法名(name)与签名应当保持一致。若获取类构造方法的ID,方法名为”<code>&lt;init&gt;</code>“</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>clazz Java类</li>
<li>name 方法名</li>
<li>signature 方法签名</li>
</ul>
</li>
<li><p>返回值<br>若方法ID错误，则返回NULL</p>
</li>
</ul>
<h3 id="生成Java类对象"><a href="#生成Java类对象" class="headerlink" title="生成Java类对象"></a>生成Java类对象</h3><p>以获得的JniTest类的jclass与构造方法的ID为参数，调用JNI函数NewObject()，生成JniTest类的对象。JniTest类的构造方法JniTest(int num)带有一个int类型的参数，在调用NewObject()时,同时传入100这个int数据。在生成JniTest类的对象后，将对象的引用保存在jobject变量中。</p>
<h4 id="NewObject"><a href="#NewObject" class="headerlink" title="NewObject()"></a><code>NewObject()</code></h4><ul>
<li><p>形式:<br><code>jobject NewObject(JNIEnv *env,jclass clazz,jmethodID methodID,...)</code></p>
</li>
<li><p>说明:<br>生成指定类的对象。methodID指类的构造方法的ID</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>clazz Java类</li>
<li>methodID 类的构造方法的ID</li>
<li>… 传递给类的构造方法的参数</li>
</ul>
</li>
<li><p>返回值<br>放回类对象的引用。若发生错误，返回NULL</p>
</li>
</ul>
<h3 id="调用Java方法"><a href="#调用Java方法" class="headerlink" title="调用Java方法"></a>调用Java方法</h3><p><strong>步骤:</strong></p>
<ul>
<li>获取含待调方法的Java类的jclass</li>
<li>获取待调方法的ID</li>
<li>调用Java方法保存返回值</li>
</ul>
<h4 id="CallStatic-lt-type-gt-Method"><a href="#CallStatic-lt-type-gt-Method" class="headerlink" title="CallStatic&lt;type&gt;Method()"></a><code>CallStatic&lt;type&gt;Method()</code></h4><ul>
<li><p>形式:<br><code>&lt;jnitype&gt; CallStatic&lt;type&gt;Method(JNIEnv *env,jclass clazz,jmethodID methodID,...)</code></p>
</li>
<li><p>说明:<br>调用methodID指定的类的静态方法</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>clazz 含待调方法的类</li>
<li>methodID 待调方法的ID</li>
<li>… 传递给待调方法的参数</li>
</ul>
</li>
<li><p>返回值:<br>被调方法的返回值</p>
</li>
<li><p>参考:<br><code>&lt;type&gt;</code>指Object、Boolean、Byte、Char、Short、Int、Long、Float、Double、void十种基本类型。<br>返回类型<code>&lt;jnitype&gt;</code>指jobject、jboolean、jbyte、jchar、jshort、jint、jlong、jfloat、jdouble、void十基本类型<br>待调方法的返回值不同<code>&lt;type&gt;</code>也不同。若待调方法的返回值类型为int，则调用函数为CallStaticIntMethod()</p>
</li>
</ul>
<h4 id="Call-lt-type-gt-Method"><a href="#Call-lt-type-gt-Method" class="headerlink" title="Call&lt;type&gt;Method()"></a><code>Call&lt;type&gt;Method()</code></h4><ul>
<li><p>形式:<br><code>&lt;jnitype&gt; Call&lt;type&gt;Mrthod(JNIEnv *env,jobject obj,jmethodID method,...)</code></p>
</li>
<li><p>说明:<br>调用methodID指定的Java对象的方法</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>obj 含待调方法的Java对象的方法</li>
<li>methodID 待调方法的ID</li>
<li>… 传递给待调方法的参数</li>
</ul>
</li>
<li><p>返回值:<br>被调方法的返回值</p>
</li>
</ul>
<h2 id="设置成员变量的值"><a href="#设置成员变量的值" class="headerlink" title="设置成员变量的值"></a>设置成员变量的值</h2><p><strong>步骤:</strong></p>
<ul>
<li>获取成员变量所在类的jclass值</li>
<li>获取对象的变量值</li>
<li>设置变量值</li>
</ul>
<h4 id="SetStatic-lt-type-gt-Field"><a href="#SetStatic-lt-type-gt-Field" class="headerlink" title="SetStatic&lt;type&gt;Field()"></a><code>SetStatic&lt;type&gt;Field()</code></h4><ul>
<li><p>形式:<br><code>void SetStatic&lt;type&gt;Field(JNIEnv *env,jclass clazz,jfieldID field,&lt;type&gt; value)</code></p>
</li>
<li><p>说明:<br><code>设置fieldID指定的Java类静态成员变量的值</code></p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>clazz 含待设置成员变量的类的引用</li>
<li>fieldID 待设成员变量的ID</li>
<li>value 指定设置值</li>
</ul>
</li>
</ul>
<h4 id="Set-lt-type-gt-Field"><a href="#Set-lt-type-gt-Field" class="headerlink" title="Set&lt;type&gt;Field()"></a><code>Set&lt;type&gt;Field()</code></h4><ul>
<li><p>形式<br><code>void Set&lt;type&gt;Field(JNIEnv *env,jobject obj,jfieldID field,&lt;type&gt; value)</code></p>
</li>
<li><p>说明:<br><code>设置fieldID指定的Java对象的成员变量的值</code></p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>obj 含待设置成员变量的Java对象的引用</li>
<li>fieldID 待设成员变量的ID</li>
<li>value 指定设置值</li>
</ul>
</li>
</ul>
<h2 id="局部引用与全局引用"><a href="#局部引用与全局引用" class="headerlink" title="局部引用与全局引用"></a>局部引用与全局引用</h2><p>在实现JNI本地函数时，由GetObjectClass()、FindClass()等JNI函数返回的jclass、jobject等引用都是局部引用。</p>
<p>局部引用是JNI默认的，它仅在JNI本地函数内才有效,即当JNI本地函数返回后,其内部的引用就会失效。</p>
<p>JNI提供了一个名称为NewGlobalRef()的JNI函数，用来为指定的类或对象生成全局引用(Global Reference),以便在JNI本地函数中在全局范围内使用该引用</p>
<h4 id="NewGlobalRef"><a href="#NewGlobalRef" class="headerlink" title="NewGlobalRef()"></a><code>NewGlobalRef()</code></h4><ul>
<li><p>形式:<br>jobject NewGlobalRef(JNIEnv *env,jobject obj)</p>
</li>
<li><p>说明:<br>为obj指定的类或对象，生成全局引用</p>
</li>
<li><p>参数:</p>
<ul>
<li>env JNI接口指针</li>
<li>obj 待生成全局引用的引用值</li>
</ul>
</li>
<li><p>返回生成的全局引用,若发生错误,则返回NULL</p>
</li>
</ul>
<p><strong>当全局引用使用完毕后，应当调用名称为DeleteGlobalRef()的JNI函数,显性地将全局引用销毁。</strong></p>
<p>例子</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"RefTestMain.h"</span></span>

<span class="token keyword">static</span> jclass globalTargetClass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

JNIEXPORT jint JNICALL <span class="token function">Java_RefTestMain_getMember</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>jclass clazz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    jfieldID fid<span class="token punctuation">;</span>
    jint intField<span class="token punctuation">;</span>
    jclass targetClass<span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>globalTargetClass <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        targetClass <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"RefTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        globalTargetClass <span class="token operator">=</span><span class="token punctuation">(</span>jclass<span class="token punctuation">)</span> env<span class="token operator">-></span><span class="token function">NewGlobalRef</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    fid <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetStaticFieldID</span><span class="token punctuation">(</span>globalTargetClass<span class="token punctuation">,</span><span class="token string">"intField"</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    intField <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetStaticIntField</span><span class="token punctuation">(</span>globalTargetClass<span class="token punctuation">,</span>fid<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> intField<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/10570841/" target="_blank" rel="external">Amdroid框架揭秘</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;示例程序运行顺序&quot;&gt;&lt;a href=&quot;#示例程序运行顺序&quot; class=&quot;headerlink&quot; title=&quot;示例程序运行顺序&quot;&gt;&lt;/a&gt;示例程序运行顺序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;调用JNI本地函数&lt;/li&gt;
&lt;li&gt;访问静态成员获取值&lt;/li&gt;
&lt;li&gt;创建JniTest对象&lt;/li&gt;
&lt;li&gt;调用JniTest对象的方法&lt;/li&gt;
&lt;li&gt;传递返回值&lt;/li&gt;
&lt;li&gt;访问成员变量设定其值&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="JNI" scheme="https://luoweiguang.github.io/tags/JNI/"/>
    
      <category term="Java进阶" scheme="https://luoweiguang.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>JNI(在Java中调用C函数)</title>
    <link href="https://luoweiguang.github.io/2016/09/26/JNI(%E5%9C%A8Java%E4%B8%AD%E8%B0%83%E7%94%A8C%E5%87%BD%E6%95%B0)/"/>
    <id>https://luoweiguang.github.io/2016/09/26/JNI(在Java中调用C函数)/</id>
    <published>2016-09-26T14:00:00.000Z</published>
    <updated>2017-11-14T16:16:46.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JNI调用C函数的步骤"><a href="#JNI调用C函数的步骤" class="headerlink" title="JNI调用C函数的步骤"></a>JNI调用C函数的步骤</h2><ul>
<li>编写Java代码</li>
<li>编译Java代码</li>
<li>生成C语言头文件</li>
<li>编写C代码</li>
<li>生成C共享库</li>
<li>运行Java程序</li>
</ul>
<a id="more"></a>
<h2 id="编写Java代码"><a href="#编写Java代码" class="headerlink" title="编写Java代码"></a>编写Java代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jni<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJNI</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//本地方法声明</span>
    <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//加载库</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"hellojni"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        HelloJNI myJNI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//调用本地方法(实际调用的是使用C语言编写的JNI本地函数)</span>
        myJNI<span class="token punctuation">.</span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myJNI<span class="token punctuation">.</span><span class="token function">printString</span><span class="token punctuation">(</span><span class="token string">"Hello World from printString fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在Java类中，使用“native”关键字，声明本地方法，该方法与用C/C++编写的JNI本地函数相对应。</p>
<p>“native”关键字告知Java编译器，在Java代码中带有该关键字的方法只是声明，具体由C/C++等其他语言编写实现</p>
<p>在Java中加载本地运行库时通常使用“静态块”。如果本地库未被正常加载，在使用本地方法调用本地库的C函数时，就会发生错误</p>
<h2 id="编译Java代码"><a href="#编译Java代码" class="headerlink" title="编译Java代码"></a>编译Java代码</h2><pre><code>javac &lt;文件路径&gt;
</code></pre><p>例如:</p>
<pre><code>javac HelloJNI.java
</code></pre><h2 id="生成C语言头文件"><a href="#生成C语言头文件" class="headerlink" title="生成C语言头文件"></a>生成C语言头文件</h2><pre><code>javah &lt;包含以native关键字声明的方法的Java类名称&gt;
</code></pre><p>例如:</p>
<pre><code>javah HelloJNI
</code></pre><p>HelloJNI.h</p>
<pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */
#include &lt;jni.h&gt;
/* Header for class HelloJNI */

#ifndef _Included_HelloJNI
#define _Included_HelloJNI
#ifdef __cplusplus
extern &quot;C&quot; {
#endif
/*
 * Class:     HelloJNI
 * Method:    printHello
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_HelloJNI_printHello
  (JNIEnv *, jobject);

/*
 * Class:     HelloJNI
 * Method:    printString
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_HelloJNI_printString
  (JNIEnv *, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
</code></pre><h2 id="编写C代码"><a href="#编写C代码" class="headerlink" title="编写C代码"></a>编写C代码</h2><p>c文件中对应的方法名为生成的C语言头文件中对应的函数原型<br>hellojni.c</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"HelloJNI.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_HelloJNI_printHello</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_HelloJNI_printString</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jstring string<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//GetStringUTFChars()是JNI函数，用来将Java字符串转成C语言字符串</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>string<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="生成C共享库"><a href="#生成C共享库" class="headerlink" title="生成C共享库"></a>生成C共享库</h2><pre><code>gcc -shared -o &lt;库的路径&gt; &lt;c文件路径&gt;
</code></pre><pre><code>gcc -shared -o hellojni.dll hellojni.c
</code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><p>In file included from hellojni.c:1:com_jni_HelloJNI.h:2:17: jni.h: No such file or directory<br>复制JDK目录以下的这三个文件至编译器的include文件夹下</p>
<ul>
<li>jdk\include\jni.h</li>
<li>jdk\include\win32\jawt_md.h</li>
<li>jdk\include\win32\jni_md.h</li>
</ul>
</li>
<li><p>Exception in thread “main” java.lang.UnsatisfiedLinkError: H:\hellojni.dll: Can’t load IA 32-bit .dll on a AMD 64-bit platform<br>编译的版本应该与系统版本一致，64位的应使用64位的编译</p>
</li>
</ul>
<h2 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h2><pre><code>java &lt;类名&gt;
</code></pre><pre><code>java HelloJNI
</code></pre><p>运行结果</p>
<pre><code>Hello World!
Hello World from printString fun
</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/10570841/" target="_blank" rel="external">Amdroid框架揭秘</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JNI调用C函数的步骤&quot;&gt;&lt;a href=&quot;#JNI调用C函数的步骤&quot; class=&quot;headerlink&quot; title=&quot;JNI调用C函数的步骤&quot;&gt;&lt;/a&gt;JNI调用C函数的步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编写Java代码&lt;/li&gt;
&lt;li&gt;编译Java代码&lt;/li&gt;
&lt;li&gt;生成C语言头文件&lt;/li&gt;
&lt;li&gt;编写C代码&lt;/li&gt;
&lt;li&gt;生成C共享库&lt;/li&gt;
&lt;li&gt;运行Java程序&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="JNI" scheme="https://luoweiguang.github.io/tags/JNI/"/>
    
      <category term="Java进阶" scheme="https://luoweiguang.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>init进程</title>
    <link href="https://luoweiguang.github.io/2016/09/25/init%E8%BF%9B%E7%A8%8B/"/>
    <id>https://luoweiguang.github.io/2016/09/25/init进程/</id>
    <published>2016-09-25T14:00:00.000Z</published>
    <updated>2017-11-14T16:45:39.643Z</updated>
    
    <content type="html"><![CDATA[<p>本篇基于android2.2.3</p>
<p>init进程是Android启动后，由内核启动的第一份用户级进程。</p>
<a id="more"></a>
<h2 id="内核启动过程"><a href="#内核启动过程" class="headerlink" title="内核启动过程"></a>内核启动过程</h2><p>init进程是在顺序执行完start_kernel()函数，init_post()函数，run_init_process()函数后，最后启动执行的</p>
<p><a href="http://androidxref.com/kernel_2.6.39/xref/init/main.c#738" target="_blank" rel="external">init/main.c</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">int</span> <span class="token function">init_post</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">run_init_process</span><span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">run_init_process</span><span class="token punctuation">(</span><span class="token string">"/sbin/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">run_init_process</span><span class="token punctuation">(</span><span class="token string">"/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">run_init_process</span><span class="token punctuation">(</span><span class="token string">"/bin/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">run_init_process</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>init_post()函数调用run_init_process()函数，获取注册在exxecute_command中的进程文件路径，执行execve()系统调用。execve()函数执行由参数传递过来的文件路径下的进程。</p>
<h2 id="init执行"><a href="#init执行" class="headerlink" title="init执行"></a>init执行</h2><p><a href="http://androidxref.com/2.3.7/xref/system/core/init/init.c/#652" target="_blank" rel="external">init/init.c</a></p>
<p>1.init进程注册信号处理器(即指定信号对应的处理函数)(2.3版本后没有这步)</p>
<pre class=" language-c"><code class="language-c">    act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> sigchld_handler<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_NOCLDSTOP<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_restorer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>2.对umask进行清零（umask设置了用户创建文件的默认权限）</p>
<blockquote>
<p>umask命令允许你设定文件创建时的缺省模式，对应每一类用户(文件属主、同组用户、其他用户)存在一个相应的umask值中的数字。对于文件来说，这一数字的最大值分别是6。系统不允许你在创建一个文本文件时就赋予它执行权限，必须在创建后用chmod命令增加这一权限。目录则允许设置执行权限，这样针对目录来说，umask中各个数字最大可以到7。</p>
</blockquote>
<pre class=" language-c"><code class="language-c">    <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>3.创建linux中根文件系统的目录，并挂载分区</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/proc"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/sys"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token string">"/dev"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"mode=0755"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev/pts"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev/socket"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"devpts"</span><span class="token punctuation">,</span> <span class="token string">"/dev/pts"</span><span class="token punctuation">,</span> <span class="token string">"devpts"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"proc"</span><span class="token punctuation">,</span> <span class="token string">"/proc"</span><span class="token punctuation">,</span> <span class="token string">"proc"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"sysfs"</span><span class="token punctuation">,</span> <span class="token string">"/sys"</span><span class="token punctuation">,</span> <span class="token string">"sysfs"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>4.生成/dev/_null_节点文件，标准输入，标准输出，标准错误文件描述符重定向到_null_</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">open_devnull_stdio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>5.生成/dev/_kmsg_节点文件记录log</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">log_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>6.解析init.rc文件(init.rc文件在Android系统运行过程中用于通用的环境设置及与进程相关的定义)</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">parse_config_file</span><span class="token punctuation">(</span><span class="token string">"/init.rc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>7.初始化QEMU设备，设置模拟器环境(2.3版本后没有这步)</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">qemu_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>8.从”/proc/cmdline”中读取内核命令行参数，并在读取完后修改此文件的权限，禁止非授权用户操作此文件</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">import_kernel_cmdline</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>9.从”/proc/cpuinfo”中读取系统的CPU硬件信息。 </p>
<pre class=" language-c"><code class="language-c">    <span class="token function">get_hardware_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>10.根据读取的硬件信息来解析特定于硬件的配置信息</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">snprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/init.%s.rc"</span><span class="token punctuation">,</span> hardware<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">parse_config_file</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>11.触发在init脚本文件中名字为early-init的action，并且执行其commands，其实是: on early-init</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">action_for_each_trigger</span><span class="token punctuation">(</span><span class="token string">"early-init"</span><span class="token punctuation">,</span> action_add_queue_tail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">drain_action_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>12.初始化动态设备管理，设备文件有变化时反应给内核</p>
<pre class=" language-c"><code class="language-c">    device_fd <span class="token operator">=</span> <span class="token function">device_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>13.加载启动动画，如果动画打开失败，则在屏幕上打印： A N D R O I D字样。</p>
<pre class=" language-c"><code class="language-c">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">load_565rle_image</span><span class="token punctuation">(</span>INIT_IMAGE_FILE<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/tty0"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">;</span>
        msg <span class="token operator">=</span> <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"\n"</span>
    <span class="token string">"             A N D R O I D "</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>14.触发在init脚本文件中名字为init的action，并且执行其commands，其实是：on init</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">action_for_each_trigger</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">,</span> action_add_queue_tail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">drain_action_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>15.启动系统属性服务： system property service</p>
<pre class=" language-c"><code class="language-c">property_set_fd <span class="token operator">=</span> <span class="token function">start_property_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>16.创建socket用来处理进程信号</p>
<pre class=" language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        signal_fd <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        signal_recv_fd <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">fcntl</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fcntl</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fcntl</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fcntl</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>17.触发在init脚本文件中名字为early-boot和boot的action，并且执行其commands</p>
<pre class=" language-c"><code class="language-c">    <span class="token function">action_for_each_trigger</span><span class="token punctuation">(</span><span class="token string">"early-boot"</span><span class="token punctuation">,</span> action_add_queue_tail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">action_for_each_trigger</span><span class="token punctuation">(</span><span class="token string">"boot"</span><span class="token punctuation">,</span> action_add_queue_tail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">drain_action_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>18.启动所有属性变化触发命令，其实是： on property:ro.xx.xx=xx</p>
<pre><code>    queue_all_property_triggers();
    drain_action_queue();
</code></pre><p>19.事件处理循环</p>
<pre><code>    for(;;) {
    int nr, i, timeout = -1;
    for (i = 0; i &lt; fd_count; i++)
        ufds[i].revents = 0;
    drain_action_queue();
    restart_processes();
    if (process_needs_restart) {
        timeout = (process_needs_restart - gettime()) * 1000;
        if (timeout &lt; 0)
            timeout = 0;
    }
</code></pre><h2 id="分析及运行init-rc文件"><a href="#分析及运行init-rc文件" class="headerlink" title="分析及运行init.rc文件"></a>分析及运行init.rc文件</h2><h3 id="分析init-rc文件"><a href="#分析init-rc文件" class="headerlink" title="分析init.rc文件"></a>分析init.rc文件</h3><p>动作列表用于创建所需目录，以及为某些特定文件指定权限。</p>
<p>服务列表用于记录初始化程序需要启动的一些程序</p>
<h4 id="Android-init脚本语言的规范"><a href="#Android-init脚本语言的规范" class="headerlink" title="Android init脚本语言的规范"></a>Android init脚本语言的规范</h4><p>Android初始化语言包含了四种类型的声明：</p>
<ul>
<li>Actions（动作）</li>
<li>Commands（命令）</li>
<li>Services（服务）</li>
<li><p>Options（选项）</p>
</li>
<li><p>初始化语言以行为单位，以空格间隔的语言符号组成。</p>
</li>
<li>C风格的反斜杠转义符可以用来在语言符号中插入空格。</li>
<li>双引号也可以用来防止文本被空格分成多个语言符号。</li>
<li>当反斜杠在行末时，作为折行符。</li>
<li>以#开始的行为注释行</li>
<li>Actions和Service隐含声明一个新的段落，所有该段落下的Command与Option的声明皆属于该段落</li>
<li>Actions和Service的名称是唯一的。在它们之后声明相同命名的类将被视为无效</li>
</ul>
<h5 id="Actions（行为）"><a href="#Actions（行为）" class="headerlink" title="Actions（行为）"></a>Actions（行为）</h5><p>Actions其实就是一系列的Commands（命令）。Actions都有一个trigger（触发器），它被用于决定action的执行时间。当一个符合action触发条件的事件发生时，action会被加入到执行队列的末尾，除非它已经在队列里了。队列中的每一个action都被依次提取出，而这个action中的每个command（命令）都将被依次执行。<br>Actions的形式如下： </p>
<pre class=" language-xml"><code class="language-xml">        on <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trigger</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command1</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command2</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command3</span><span class="token punctuation">></span></span>
</code></pre>
<p>on后面跟着一个触发器，当trigger被触发时，command1，command2，command3，会依次执行，直到下一个Action或下一个Service。<br>简单来说，Actions就是Android在启动时定义的一个启动脚本，当条件满足时，会执行该脚本，脚本里都是一些命令commands，不同的脚本用on来区分。</p>
<h5 id="Triggers（触发器）"><a href="#Triggers（触发器）" class="headerlink" title="Triggers（触发器）"></a>Triggers（触发器）</h5><p>Triggers（触发器）是一个用于匹配特定事件类型的字符串，用于使Actions发生。</p>
<ul>
<li><p><code>boot</code><br>当init程序执行，并载入/init.conf文件时触发.</p>
</li>
<li><p><code>&lt;name&gt;=&lt;value&gt;</code><br>当改变属性值时触发</p>
</li>
<li><p><code>device-added-&lt;path&gt;</code><br>当添加设备时触发.</p>
</li>
<li><p><code>device-removed-&lt;path&gt;</code><br>当设备移除时触发.</p>
</li>
<li><p><code>service-exited-&lt;name&gt;</code><br>当指定的服务退出时触发.</p>
</li>
</ul>
<h5 id="Services（服务）"><a href="#Services（服务）" class="headerlink" title="Services（服务）"></a>Services（服务）</h5><p>Services（服务）是一个程序，它在初始化时启动，并在退出时可选择让其重启。Services（服务）的形式如下： </p>
<pre><code>service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*
           &lt;option&gt;
           &lt;option&gt;
           ...
</code></pre><ul>
<li>name:服务名</li>
<li>pathname:当前服务对应的程序位置</li>
<li>option：当前服务设置的选项</li>
</ul>
<h5 id="Options（选项）"><a href="#Options（选项）" class="headerlink" title="Options（选项）"></a>Options（选项）</h5><p>Options（选项）是一个Services（服务）的修饰。他们影响Services（服务）在何时，并以何种方式运行。</p>
<ul>
<li><code>critical</code><br>据设备相关的关键服务，如果在4分钟内，此服务重复启动了4次，那么设备将会重启进入还原模式。</li>
<li><code>disabled</code><br>服务不会自动运行，必须按照名称明确指定后才可以启动</li>
<li><code>setenv &lt;name&gt; &lt;value&gt;</code><br>设置环境变量</li>
<li><code>socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [ &lt;user&gt; [ &lt;group&gt; ] ]</code><br>在/dev/socket/下创建一个unix domain的socket，并传递创建的文件描述符fd给服务进程.其中type必须为dgram或stream,seqpacket.用户名和组名默认为0</li>
<li><code>user &lt;username&gt;</code><br>在执行此服务之前先切换用户名。当前默认为root.</li>
<li><code>group &lt;groupname&gt; [ &lt;groupname&gt; ]*</code><br>类似于user,切换组名，默认组名为root</li>
<li><code>oneshot</code><br>当此服务退出时不会自动重启.</li>
<li><code>class &lt;name&gt;</code><br>给服务指定一个类属,这样方便操作多个服务同时启动或停止.默认情况下为default.</li>
<li><code>onrestart</code><br>当服务重启时执行一条指令，</li>
</ul>
<h5 id="Commands（命令）"><a href="#Commands（命令）" class="headerlink" title="Commands（命令）"></a>Commands（命令）</h5><ul>
<li><code>exec &lt;path&gt; [ &lt;argument&gt; ]*</code><br>fork并执行指定路径下的程序，并传递参数.这将阻塞init进程直到程序执行完毕</li>
<li><code>export &lt;name&gt; &lt;value&gt;</code><br>设置全局环境参数，此参数被设置后对所有进程都有效.</li>
<li><code>ifup &lt;interface&gt;</code><br>使指定的网络接口”上线”,相当激活指定的网络接口</li>
<li><code>import &lt;filename&gt;</code><br>导入一个额外的init配置文件.</li>
<li><code>hostname &lt;name&gt;</code><br>设置主机名</li>
<li><code>chdir &lt;directory&gt;</code><br>改变工作目录.</li>
<li><code>chmod &lt;octal-mode&gt; &lt;path&gt;</code><br>改变指定文件的读取权限.</li>
<li><code>chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;</code><br>改变指定文件的拥有都和组名的属性.</li>
<li><code>chroot &lt;directory&gt;</code><br>改变进行的根目录.</li>
<li><code>class_start &lt;serviceclass&gt;</code><br>启动所有指定服务类下的未运行服务</li>
<li><code>class_stop &lt;serviceclass&gt;</code><br>停止指定服务类下的所有已运行的服务</li>
<li><code>domainname &lt;name&gt;</code><br>设置域名</li>
<li><code>insmod &lt;path&gt;</code><br>安装指定路径的模块.</li>
<li><code>mkdir &lt;path&gt; [mode] [owner] [group]</code><br>用指定参数创建一个目录，在默认情况下，创建的目录读取权限为755.用户名为root,组名为root.</li>
<li><code>mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [ &lt;mountoption&gt; ]*</code>    类似于linux的mount(挂载)指令</li>
<li><code>setkey</code><br>TBD(To Be Determined),待定.</li>
<li><code>setprop &lt;name&gt; &lt;value&gt;</code><br>设置属性及对应的值.</li>
<li><code>setrlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;</code><br>设置资源的rlimit(资源限制）</li>
<li><code>start &lt;service&gt;</code><br>如果指定的服务未启动，则启动它.</li>
<li><code>stop &lt;service&gt;</code><br>如果指定的服务当前正在运行，则停止它.</li>
<li><code>symlink &lt;target&gt; &lt;path&gt;</code><br>创建一个符号链接.</li>
<li><code>sysclktz &lt;mins_west_of_gmt&gt;</code><br>设置系统基准时间.</li>
<li><code>trigger &lt;event&gt;</code><br>触发一个事件。用于将一个action与另一个 action排列</li>
<li><code>write &lt;path&gt; &lt;string&gt; [ &lt;string&gt; ]*</code><br>往指定的文件写字符串.</li>
</ul>
<h5 id="Properties（属性）"><a href="#Properties（属性）" class="headerlink" title="Properties（属性）"></a>Properties（属性）</h5><p>Init更新一些系统属性以提供对正在发生的事件的监控能力: </p>
<ul>
<li><code>init.action</code><br>当前正在执行的动作，如果没有则为空字符串””</li>
<li><code>init.command</code><br>当前正在执行的命令.没有则为空字符串.</li>
<li><code>init.svc.&lt;name&gt;</code><br>当前某个服务的状态，可为”stopped”, “running”, “restarting”</li>
</ul>
<h4 id="init-rc文件分析函数"><a href="#init-rc文件分析函数" class="headerlink" title="init.rc文件分析函数"></a>init.rc文件分析函数</h4><p><a href="http://androidxref.com/kernel_2.6.39/xref/init/main.c#738" target="_blank" rel="external">init/main.c</a>调用<a href="http://androidxref.com/2.2.3/xref/system/core/init/parser.c#399" target="_blank" rel="external">parse_config_file(const char *fn)</a>函数来分析init.rc脚本文件</p>
<pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> <span class="token function">parse_config_file</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fn<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>
        data <span class="token operator">=</span> <span class="token function">read_file</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取文件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">parse_config</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分析读入的字符串</span>
        <span class="token function">DUMP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>parse_config()函数会分析read_file()函数返回的字符串，并生成动作列表(Action List)与服务列表(Service List)</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parse_config</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fn<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">next_token</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//以行为单位分割参数传递过来的字符串</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> T_NEWLINE<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nargs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> kw <span class="token operator">=</span> <span class="token function">lookup_keyword</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回init.rc脚本中每行首个单词在keyword_list结构体数组中的数组编号</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kw_is</span><span class="token punctuation">(</span>kw<span class="token punctuation">,</span> SECTION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断是否为SECTION</span>
                    state<span class="token punctuation">.</span><span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>state<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">parse_new_section</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>state<span class="token punctuation">,</span> kw<span class="token punctuation">,</span> nargs<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    state<span class="token punctuation">.</span><span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>state<span class="token punctuation">,</span> nargs<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            nargs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/keywords.h#35" target="_blank" rel="external">KEYWORD</a>宏转换为keyword_info结构体数组形成的列表，其形式为:【“列表编号”】={“关键字”，“组”，“参数个数”，“映射函数”}</p>
<p>parse_new_section()函数将kw_is()宏筛选出的命令，分别注册动动作列表或服务列表中。在parse_new_section()函数会将服务列表与动作列表分别保存到全局变量<a href="http://androidxref.com/2.2.3/xref/system/core/init/parser.c#18" target="_blank" rel="external">service_list</a>与<a href="http://androidxref.com/2.2.3/xref/system/core/init/parser.c#19" target="_blank" rel="external">action_list</a>中</p>
<h3 id="执行early-init动作列表"><a href="#执行early-init动作列表" class="headerlink" title="执行early-init动作列表"></a>执行early-init动作列表</h3><p>Android 中的ueventd是一个守护进程，主要作用是接收uevent来创建或删除/dev/xxx(设备节点)</p>
<h3 id="执行init动作列表"><a href="#执行init动作列表" class="headerlink" title="执行init动作列表"></a>执行init动作列表</h3><p>在“on init”根文件系统挂载部分，主要挂载/system与/data两个目录。两个目录挂载完毕后，Android的根文件系统就准备好了</p>
<h3 id="动作列表的运行"><a href="#动作列表的运行" class="headerlink" title="动作列表的运行"></a>动作列表的运行</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">drain_action_queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> listnode <span class="token operator">*</span>node<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> command <span class="token operator">*</span>cmd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> action <span class="token operator">*</span>act<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>act <span class="token operator">=</span> <span class="token function">action_remove_queue_head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">INFO</span><span class="token punctuation">(</span><span class="token string">"processing action %p (%s)\n"</span><span class="token punctuation">,</span> act<span class="token punctuation">,</span> act<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">list_for_each</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token operator">-></span>commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cmd <span class="token operator">=</span> <span class="token function">node_to_item</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> command<span class="token punctuation">,</span> clist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从action_queue中取出动作列表，并转换成command结构体</span>
            ret <span class="token operator">=</span> cmd<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span>cmd<span class="token operator">-></span>nargs<span class="token punctuation">,</span> cmd<span class="token operator">-></span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">INFO</span><span class="token punctuation">(</span><span class="token string">"command '%s' r=%d\n"</span><span class="token punctuation">,</span> cmd<span class="token operator">-></span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>action_remove_queue_head()函数用来获取全局链表action_queue的head,action_queue保存有由待执行的命令构成的动作列表</p>
<p>command结构体的func变量指定与动作列表中的命令相对应的函数，即各命令的映射函数</p>
<h3 id="服务列表的运行"><a href="#服务列表的运行" class="headerlink" title="服务列表的运行"></a>服务列表的运行</h3><p>on boot段落中，最后一行命令为class_start，init进程通过该命令运行“service”段落中的所有程序。class_start命令对应的执行函数为<a href="http://androidxref.com/2.2.3/xref/system/core/init/builtins.c#146" target="_blank" rel="external">do_class_start()</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">do_class_start</span><span class="token punctuation">(</span><span class="token keyword">int</span> nargs<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">service_for_each_class</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> service_start_if_not_disabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>do_class_start调用<a href="http://androidxref.com/2.2.3/xref/system/core/init/parser.c#473" target="_blank" rel="external">service_for_each_class</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">service_for_each_class</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>classname<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> service <span class="token operator">*</span>svc<span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">struct</span> listnode <span class="token operator">*</span>node<span class="token punctuation">;</span>  
    <span class="token keyword">struct</span> service <span class="token operator">*</span>svc<span class="token punctuation">;</span>  
    <span class="token function">list_for_each</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span>service_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 遍历service的结构体</span>
        svc <span class="token operator">=</span> <span class="token function">node_to_item</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> service<span class="token punctuation">,</span> slist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从slist里取出每一个结构体  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>classname<span class="token punctuation">,</span> classname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果名字是匹配的话，就会进入这个判断  </span>
            <span class="token function">func</span><span class="token punctuation">(</span>svc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 执行service_start_if_not_disable, 并且将当前的service结构体给传递进去  </span>
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>service_for_each_class()会遍历service_list链表，找到所有和classname匹配的service节点，如果这个节点没有被disabled的话，那么就启动其对应的服务</p>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/builtins.c#127" target="_blank" rel="external">service_start_if_not_disabled</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">service_start_if_not_disabled</span><span class="token punctuation">(</span><span class="token keyword">struct</span> service <span class="token operator">*</span>svc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span> SVC_DISABLED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">service_start</span><span class="token punctuation">(</span>svc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#158" target="_blank" rel="external">service_start</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">service_start</span><span class="token punctuation">(</span><span class="token keyword">struct</span> service <span class="token operator">*</span>svc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dynamic_args<span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">struct</span> stat s<span class="token punctuation">;</span>  
    pid_t pid<span class="token punctuation">;</span>  
    <span class="token keyword">int</span> needs_console<span class="token punctuation">;</span>  
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  


    <span class="token comment" spellcheck="true">// 这个service即将被启动，将其从disable或reset的状态给移除掉，置其为重新运行的状态  </span>
    svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>SVC_DISABLED<span class="token operator">|</span>SVC_RESTARTING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    svc<span class="token operator">-></span>time_started <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  


    <span class="token comment" spellcheck="true">// 如果这个service仍然是运行态的话，即return  </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span> SVC_RUNNING<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    needs_console <span class="token operator">=</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span> SVC_CONSOLE<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needs_console <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>have_console<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"service '%s' requires console\n"</span><span class="token punctuation">,</span> svc<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        svc<span class="token operator">-></span>flags <span class="token operator">|</span><span class="token operator">=</span> SVC_DISABLED<span class="token punctuation">;</span>  
        <span class="token keyword">return</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 如果这个service的flags是初始console，但是这个已经启动了的话，就会设置当前的flags为disabled  </span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 如果要执行的这个service的start的command不存在的话，返回error  </span>
        <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"cannot find '%s', disabling '%s'\n"</span><span class="token punctuation">,</span> svc<span class="token operator">-></span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> svc<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        svc<span class="token operator">-></span>flags <span class="token operator">|</span><span class="token operator">=</span> SVC_DISABLED<span class="token punctuation">;</span>  
        <span class="token keyword">return</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">NOTICE</span><span class="token punctuation">(</span><span class="token string">"starting '%s'\n"</span><span class="token punctuation">,</span> svc<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">// fork一个子进程，即所有从init.rc启动的service，都是一个子进程</span>
    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// pid = 0, 进入到子进程中  </span>
        <span class="token keyword">struct</span> socketinfo <span class="token operator">*</span>si<span class="token punctuation">;</span>  
        <span class="token keyword">struct</span> svcenvinfo <span class="token operator">*</span>ei<span class="token punctuation">;</span>  
        <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token keyword">int</span> fd<span class="token punctuation">,</span> sz<span class="token punctuation">;</span>  


        <span class="token comment" spellcheck="true">// 得到属性存储空间的信息并加入到环境变量中  </span>
        <span class="token function">get_property_workspace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">add_environment</span><span class="token punctuation">(</span><span class="token string">"ANDROID_PROPERTY_WORKSPACE"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  


        <span class="token comment" spellcheck="true">// 将service自己声明的envvars加入到环境变量中  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ei <span class="token operator">=</span> svc<span class="token operator">-></span>envvars<span class="token punctuation">;</span> ei<span class="token punctuation">;</span> ei <span class="token operator">=</span> ei<span class="token operator">-></span>next<span class="token punctuation">)</span>  
            <span class="token function">add_environment</span><span class="token punctuation">(</span>ei<span class="token operator">-></span>name<span class="token punctuation">,</span> ei<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 根据socket info设置socket  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>si <span class="token operator">=</span> svc<span class="token operator">-></span>sockets<span class="token punctuation">;</span> si<span class="token punctuation">;</span> si <span class="token operator">=</span> si<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">create_socket</span><span class="token punctuation">(</span>si<span class="token operator">-></span>name<span class="token punctuation">,</span>
                                <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>si<span class="token operator">-></span>type<span class="token punctuation">,</span> <span class="token string">"dgram"</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                                SOCK_DGRAM <span class="token punctuation">:</span> SOCK_STREAM<span class="token punctuation">,</span>
                                si<span class="token operator">-></span>perm<span class="token punctuation">,</span> si<span class="token operator">-></span>uid<span class="token punctuation">,</span> si<span class="token operator">-></span>gid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token function">publish_socket</span><span class="token punctuation">(</span>si<span class="token operator">-></span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  

        <span class="token keyword">if</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>ioprio_class <span class="token operator">!=</span> IoSchedClass_NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">android_set_ioprio</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svc<span class="token operator">-></span>ioprio_class<span class="token punctuation">,</span> svc<span class="token operator">-></span>ioprio_pri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"Failed to set pid %d ioprio = %d,%d: %s\n"</span><span class="token punctuation">,</span>  
                      <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svc<span class="token operator">-></span>ioprio_class<span class="token punctuation">,</span> svc<span class="token operator">-></span>ioprio_pri<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  

        <span class="token keyword">if</span> <span class="token punctuation">(</span>needs_console<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token function">open_console</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            <span class="token function">zap_stdio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  

<span class="token macro property">#<span class="token directive keyword">if</span> 0  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> svc<span class="token operator">-></span>args<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">INFO</span><span class="token punctuation">(</span><span class="token string">"args[%d] = '%s'\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> svc<span class="token operator">-></span>args<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ENV<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">INFO</span><span class="token punctuation">(</span><span class="token string">"env[%d] = '%s'\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> ENV<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
<span class="token macro property">#<span class="token directive keyword">endif</span>  </span>

        <span class="token function">setpgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token keyword">if</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>gid<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 设置gid  </span>
             <span class="token function">setgid</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>gid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>nr_supp_gids<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
           <span class="token function">setgroups</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>nr_supp_gids<span class="token punctuation">,</span> svc<span class="token operator">-></span>supp_gids<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 设置uid  </span>
             <span class="token function">setuid</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  

        <span class="token comment" spellcheck="true">// 因为dynamic_args设置的为null，我们在第一次从init.rc启动的时候，一定会进入到这个判断。  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dynamic_args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment" spellcheck="true">//执行当前的service的启动的命令，也就是说从这边开始，我们就可以理解为已经从init进程中，去像kernel执行init一样，就去执行各个service所对应的启动函数了！  </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">execve</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> svc<span class="token operator">-></span>args<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> ENV<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"cannot execve('%s'): %s\n"</span><span class="token punctuation">,</span> svc<span class="token operator">-></span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            <span class="token keyword">char</span> <span class="token operator">*</span>arg_ptrs<span class="token punctuation">[</span>INIT_PARSER_MAXARGS<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token keyword">int</span> arg_idx <span class="token operator">=</span> svc<span class="token operator">-></span>nargs<span class="token punctuation">;</span>  
            <span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>dynamic_args<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">char</span> <span class="token operator">*</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  
            <span class="token keyword">char</span> <span class="token operator">*</span>bword<span class="token punctuation">;</span>  

            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="生成设备驱动节点"><a href="#生成设备驱动节点" class="headerlink" title="生成设备驱动节点"></a>生成设备驱动节点</h2><p>init进程通过两种方式创建设备节点。第一种，以预先定义的设备信息为基础，当init进程被启动运行时，同一创建设备节点文件，这种连接已定义的设备的方法，称为“<strong>冷拔插</strong>”，第二种，在系统运行时，当有设备插入USB端口时，init经常就会接收到这一事件，为插入的设备动态创建设备节点文件，这种在系统运行的状态下连接设备，称为“<strong>热拔插</strong>”</p>
<p>从内核2.6X开始引入udev(userspace device)实用程序。udev以守护进程的形式运行，当设备驱动被加载时，它会掌握主设备号，次设备号，以及设备类型，而后在“/dev”目录下自动创建设备节点文件</p>
<p>在系统运行中，若某个设备被插入，内核就会加载与该设备相关的驱动程序。而后驱动程序会调用启动函数probe()，将主设备号，次设备号，以及设备类型保存到“/sys”文件系统中。然后发出uevent，并传递给udev守护进程</p>
<p>uevent是内核向用户空间进程传递信息的信号系统，即在添加或删除设备时，内核使用uevent将设备信息传递给用户空间。uevent包含设备名称、类别、主设备号、次设备号、设备节点文件创建的目录等信息，并将这些信息传递给udev守护进程</p>
<p>系统内核启动后，udev进程运行在用户空间内，它无法处理内核启动过程中发生的uevent。虽然内核空间内的设备驱动程序可以正常运行，但由于未创建访问设备驱动所需的设备节点文件，将会出现应用程序无法使用相关设备的问题。</p>
<p>Linuxx系统中，在udec守护经常运行前，通过提供与加载的设备驱动程序冷拔插机制，来解决设备节点文件没被创建的问题。</p>
<p>当内核启动后，冷拔插机制启动udev守护进程，从/sys目录下读取事先注册好的设备信息，而后引发与各设备相对应的uevent,创建设备节点文件。Android也采用这种处理方式来创建设备节点文件，不同的是使用init进程来扮演udev守护进程的角色。</p>
<h3 id="创建静态设备节点"><a href="#创建静态设备节点" class="headerlink" title="创建静态设备节点"></a>创建静态设备节点</h3><p>内核启动完毕后，init进程启动，对于像Binder驱动程序这样无法创建设备节点文件的驱动，将采用冷拔插方式进行处理。init进程事先获知等待冷拔插处理的驱动程序，并事先定义好各驱动程序的设备节点文件。在Android源代码的<a href="http://androidxref.com/2.2.3/xref/system/core/init/devices.c#86" target="_blank" rel="external">devices.c</a>文件中，列出了init进程创建的节点文件的目录。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> perms_ devperms<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token number">87</span>    <span class="token punctuation">{</span> <span class="token string">"/dev/null"</span><span class="token punctuation">,</span>          <span class="token number">0666</span><span class="token punctuation">,</span>   AID_ROOT<span class="token punctuation">,</span>       AID_ROOT<span class="token punctuation">,</span>       <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token number">88</span>    <span class="token punctuation">{</span> <span class="token string">"/dev/zero"</span><span class="token punctuation">,</span>          <span class="token number">0666</span><span class="token punctuation">,</span>   AID_ROOT<span class="token punctuation">,</span>       AID_ROOT<span class="token punctuation">,</span>       <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token number">89</span>    <span class="token punctuation">{</span> <span class="token string">"/dev/full"</span><span class="token punctuation">,</span>          <span class="token number">0666</span><span class="token punctuation">,</span>   AID_ROOT<span class="token punctuation">,</span>       AID_ROOT<span class="token punctuation">,</span>       <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token number">90</span>    <span class="token punctuation">{</span> <span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span>          <span class="token number">0666</span><span class="token punctuation">,</span>   AID_ROOT<span class="token punctuation">,</span>       AID_ROOT<span class="token punctuation">,</span>       <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token number">91</span>    <span class="token punctuation">{</span> <span class="token string">"/dev/tty"</span><span class="token punctuation">,</span>           <span class="token number">0666</span><span class="token punctuation">,</span>   AID_ROOT<span class="token punctuation">,</span>       AID_ROOT<span class="token punctuation">,</span>       <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token punctuation">}</span>
</code></pre>
<p>在冷拔插处理时，init进程会引起devperms结构体，在/dev 目录下创建设备节点文件。devperms结构体中，分别列出了等待冷拔插处理的设备节点文件的名称、访问权限、用户ID、组ID。若想为用户定义的新设备创建设备节点文件，需要将相关驱动信息添加到devperms结构体中。</p>
<p>init经常进行冷拔插处理的步骤。<br>init进程调用<a href="http://androidxref.com/2.2.3/xref/system/core/init/devices.c#671" target="_blank" rel="external">device_init()</a>函数</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">device_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
     fd <span class="token operator">=</span> <span class="token function">open_uevent_socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    t0 <span class="token operator">=</span> <span class="token function">get_usecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">coldboot</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"/sys/class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">coldboot</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"/sys/block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">coldboot</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"/sys/devices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1 <span class="token operator">=</span> <span class="token function">get_usecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log_event_print</span><span class="token punctuation">(</span><span class="token string">"coldboot %ld uS\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>deviice_init()函数先创建一个套接字，用来接收uevenr。再通过coldboot()函数调用do_coldboot()函数，对内核启动时注册到/sys，目录下的驱动程序，进行冷拔插处理。<br><a href="http://androidxref.com/2.2.3/xref/system/core/init/devices.c#628" target="_blank" rel="external">do_coldboot</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">do_coldboot</span><span class="token punctuation">(</span><span class="token keyword">int</span> event_fd<span class="token punctuation">,</span> DIR <span class="token operator">*</span>d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
     fd <span class="token operator">=</span> <span class="token function">openat</span><span class="token punctuation">(</span>dfd<span class="token punctuation">,</span> <span class="token string">"uevent"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"add\n"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">handle_device_fd</span><span class="token punctuation">(</span>event_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>do_coldboot()函数接收参数传递过来的目录路径，通过该路径查找到保存的uevent文件，向相关文件写入“add”信息，而后强制引起uevent。然后在handler_ddevice_fd()函数中接收相关的uevent，获取uevent的信息</p>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/devices.c#574" target="_blank" rel="external">handle_device_fd</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">handle_device_fd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">struct</span> uevent uevent<span class="token punctuation">;</span>
    <span class="token function">parse_event</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uevent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">handle_device_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uevent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>handle_device_fd()函数在收到uevent时，调用parse_event()函数，将uevent信息希尔uevent结构体。<br><a href="http://androidxref.com/2.2.3/xref/system/core/init/devices.c#43" target="_blank" rel="external">uevent</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> uevent <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>action<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>subsystem<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>firmware<span class="token punctuation">;</span>
    <span class="token keyword">int</span> major<span class="token punctuation">;</span>
    <span class="token keyword">int</span> minor<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>向uevent结构体写完信息后，调用handle_device_event()函数，创建节点文件。</p>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/devices.c#382" target="_blank" rel="external">handle_device_event</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handle_device_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> uevent <span class="token operator">*</span>uevent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>uevent<span class="token operator">-></span>subsystem<span class="token punctuation">,</span> <span class="token string">"block"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    block <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    base <span class="token operator">=</span> <span class="token string">"/dev/block/"</span><span class="token punctuation">;</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>uevent<span class="token operator">-></span>action<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">make_device</span><span class="token punctuation">(</span>devpath<span class="token punctuation">,</span> block<span class="token punctuation">,</span> uevent<span class="token operator">-></span>major<span class="token punctuation">,</span> uevent<span class="token operator">-></span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>handle_device_event()先检查uevent结构体的subsystem变量，而后在/dev目录下创建子目录。subsystem根据硬件用途的不同而表示不同的组。若硬件是存储设备，则subsystem是block，创建的目录为/dev/block。</p>
<p>在创建完所有下层目录后，调用make_device()函数，创建设备节点文件</p>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/devices.c#300" target="_blank" rel="external">make_device()</a></p>
<pre><code>static void make_device(const char *path, int block, int major, int minor)
301{
    ...
    mode = get_device_perm(path, &amp;uid, &amp;gid) | (block ? S_IFBLK : S_IFCHR);
    dev = (major &lt;&lt; 8) | minor;
    setegid(gid);
    mknod(path, mode, dev);
    chown(path, uid, -1);
    setegid(AID_ROOT);

}
</code></pre><p>make_device（）函数从设备节点文件列表中获取用户ID、组ID信息。而后调用mknod函数，创建设备节点文件。</p>
<h3 id="创建动态设备节点"><a href="#创建动态设备节点" class="headerlink" title="创建动态设备节点"></a>创建动态设备节点</h3><p>init经常支持热拔插处理，在系统运行中为新的设备创建节点文件。热插拔由init进程的事件处理循环来完成<br><a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#999" target="_blank" rel="external">init.c</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
     nr <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>ufds<span class="token punctuation">,</span> fd_count<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>ufds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">==</span> POLLIN<span class="token punctuation">)</span>
        <span class="token function">handle_device_fd</span><span class="token punctuation">(</span>device_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>init经常的事件处理循环循环调用poll()函数监听来自驱动程序的uevent，而后调用handle_device_fd()函数，创建设备节点文件。</p>
<h2 id="处理子进程终止"><a href="#处理子进程终止" class="headerlink" title="处理子进程终止"></a>处理子进程终止</h2><p>若init启动的某个进程终止，则会对系统的运行产生影响。比如“服务管理器”，它是应用程序使用系统服务必须运行的进程。如果该进程出现意外终止，那么进程间的通讯、图像输出、音频输出等功能将无法使用。因此，在init启动的进程中，除了一小部分外，其他大部分进程出现意外终止时，init进程要重新启动它们。</p>
<p>当init的子进程意外终止时，会向父进程init进程传递SIGCHLD信号，init进程接收该信号，检查进程选项是否设置为oneshot,若设置oneshot，init进程将放弃重启进程，否则重启进程。</p>
<p>init进程中的事件处理循环，当其子进程终止时，init会接收传递过来的SIGCHLD信号，并调用与之相对应的处理函数<a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#436" target="_blank" rel="external">sigchld_handler()</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sigchld_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">write</span><span class="token punctuation">(</span>signal_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>signal_fd记录信号标号，由套接字对创建，信号编号被传递至接收端套接字描述符signal_recv_fd中。由于接收信号编号的signal_recv_fd已被注册至POLL,wait_for_one_process()就会被调用执行</p>
<pre class=" language-c"><code class="language-c">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment" spellcheck="true">//当发生SIGCHLD信号时，程序就会从事件监听状态中跳出，而后执行poll()函数</span>
        nr <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>ufds<span class="token punctuation">,</span> fd_count<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ufds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">==</span> POLLIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">read</span><span class="token punctuation">(</span>signal_recv_fd<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">wait_for_one_process</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>当ufds[2]被注册进数据，即触发数据输出事件时，signal_recv_fd即调用并执行wait_for_one_process()函数。wait_for_one_process()函数在产生SIGCHLD信号的进程的服务列表中，检查进程的设置选项。若选项非oneshot，则添加重启选项(SVC_RESTARTING).oneshot选项被定义在init.rc文件的service部分中，若进程带有oneshot选项。进程终止时不会被重启</p>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#334" target="_blank" rel="external">wait_for_one_process</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">wait_for_one_process</span><span class="token punctuation">(</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> block <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> WNOHANG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EINTR <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    svc <span class="token operator">=</span> <span class="token function">service_find_by_pid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span> SVC_ONESHOT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>pid<span class="token punctuation">,</span> SIGKILL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//删除进程持有的所有socketDescriptor</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>si <span class="token operator">=</span> svc<span class="token operator">-></span>sockets<span class="token punctuation">;</span> si<span class="token punctuation">;</span> si <span class="token operator">=</span> si<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token function">unlink</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//删除SVC_RUNNING</span>
    svc<span class="token operator">-></span>pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>SVC_RUNNING<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//将已设置进程标记为SVC_DISABLED，并从wait_for_one_process()函数中跳出，相关进程将不被重新启动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span> SVC_ONESHOT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        svc<span class="token operator">-></span>flags <span class="token operator">|</span><span class="token operator">=</span> SVC_DISABLED<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>svc<span class="token operator">-></span>flags <span class="token operator">&amp;</span> SVC_DISABLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">notify_service_state</span><span class="token punctuation">(</span>svc<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"stopped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment" spellcheck="true">//向当前服务项的标记中添加SVC_RESTART。</span>
    svc<span class="token operator">-></span>flags <span class="token operator">|</span><span class="token operator">=</span> SVC_RESTARTING<span class="token punctuation">;</span>

     <span class="token comment" spellcheck="true">//检查待重启的进程在init.rc文件中是否带有onrestart选项</span>
    <span class="token function">list_for_each</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span>svc<span class="token operator">-></span>onrestart<span class="token punctuation">.</span>commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cmd <span class="token operator">=</span> <span class="token function">node_to_item</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> command<span class="token punctuation">,</span> clist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cmd<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span>cmd<span class="token operator">-></span>nargs<span class="token punctuation">,</span> cmd<span class="token operator">-></span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>当产生信号的进程被终止时，waitpid()函数用来回收进程所占用的资源，它带有三个参数。其中，第一个参数pid为欲等待的子进程的识别码，设置为-1,表示查看所有子进程是否发出SIGCHLD信号,第二个参数status,用于返回子进程的结束状态，第三个参数决定waitpid()函数是否应用阻塞处理方式。waitpid()函数返回pid值，返回值即是产生SIGCHLD信号的进程的pid号</li>
<li>service_find_by_pid()函数用来取出与服务列表中终止经常相关的服务项目</li>
<li>在取出的服务项目选项中，检查SVC_ONESHOT是否已设置。SVC_ONESHOT表示经常仅运行一次，带有此选项的进程在运行一次后，不会被重新启动，由kill(-pid,SIGKILL)函数终止</li>
</ul>
<p>当wait_for_one_process()函数 执行完毕后，事件处理循环中的<a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#427" target="_blank" rel="external">restart_process()</a>函数就会被调用执行。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">restart_processes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    process_needs_restart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">service_for_each_flags</span><span class="token punctuation">(</span>SVC_RESTARTING<span class="token punctuation">,</span>restart_service_if_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>restart_processes()函数运行服务列表中带有SVC_RESTART标记的进程。当一个带有此标记的进程被终止，产生SIGCHLD信号时，restart_processes()函数将重新启动它。</p>
<h2 id="属性服务"><a href="#属性服务" class="headerlink" title="属性服务"></a>属性服务</h2><p>属性变更请求是init事件处理循环处理的另一个事件。在Android平台中，为了让运行中的所有进程共享系统运行时所需要的各种设置值，系统开辟了属性存储区域，并提供了访问该区域的API.属性由键与值构造，其表现形式为“键=值”</p>
<p>在Android平台中，访问属性值时，添加了访问权限控制，增强了访问的安全性。</p>
<p>系统中所有运行的进程都可以访问属性值，但仅有init进程才能修改属性值。</p>
<p>在其他进程修改属性值时，必须向init进程提出请求，最终由init进程负责修改属性值。在此过程中，init进程会先检查各属性的访问权限，而后再修改属性值</p>
<p><strong>当属性值更改后，若定义在init.rc文件中的某个特定条件得到满足，则与此条件相匹配的动作就会发生</strong></p>
<p>init经常的<a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#806" target="_blank" rel="external">main()</a>函数中，调用property_init()函数，用来初始化属性域</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">property_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/property_service.c#490" target="_blank" rel="external">property_init</a></p>
<pre><code>void property_init(void)
{
    init_property_area();
    load_properties_from_file(PROP_PATH_RAMDISK_DEFAULT);
}
</code></pre><p>property_init()函数首先在内存中开辟一块共享区域，而后将其作用在ashmen(Android Shared Menory)。外部进程可以访问这块共享内存域，获取属性值，但它们不能通过直接访问共享内存域的方法来更改属性值。一个进程若想更改属性值，必须先向init进程提交属性变更请求，由init进程更改共享内存中的属性值</p>
<p>init_property_area()函数被调用执行后，所创建的属性域被初始化。</p>
<p>属性域的起始1024个字节作为属性域头，用来保存管理属性表所需要的一些数值。其余31616个字节空间被划分成247块，每块大小为128字节，用来保存属性值。</p>
<p>访问属性值使用property_get()<br>修改属性值使用property_set()</p>
<p>在属性域完成初始化之后，就会从指定的文件中读取初始值，并设置为属性值<br>init的<a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#939" target="_blank" rel="external">main()</a>函数中调用了start_property_service()函数，用来创建启动属性服务所需要的Unix域套接字，并保存套接字描述符。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    property_set_fd <span class="token operator">=</span> <span class="token function">start_property_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/property_service.c#496" target="_blank" rel="external">start_property_service</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">start_property_service</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//读取存储在各文件中的基本设置值，将它们设置为属性值</span>
    <span class="token function">load_properties_from_file</span><span class="token punctuation">(</span>PROP_PATH_SYSTEM_BUILD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">load_properties_from_file</span><span class="token punctuation">(</span>PROP_PATH_SYSTEM_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">load_properties_from_file</span><span class="token punctuation">(</span>PROP_PATH_LOCAL_OVERRIDE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//读取保存在/data/property目录中的属性值</span>
    <span class="token function">load_persistent_properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//创建名称为/dev/socket/property_service的Unix域套接字</span>
    fd <span class="token operator">=</span> <span class="token function">create_socket</span><span class="token punctuation">(</span>PROP_SERVICE_NAME<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">listen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>/data/property目录中保存着系统运行中其他进程新生成的属性值或更改的属性值，属性的key被用作文件名，value被保存在文件中。</p>
<p>通过上面创建的Unix域套接字，接收到属性变更请求后，init进程就会调用<a href="http://androidxref.com/2.2.3/xref/system/core/init/property_service.c#347" target="_blank" rel="external">handle_property_set_fd()</a>函数</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">handle_property_set_fd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">struct</span> ucred cr<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment" spellcheck="true">//从套接字获取SO_PEERCRED值，以便检查传递信息的进程的访问权限</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getsockopt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_PEERCRED<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cr_size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>
        <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"Unable to recieve socket options\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> PROP_MSG_SETPROP<span class="token punctuation">:</span>
        msg<span class="token punctuation">.</span>name<span class="token punctuation">[</span>PROP_NAME_MAX<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>value<span class="token punctuation">[</span>PROP_VALUE_MAX<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">"ctl."</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//检查访问权限，仅有system server、root以及相关进程才能使用ctl消息，终止或启动进程</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_control_perms</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">,</span> cr<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> cr<span class="token punctuation">.</span>gid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">handle_control_message</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_perms</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>name<span class="token punctuation">,</span> cr<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> cr<span class="token punctuation">.</span>gid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">property_set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在struct ucred结构体,存储着传递次那个系的进程的uid、pid与gid值。通过此结构体中的值，以及消息的类型，检查进程的访问权限。</p>
<p>在属性消息中，以“ctl”开头的消息并非请求更改系统属性值的消息，而是请求进程启动与终止的消息。除此之外，其他消息都被用来更改系统的属性值，<br>check_perms()函数检查访问权限。各属性的访问权限采用Linux的uid进行区分，其定义如下<br><a href="http://androidxref.com/2.2.3/xref/system/core/init/property_service.c#52" target="_blank" rel="external">property_perms</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> gid<span class="token punctuation">;</span>
<span class="token punctuation">}</span> property_perms<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">"net.rmnet0."</span><span class="token punctuation">,</span>      AID_RADIO<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"net.gprs."</span><span class="token punctuation">,</span>        AID_RADIO<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"net.ppp"</span><span class="token punctuation">,</span>          AID_RADIO<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"ril."</span><span class="token punctuation">,</span>             AID_RADIO<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"gsm."</span><span class="token punctuation">,</span>             AID_RADIO<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"persist.radio"</span><span class="token punctuation">,</span>    AID_RADIO<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"net.dns"</span><span class="token punctuation">,</span>          AID_RADIO<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"net."</span><span class="token punctuation">,</span>             AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"dev."</span><span class="token punctuation">,</span>             AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"runtime."</span><span class="token punctuation">,</span>         AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"hw."</span><span class="token punctuation">,</span>              AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"sys."</span><span class="token punctuation">,</span>             AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"service."</span><span class="token punctuation">,</span>         AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"wlan."</span><span class="token punctuation">,</span>            AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"dhcp."</span><span class="token punctuation">,</span>            AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"dhcp."</span><span class="token punctuation">,</span>            AID_DHCP<span class="token punctuation">,</span>     <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"vpn."</span><span class="token punctuation">,</span>             AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"vpn."</span><span class="token punctuation">,</span>             AID_VPN<span class="token punctuation">,</span>      <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"debug."</span><span class="token punctuation">,</span>           AID_SHELL<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"log."</span><span class="token punctuation">,</span>             AID_SHELL<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"service.adb.root"</span><span class="token punctuation">,</span> AID_SHELL<span class="token punctuation">,</span>    <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"persist.sys."</span><span class="token punctuation">,</span>     AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"persist.service."</span><span class="token punctuation">,</span> AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"persist.security."</span><span class="token punctuation">,</span> AID_SYSTEM<span class="token punctuation">,</span>   <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>若要在系统运行中biang属性设置，应充分考虑各属性的访问权限。<br> <a href="http://androidxref.com/2.2.3/xref/system/core/init/property_service.c#271" target="_blank" rel="external">property_set()</a>函数会接着调用property_changed()函数</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">property_set</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
     <span class="token function">property_changed</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://androidxref.com/2.2.3/xref/system/core/init/init.c#323" target="_blank" rel="external">property_changed</a></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">property_changed</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>property_triggers_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">queue_property_triggers</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">drain_action_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在init.rc脚本文件中，记录着某个属性改变后要采取的动作，动作执行的条件以“<code>on property:&lt;key&gt;=&lt;value&gt;</code>”形式给出。当某个条件相关的键值被设定后，与该条件相关的触发其就会被触发。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/10570841/" target="_blank" rel="external">Amdroid框架揭秘</a><br><a href="http://blog.csdn.net/mr_raptor/article/details/7666906" target="_blank" rel="external">Android init进程启动</a><br><a href="http://www.cnblogs.com/mr-raptor/archive/2012/07/12/2588920.html" target="_blank" rel="external">Android init进程启动</a><br><a href="http://blog.csdn.net/chaoy1116/article/details/44751443" target="_blank" rel="external">Android启动流程分析(十) action的执行和service的启动</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇基于android2.2.3&lt;/p&gt;
&lt;p&gt;init进程是Android启动后，由内核启动的第一份用户级进程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android Framework" scheme="https://luoweiguang.github.io/tags/Android-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Android命名规范</title>
    <link href="https://luoweiguang.github.io/2016/09/22/Android%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>https://luoweiguang.github.io/2016/09/22/Android命名规范/</id>
    <published>2016-09-22T14:00:00.000Z</published>
    <updated>2017-11-14T16:50:08.986Z</updated>
    
    <content type="html"><![CDATA[<p><strong>自用</strong></p>
<a id="more"></a>
<h2 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h2><h3 id="AndroidLib"><a href="#AndroidLib" class="headerlink" title="AndroidLib"></a>AndroidLib</h3><p>存放业务无关的逻辑</p>
<ul>
<li><strong>activity</strong> 存放与业务无关的Activity基类</li>
<li><strong>net</strong> 存放网络底层封装</li>
<li><strong>cache</strong> 存放缓存数据和图片的相关处理</li>
<li><strong>ui</strong> 存放自定义控件</li>
<li><strong>utils</strong> 存放各种与业务无关的公共方法</li>
</ul>
<h3 id="主项目划分"><a href="#主项目划分" class="headerlink" title="主项目划分"></a>主项目划分</h3><ul>
<li><strong>activity</strong> 将不同模块的Activity划分到不同的包下</li>
<li><strong>fragment</strong> 将不同模块的fragment划分到不同的包下</li>
<li><strong>adapter</strong> 存放适配器</li>
<li><strong>broadcast</strong> 存放BroadcastReceive  </li>
<li><strong>engine</strong> 将业务相关的类都放在一起</li>
<li><strong>entity</strong> 将所有实体放在一起</li>
<li><strong>db</strong> SQLLite相关逻辑的封装</li>
<li><strong>interfaces</strong> 真正意义上的接口,命名以I作为开头</li>
<li><strong>listener</strong> 基于Listener的接口，命名以On作为开头</li>
<li><strong>service</strong> 存放Service</li>
<li><strong>ui</strong> 存放之定义控件</li>
<li><strong>utils</strong> 将所有的公共方法放在这里</li>
<li><strong>base</strong> 存放一些类的通用基类</li>
</ul>
<h2 id="文件命名规范"><a href="#文件命名规范" class="headerlink" title="文件命名规范"></a>文件命名规范</h2><ul>
<li><strong>类</strong> 帕斯卡(pascal)命名法:即所有单词的第一个字母大写</li>
<li><strong>接口</strong> I+帕斯卡(pascal)命名法</li>
<li><strong>常量</strong> 全部大写，单词用下划线分隔</li>
<li><strong>静态变量</strong> 以s开头</li>
<li><strong>成员变量</strong> 以m开头</li>
</ul>
<h2 id="Layout命名"><a href="#Layout命名" class="headerlink" title="Layout命名"></a>Layout命名</h2><p>页面类型_页面名称/模块名称_名称</p>
<table>
<thead>
<tr>
<th>页面类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>activity</td>
<td>activity的布局文件</td>
</tr>
<tr>
<td>fragment</td>
<td>fragment的布局文件</td>
</tr>
<tr>
<td>dlg</td>
<td>Dialog的布局文件</td>
</tr>
<tr>
<td>ppw</td>
<td>PopupWindow的布局文件</td>
</tr>
<tr>
<td>listitem</td>
<td>listview或recycleview的item项</td>
</tr>
<tr>
<td>include</td>
<td>用于include标签的页面</td>
</tr>
<tr>
<td>base</td>
<td>基础页面的布局文件</td>
</tr>
<tr>
<td>common</td>
<td>通用的布局文件</td>
</tr>
</tbody>
</table>
<pre><code>activity_login
</code></pre><h2 id="图片命名"><a href="#图片命名" class="headerlink" title="图片命名"></a>图片命名</h2><p>图片类型缩写_页面名称/模块名称/common/_图片名称_状态缩写(可选)_大小(可选)</p>
<table>
<thead>
<tr>
<th>图片类型缩写</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ic –icon</td>
<td>主要用于布局和子布局的图标</td>
</tr>
<tr>
<td>bg–background</td>
<td>主要用于布局和子布局的背景</td>
</tr>
<tr>
<td>di–divider</td>
<td>主要用于分隔线，不仅包括Listview中的还包括普通布局中的线</td>
</tr>
<tr>
<td>sl–selector</td>
<td>主要用于某一view多种状态，listview 按钮等</td>
</tr>
<tr>
<td>cl–color</td>
<td>主要用于颜色值</td>
</tr>
<tr>
<td>bt–button</td>
<td>主要用于按钮的表示</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>状态缩写</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>代表普通状态</td>
</tr>
<tr>
<td>press</td>
<td>代表按下状态</td>
</tr>
<tr>
<td>select</td>
<td>代表选中状态</td>
</tr>
<tr>
<td>unselect</td>
<td>代表没有被选中状态</td>
</tr>
<tr>
<td>focus</td>
<td>代表获得焦点</td>
</tr>
<tr>
<td>unfocus</td>
<td>代表未获得焦点</td>
</tr>
</tbody>
</table>
<pre><code>bt_login_activity_login_press
</code></pre><h2 id="动画命名"><a href="#动画命名" class="headerlink" title="动画命名"></a>动画命名</h2><p>页面名称/模块名称/common/_说明<em>动画类型\</em>方向</p>
<pre><code>login_activity__fade_in
</code></pre><h2 id="字符串常量命名"><a href="#字符串常量命名" class="headerlink" title="字符串常量命名"></a>字符串常量命名</h2><p>页面名称_控件名称_文字概述</p>
<pre><code>login_activity_btn_login_text
</code></pre><h2 id="控件ID命名"><a href="#控件ID命名" class="headerlink" title="控件ID命名"></a>控件ID命名</h2><p>控件缩写_layout文件名称_功能名称</p>
<pre><code>btn_activity_login_login
</code></pre><p>常用控件缩写</p>
<table>
<thead>
<tr>
<th>控件</th>
<th>缩写</th>
</tr>
</thead>
<tbody>
<tr>
<td>AppBarLayout</td>
<td>abl</td>
</tr>
<tr>
<td>AutoCompleteTextView</td>
<td>actv</td>
</tr>
<tr>
<td>Button</td>
<td>btn</td>
</tr>
<tr>
<td>CardView</td>
<td>cv</td>
</tr>
<tr>
<td>CheckBox</td>
<td>chk</td>
</tr>
<tr>
<td>CheckedTextView</td>
<td>chktv</td>
</tr>
<tr>
<td>Chronometer</td>
<td>cmt</td>
</tr>
<tr>
<td>CollapsingToolbarLayout</td>
<td>ctl</td>
</tr>
<tr>
<td>ContentLoadingProgressBar</td>
<td>cpbar</td>
</tr>
<tr>
<td>DatePicker</td>
<td>dp</td>
</tr>
<tr>
<td>EditText</td>
<td>et</td>
</tr>
<tr>
<td>FrameLayout</td>
<td>fl</td>
</tr>
<tr>
<td>FloatingActionButton</td>
<td>fabtn</td>
</tr>
<tr>
<td>GridView</td>
<td>gv</td>
</tr>
<tr>
<td>HorizontalScrollView</td>
<td>hsv</td>
</tr>
<tr>
<td>ImageButton</td>
<td>imgbtn</td>
</tr>
<tr>
<td>ImageView</td>
<td>iv</td>
</tr>
<tr>
<td>ListView</td>
<td>lv</td>
</tr>
<tr>
<td>LinearLayout</td>
<td>ll</td>
</tr>
<tr>
<td>MultiAutoCompleteTextView</td>
<td>mactv</td>
</tr>
<tr>
<td>NavigationView</td>
<td>nv</td>
</tr>
<tr>
<td>NestedScrollView</td>
<td>nsv</td>
</tr>
<tr>
<td>ProgressBar</td>
<td>pbar</td>
</tr>
<tr>
<td>RadioGroup</td>
<td>rg</td>
</tr>
<tr>
<td>RadioButton</td>
<td>rbtn</td>
</tr>
<tr>
<td>RatingBar</td>
<td>rbar</td>
</tr>
<tr>
<td>RecyclerView</td>
<td>rcv</td>
</tr>
<tr>
<td>RelativeLayout</td>
<td>rl</td>
</tr>
<tr>
<td>ScrollView</td>
<td>scrv</td>
</tr>
<tr>
<td>SearchView</td>
<td>seav</td>
</tr>
<tr>
<td>SeekBar</td>
<td>sbar</td>
</tr>
<tr>
<td>Spinner</td>
<td>spn</td>
</tr>
<tr>
<td>Switch</td>
<td>sw</td>
</tr>
<tr>
<td>TextClock</td>
<td>tc</td>
</tr>
<tr>
<td>TextView</td>
<td>tv</td>
</tr>
<tr>
<td>TimePicker</td>
<td>tp</td>
</tr>
<tr>
<td>Toolbar</td>
<td>tbar</td>
</tr>
<tr>
<td>toggleButton</td>
<td>tbtn</td>
</tr>
<tr>
<td>ZoomButton</td>
<td>zbtn</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://yidongkaifa.iteye.com/blog/1809593" target="_blank" rel="external">几行代码看程序员的水平——Android文件命名规范</a><br><a href="https://book.douban.com/subject/26649050/" target="_blank" rel="external">App研发录：架构设计、Crash分析和竞品技术分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;自用&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android开发" scheme="https://luoweiguang.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Serializable与Parcelable</title>
    <link href="https://luoweiguang.github.io/2016/09/12/Serializable%E4%B8%8EParcelable/"/>
    <id>https://luoweiguang.github.io/2016/09/12/Serializable与Parcelable/</id>
    <published>2016-09-12T14:00:00.000Z</published>
    <updated>2017-11-14T17:13:14.036Z</updated>
    
    <content type="html"><![CDATA[<p>Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口</p>
<a id="more"></a>
<h2 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h2><p>Serialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。</p>
<p>  序列化只能保存对象的<strong>非静态成员交量</strong>，不能保存任何的<strong>成员方法</strong>和<strong>静态的成员变量</strong>，而且串行化保存的只是变量的值，对于变量的任何修饰符都不能保存</p>
<p>对于某些类型的对象，其状态是瞬时的，这样的对象是无法保存其状态的。例如一个Thread对象或一个FileInputStream对象，对于这些字段，我们必须用<strong>transient</strong>关键字标明，否则编译器将报措。 </p>
<p>另外 ，串行化可能涉及将对象存放到磁盘上或在网络上发送数据，这时候就会产生安全问题。因为数据位于Java运行环境之外，不在Java安全机制的控制之中。对于这些需要保密的字段，不应保存在永久介质中，或者不应简单地不加处理地保存下来，为了保证安全性。应该在这些字段前加上transient关键字。</p>
<p>如果该类有父类，则分两种情况来考虑，如果该父类已经实现了可序列化接口。则其父类的相应字段及属性的处理和该类相同；如果该类的父类没有实现可序列化接口，则该类的父类所有的字段属性将不会序列化，并且反序列化时会调用父类的默认构造函数来初始化父类的属性，而子类却不调用默认构造函数，而是直接从流中恢复属性的值。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p>
<p>java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。<br>只有实现了Serializable和Externalizable接口的类的对象才能被序列化。Externalizable接口继承自 Serializable接口，实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以 采用默认的序列化方式 。</p>
<p>对象序列化包括如下步骤</p>
<ul>
<li>创建一个对象输出流，它可以包装一个其他类型的目标输出流，如文件输出流；</li>
<li>通过对象输出流的writeObject()方法写对象。</li>
</ul>
<p>对象反序列化的步骤</p>
<ul>
<li>创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流；</li>
<li>通过对象输入流的readObject()方法读取对象。</li>
</ul>
<h3 id="serialVersionUId"><a href="#serialVersionUId" class="headerlink" title="serialVersionUId"></a>serialVersionUId</h3><p><strong>serialVersionUId的详细工作机制</strong><br>序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。</p>
<p>一般来说，我们应该手动指定serialVersionUId的值，比如1L也可以让IDE根据类的结构自动生成它的hash值，这样序列化和反序列化时两者的serialVersionUID是相同的，因此可以正常进行反序列化。如果不手动指定serialVersionUID的值，反序列化时当前类有所改变，比如增加或删除了某些成员变量，那么系统就会重新计算当前类的hash值并把它赋值给serialVersionUID，这个时候当前类的serialVersionUID就和序列化中的serialVersionUID不一致，于是反序列化失败。</p>
<h2 id="Parcelable"><a href="#Parcelable" class="headerlink" title="Parcelable"></a>Parcelable</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String userName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Book book<span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">//返回当前对象的内容描述，如果含有文件描述符，返回1，</span>
    <span class="token comment" spellcheck="true">// 否则返回0，几乎所有情况都返回0</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">//将当前对象写入序列化结构中</span>
    <span class="token comment" spellcheck="true">//flags标示有两种值:0或者1.为1时标识当前对象需要作为返回值返回，</span>
    <span class="token comment" spellcheck="true">//不能立即释放资源，几乎所有情况都为0</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dest<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isMale <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dest<span class="token punctuation">.</span><span class="token function">writeParcelable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token function">User</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isMale <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//因为book是另一个可序列化对象，</span>
        <span class="token comment" spellcheck="true">//所以它的反序列化过程需要传递当前线程的上下文类加载器，</span>
        <span class="token comment" spellcheck="true">//否则会报找到类的错误</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>book <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readParcelable</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//该静态域是必须要有的，而且名字必须是CREATOR，否则会出错</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Parcelable<span class="token punctuation">.</span>Creator<span class="token operator">&lt;</span>User<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//从序列化后的对象中创建原始对象</span>
        <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> User <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel source<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//创建返回对象</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//创建指定长度的原始对象数组</span>
        <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><ul>
<li><p>在使用内存的时候，Parcelable比Serializable性能高，所以推荐使用Parcelable。</p>
</li>
<li><p>Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。</p>
</li>
<li><p>Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。</p>
</li>
<li><p>对象的持久化可以选择Json,XML,网络传输也可以选择Json，XML</p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">Android开发艺术探索</a><br><a href="http://www.cnblogs.com/vicenteforever/articles/1471775.html" target="_blank" rel="external">Java中的Serializable浅谈，只是浅谈</a><br><a href="http://www.cnblogs.com/xdp-gacl/p/3777987.html" target="_blank" rel="external">Java基础学习总结——Java对象的序列化和反序列化</a><br><a href="http://jiangzhengjun.iteye.com/blog/519256" target="_blank" rel="external">对象序列化与反序列化（Serializable、Externalizable）</a><br><a href="http://www.cnblogs.com/renqingping/archive/2012/10/25/Parcelable.html" target="_blank" rel="external">Android中Parcelable接口用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Notification的使用</title>
    <link href="https://luoweiguang.github.io/2016/09/08/Notification%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/09/08/Notification的使用/</id>
    <published>2016-09-08T14:00:00.000Z</published>
    <updated>2017-11-14T17:17:19.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h2><p>使用状态栏通知一般有4个步骤：</p>
<p>1、  通过getSystemService()方法获取NotificationManager服务。</p>
<p>2、  创建一个Notification.Builder对象，并为其设置各种属性。</p>
<p>3、  对Notification.Builder对象设置各种属性和事件信息，构造一个对Notification对象。</p>
<p>4、  通过NotificationManager类的notify()方法将通知发送到状态栏。</p>
<a id="more"></a>
<h2 id="NotificationManager"><a href="#NotificationManager" class="headerlink" title="NotificationManager"></a>NotificationManager</h2><p>NotificationManager ：  是状态栏通知的管理类，负责发通知、清除通知等。<br>NotificationManager 是一个系统Service，必须通过 getSystemService()方法来获取。</p>
<pre class=" language-java"><code class="language-java">NotificationManager manager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>public void cancel (int id)<br>取消通知</li>
<li>public void cancel (String tag, int id)<br>取消通知</li>
<li>public void cancelAll ()<br>取消所有通知</li>
<li>public void notify (int id, Notification notification)<br>发布通知</li>
<li>public void notify (String tag, int id, Notification notification)<br>发布通知</li>
</ul>
<h2 id="Builder对象的方法"><a href="#Builder对象的方法" class="headerlink" title="Builder对象的方法"></a>Builder对象的方法</h2><ul>
<li><p>getNotification()<br>API小于16时使用此方法构造一个Notification对象</p>
</li>
<li><p>build ()<br>API大于等于16时使用此方法构造一个Notification对象</p>
</li>
<li><p>addAction (int icon, CharSequence title, PendingIntent intent)(在API23过时)<br>添加按钮</p>
</li>
<li><p>addAction (Notification.Action action)(API20)<br>添加按钮</p>
</li>
<li><p>setAutoCancel(boolean autoCancel)<br>设置点击通知后，状态栏自动删除通知</p>
</li>
<li><p>setCategory(String category)(API21)<br>设置通知类别</p>
</li>
<li><p>setColor(int argb)(API21)<br>设置颜色</p>
</li>
<li><p>setContent(RemoteViews views)<br>设置自定义视图</p>
</li>
<li><p>setContentInfo(CharSequence info)<br>设置信息(即右下方显示的内容)</p>
</li>
<li><p>setContentIntent(PendingIntent intent)<br>设置点击后意图，即打开哪个组件</p>
</li>
<li><p>setContentText(CharSequence text)<br>设置内容</p>
</li>
<li><p>setContentTitle(CharSequence title)<br>设置标题</p>
</li>
<li><p>setDefaults(int defaults)<br>向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合,如：<code>setDefaults(Notification.DEFAULT_SOUND|Notification.DEFAULT_VIBRATE)</code></p>
<ul>
<li>Notification.DEFAULT_VIBRATE    //添加默认震动提醒  需要 VIBRATE permission</li>
<li>Notification.DEFAULT_SOUND    // 添加默认声音提醒</li>
<li>Notification.DEFAULT_LIGHTS// 添加默认三色灯提醒</li>
<li>Notification.DEFAULT_ALL// 添加默认以上3种全部提醒</li>
</ul>
</li>
<li><p>setDeleteIntent(PendingIntent intent)<br>设置删除时的意图</p>
</li>
<li><p>setExtras(Bundle extras)(API19)<br>设置数据</p>
</li>
<li><p>setFullScreenIntent(PendingIntent intent, boolean highPriority)<br>设置悬挂式Notification </p>
</li>
<li><p>setGroup(String groupKey)(API20)<br>设置该通知组的密匙，即确认为哪一组</p>
</li>
<li><p>setGroupSummary(boolean isGroupSummary)(API20)<br>设置是否为一组通知的汇总</p>
</li>
<li><p>setLargeIcon(Icon icon)(API23)<br>设置大图标</p>
</li>
<li><p>setLargeIcon(Bitmap b)<br>设置大图标</p>
</li>
<li><p>setLights(int argb, int onMs, int offMs)<br>设置三色灯，ledARGB 表示灯光颜色、 ledOnMS 亮持续时间、ledOffMS 暗的时间</p>
</li>
<li><p>setLocalOnly(boolean localOnly)(API20)<br>设置该通知是否应不桥接至其它设备。</p>
</li>
<li><p>setNumber(int number)<br>设置一个数(即右下方显示的内容)</p>
</li>
<li><p>setOngoing(boolean ongoing)<br>设置为true时就不能滑动删除 </p>
</li>
<li><p>setOnlyAlertOnce(boolean onlyAlertOnce)<br>设置仅提醒一次</p>
</li>
<li><p>setPriority(int pri)(API16)<br>设置优先级</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>优先级</th>
<th>用户</th>
</tr>
</thead>
<tbody>
<tr>
<td>MAX</td>
<td>重要而紧急的通知，通知用户这个事件是时间上紧迫的或者需要立即处理的。</td>
</tr>
<tr>
<td>HIGH</td>
<td>高优先级用于重要的通信内容，例如短消息或者聊天，这些都是对用户来说比较有兴趣的。</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认优先级用于没有特殊优先级分类的通知。</td>
</tr>
<tr>
<td>LOW</td>
<td>低优先级可以通知用户但又不是很紧急的事件。</td>
</tr>
<tr>
<td>MIN</td>
<td>用于后台消息(例如天气或者位置信息)。最低优先级通知将只在状态栏显示图标，只有用户下拉通知抽屉才能看到内容。</td>
</tr>
</tbody>
</table>
<ul>
<li><p>setProgress(int max, int progress, boolean indeterminate)(API14)<br>设置进度条</p>
</li>
<li><p>setPublicVersion(Notification n)<br>设置安全锁屏下的通知</p>
</li>
<li><p>setShowWhen(boolean show)(API17)<br>是否显示时间</p>
</li>
<li><p>setSmallIcon(int icon, int level)<br>设置小图标</p>
</li>
<li><p>setSmallIcon(int icon)<br>设置小图标.</p>
</li>
<li><p>setSmallIcon(Icon icon)<br>设置小图标</p>
</li>
<li><p>setSortKey(String sortKey)(API20)<br>设置排序键</p>
</li>
<li><p>setSound(Uri sound, AudioAttributes audioAttributes)(API21)<br>设置铃声</p>
</li>
<li><p>setSound(Uri sound)<br>设置铃声</p>
</li>
<li><p>setSound(Uri sound, int streamType)(在API21废弃)<br>设置铃声</p>
</li>
<li><p>setStyle(Notification.Style style)(API16)<br>设置样式</p>
</li>
<li><p>setSubText(CharSequence text)(API16)<br>设置第三行的文本</p>
</li>
<li><p>setTicker(CharSequence tickerText, RemoteViews views)<br>设置显示在状态栏的提醒内容（5.0及之后没有效果）</p>
</li>
<li><p>setTicker(CharSequence tickerText)<br>设置显示在状态栏的提醒内容（5.0及之后没有效果）</p>
</li>
<li><p>setUsesChronometer(boolean b)(API16)<br>使用计时器</p>
</li>
<li><p>setVibrate(long[] pattern)<br>设置震动，其中数组的奇数位为暂停时间，偶数位为震动时间</p>
</li>
<li><p>setVisibility(int visibility)(API21)<br>设置可达性</p>
<ul>
<li>VISIBILITY_PUBLIC 只有在没有锁屏时会显示通知</li>
<li>VISIBILITY_PRIVATE 任何情况都会显示通知</li>
<li>VISIBILITY_SECRET 在安全锁和没有锁屏的情况下显示通知</li>
</ul>
</li>
<li><p>setWhen(long when)<br>设置显示通知的时间，不设置默认获取系统时间，这个值会在Notification上面显示出来</p>
</li>
</ul>
<p><strong>如果不设置LargeIcon，那么系统会默认将上面的SmallIcon显示在通知选项的最左侧，右下角的小图标将不再显示  </strong></p>
<h2 id="notification-flags参数介绍"><a href="#notification-flags参数介绍" class="headerlink" title="notification.flags参数介绍"></a>notification.flags参数介绍</h2><p>Notification.FLAG_SHOW_LIGHTS //三色灯提醒，在使用三色灯提醒时候必须加该标志符</p>
<p>Notification.FLAG_ONGOING_EVENT //发起正在运行事件（活动中）</p>
<p>Notification.FLAG_INSISTENT //让声音、振动无限循环，直到用户响应 （取消或者打开）</p>
<p>Notification.FLAG_ONLY_ALERT_ONCE //发起Notification后，铃声和震动均只执行一次</p>
<p>Notification.FLAG_AUTO_CANCEL //用户单击通知后自动消失</p>
<p>Notification.FLAG_NO_CLEAR //只有全部清除时，Notification才会清除 ，不清楚该通知(QQ的通知无法清除，就是用的这个)</p>
<p>Notification.FLAG_FOREGROUND_SERVICE //表示正在运行的服务</p>
<h2 id="PendingIntent"><a href="#PendingIntent" class="headerlink" title="PendingIntent"></a>PendingIntent</h2><p>PendingIntent是一个Intent的描述、包装，给予了这个PendingIntent 的组件在指定的事件发生或指定的时间到达时启动Activty、Service或者Broadcast。</p>
<pre class=" language-xml"><code class="language-xml">PendingIntent contentIntent = PendingIntent.getActivity(context,
requestCode, intent, PendingIntent.FLAG_UPDATE_CURRENT);
</code></pre>
<pre class=" language-xml"><code class="language-xml">PendingIntent contentIntent = PendingIntent.getBroadcast(context,
requestCode, intent, PendingIntent.FLAG_UPDATE_CURRENT);
</code></pre>
<pre class=" language-xml"><code class="language-xml">PendingIntent contentIntent = PendingIntent.getService(context,
requestCode, intent, PendingIntent.FLAG_UPDATE_CURRENT);
</code></pre>
<ul>
<li><p><strong>FLAG_ONE_SHOT</strong><br>当前描述的PendingIntent只能被使用一次，然后它就会被自动cancel，如果后续还有相同的PendingIntent，那么他们的send方法就会调用失败。对于通知栏消息来说，如果采用此标记，那么同类的通知只能使用一次，后续的通知单击后将无法打开</p>
</li>
<li><p><strong>FLAG_NO_CREATE</strong><br>当前描述的PendingIntent不会主动创建，如果当前PendingIntent之前不存在，那么getActivity、getService、getBroadcast方法会直接返回null，即获取PendingIntent失败。这个标记很少见，它无法单独使用，因此在日常开发中它并没有太多的使用意义</p>
</li>
<li><p><strong>FLAG_CANCEL_CURRENT</strong><br>如果描述的PendingIntent已经存在，那么它们都会被cancel，然后系统会创建一个新的PendingIntent。对于通知栏消息来说，那些cancel的消息单击后将无法打开。</p>
</li>
<li><p><strong>FLAG_UPDATE_CURRENT</strong><br>当前描述的PendingIntent如果已经存在，那么它们都会被更新，即它们的Intent中的Extras会被替换成最新的</p>
</li>
</ul>
<p>上面4个flag中最经常使用的是FLAG_UPDATE_CURRENT，因为描述的Intent有 更新的时候需要用到这个flag去更新你的描述，否则组件在下次事件发生或时间到达的时候extras永远是第一次Intent的extras。<br>使用 FLAG_CANCEL_CURRENT也能做到更新extras，只不过是先把前面的extras清除，另外FLAG_CANCEL_CURRENT和 FLAG_UPDATE_CURRENT的区别在于能否新new一个Intent，FLAG_UPDATE_CURRENT能够新new一个 Intent，而FLAG_CANCEL_CURRENT则不能，只能使用第一次的Intent。</p>
<p>此外还需要注意参数： <strong>int requestCode</strong></p>
<p>对于FLAG_UPDATE_CURRENT,如果上面的requestCode 为常量，则对于先后出现的若干Notification,则所有对应的Intent里面的extra被更新为最新的，就是全部同一为最后一次的。<br>相反，如果requestCode每次不一样，则里面的Inent的数据没被更新。<br>对于FLAG_CANCEL_CURRENT,则只响应最前面的第一条Notifiacation,后面所有的不响应….</p>
<h2 id="自定义Notification"><a href="#自定义Notification" class="headerlink" title="自定义Notification"></a>自定义Notification</h2><p>实现自定义Notification的步骤</p>
<ul>
<li>创建RemoteViews对象</li>
<li>Notification.Builder对象中使用setContent(RemoteViews views)方法</li>
</ul>
<h3 id="RemoteViews"><a href="#RemoteViews" class="headerlink" title="RemoteViews"></a>RemoteViews</h3><p>RemoteViews表示的是一个view结构，它可以在其他进程中显示。由于它在其他进程中显示，为了能够更新它的界面，RemoteViews提供了一组基础的操作用于跨进程更新它的界面</p>
<h4 id="支持类型"><a href="#支持类型" class="headerlink" title="支持类型"></a>支持类型</h4><p>在RemoteViews并不支持所有的View类型，支持的所有类型如下:<br>Layout:<br>    FrameLayout, LinearLayout, RelativeLayout,GridLayout</p>
<p>View:<br>  AnalogClock, Button, Chronometer, ImageButton, ImageView, ProgressBar, TextView, ViewFlipper, ListView, GridView, StackView, AdapterViewFlipper,ViewStub</p>
<p>  上面说描述的RemoteViews所支持的所有的View类型，RemoteViews不支持它们的子类以及其他View类型。也就是说RemoteViews中不能使用除了上述列表中以外的View，也无法使用自定义View</p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li><p>setTextViewText(int viewId,Charsequence text)<br>设置TextView的文本</p>
</li>
<li><p>setTextViewTextSize(int viewId, int units, float size)<br>设置TextView的字体大小</p>
</li>
<li><p>setTextColor(int viewId, int color)<br>设置TextView的字体颜色</p>
</li>
<li><p>setImageViewResource(int viewId, int srcId)<br>设置ImageView的图片资源</p>
</li>
<li><p>setInt(int viewId, String methodName, int value)<br>反射调用View对象的参数类型为int的方法</p>
</li>
<li><p>setLong(int viewId, String methodName, long value)<br>反射调用View对象的参数类型为long的方法</p>
</li>
<li><p>setBoolean(int viewId, String methodName, boolean value)<br>反射调用View对象的参数类型为boolean的方法</p>
</li>
<li><p>setOnClickPendingIntent(int viewId, PendingIntent pendingIntent)<br>为View添加单击事件，事件类型只能为PendingIntent</p>
</li>
</ul>
<h4 id="内部机制"><a href="#内部机制" class="headerlink" title="内部机制"></a>内部机制</h4><ul>
<li><p>RemoteViews的构造方法 public RemoteViews(String packageName, int layoutId)，第一个参数是当前应用的包名，第二个参数是待加载的布局文件。</p>
</li>
<li><p>RemoteViews提供了一系列的set方法完成view的设置，这是通过反射完成的调用的。例如方法setInt(int viewId, String methodName, int value)就是反射调用view对象的名称为methodName的方法，传入参数value，同样的还有setBoolean、setLong等。方法setOnClickPendingIntent(int viewId, PendingIntent pi)用来为view添加单击事件，事件类型只能为PendingIntent。</p>
</li>
<li><p>系统对View界面执行一系列的更新操作，即通过set方法提交的，但更新操作不是立即执行(在RemoteViews内部会记录所有的更新操作)，而是到RemoteViews被加载后执行</p>
</li>
<li><p>通知和小部件分别由NotificationManager和AppWidgetManager管理，而它们通过Binder分别和SystemServer进程中的NotificationManagerService和AppWidgetManagerService进行通信。所以，布局文件实际上是两个Service加载的，运行在SystemServer进程中。</p>
</li>
<li><p>RemoteViews实现了Parcelable接口，它会通过Binder传递到SystemServer进程，系统会根据RemoteViews中的包名信息获取到应用中的资源，从而完成布局文件的加载。</p>
</li>
<li><p>系统将view操作封装成Action对象，Action同样实现了Parcelable接口，通过Binder传递到SystemServer进程。远程进程通过RemoteViews的apply方法来进行view的更新操作，RemoteViews的apply方法内部则会去遍历所有的action对象并调用它们的apply方法来进行view的更新操作。这样做的好处是不需要定义大量的Binder接口，其次批量执行RemoteViews中的更新操作提高了程序性能。</p>
</li>
<li><p>RemoteViews的apply和reapply方法的区别：apply方法会加载布局并更新界面，而reapply方法则只会更新界面。</p>
</li>
<li><p>setOnClickPendingIntent、setPendingIntentTemplate和setOnClickFillIntent的区别，setOnClickPendingIntent用于给普通的view添加点击事件，但是不能给集合(ListView和StackView)中的view设置点击事件，因为开销太大了。如果需要给ListView和StackView中的item添加点击事件，需要结合setPendingIntentTemplate和setOnClickFillIntent一起使用。</p>
</li>
</ul>
<p><strong>假如报了android.app.RemoteServiceException: Bad notification posted from package ****: Couldn’t expand RemoteViews for:****问题，那么可能不一定是写错了，而是使用了Install Run功能，关闭此功能或每次修改自定义Notification的xml布局文件都要在运行前删除应用 *</strong></p>
<h3 id="TaskStackBuilder-API16"><a href="#TaskStackBuilder-API16" class="headerlink" title="TaskStackBuilder(API16)"></a>TaskStackBuilder(API16)</h3><p>当我们想要跳转的Activity按返回时返回的是应用的主界面或其他界面，而不是桌面时，可以使用此类来构建一个任务栈</p>
<p><strong>步骤</strong></p>
<ol>
<li>创建TaskStackBuilder对象</li>
<li>通过addNextIntent (Intent nextIntent)添加跳转的intent</li>
<li>重复第二步，直到完成任务栈的创建</li>
<li>通过getPendingIntent()方法获得PendingIntent</li>
<li>设置跳转的PendingIntent</li>
</ol>
<p><strong>创建TaskStackBuilder对象</strong></p>
<pre class=" language-java"><code class="language-java">TaskStackBuilder taskStackBuilder <span class="token operator">=</span> TaskStackBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>当Activity设置了<strong>android:parentActivityName</strong>属性时，使用<strong>addParentStack()</strong>方法可以直接创建其指定的所有上级进栈（但不包括自己），使用<strong>addNextIntentWithParentStack()</strong>包括自己及所有上级进栈</p>
<p><strong>例子</strong></p>
<pre class=" language-java"><code class="language-java">TaskStackBuilder taskStackBuilder <span class="token operator">=</span> TaskStackBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
taskStackBuilder<span class="token punctuation">.</span><span class="token function">addNextIntent</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
Intent intent2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>SecondActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
taskStackBuilder<span class="token punctuation">.</span><span class="token function">addNextIntent</span><span class="token punctuation">(</span>intent2<span class="token punctuation">)</span><span class="token punctuation">;</span>
Intent intent3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>ThirdActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
taskStackBuilder<span class="token punctuation">.</span><span class="token function">addNextIntent</span><span class="token punctuation">(</span>intent3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> requestCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
remoteViews<span class="token punctuation">.</span><span class="token function">setOnClickPendingIntent</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>test<span class="token punctuation">,</span>
                                    taskStackBuilder<span class="token punctuation">.</span><span class="token function">getPendingIntent</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span>
                                    PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="常见Notification类型"><a href="#常见Notification类型" class="headerlink" title="常见Notification类型"></a>常见Notification类型</h2><h3 id="普通Notification"><a href="#普通Notification" class="headerlink" title="普通Notification"></a>普通Notification</h3><p>略</p>
<h3 id="点击取消显示的Notification"><a href="#点击取消显示的Notification" class="headerlink" title="点击取消显示的Notification"></a>点击取消显示的Notification</h3><ul>
<li>builder中调用setAutoCancel(true)(Notification需要设置ContentIntent才有效)</li>
</ul>
<h3 id="无法滑动删除的Notification"><a href="#无法滑动删除的Notification" class="headerlink" title="无法滑动删除的Notification"></a>无法滑动删除的Notification</h3><ul>
<li>builder中调用setOngoing(true)</li>
</ul>
<h3 id="拥有按钮的Notification"><a href="#拥有按钮的Notification" class="headerlink" title="拥有按钮的Notification"></a>拥有按钮的Notification</h3><ul>
<li>builder中使用addAction()添加按钮</li>
</ul>
<h3 id="折叠式Notification"><a href="#折叠式Notification" class="headerlink" title="折叠式Notification"></a>折叠式Notification</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置展开后的视图</span>
notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span>
</code></pre>
<h3 id="横幅式Notification"><a href="#横幅式Notification" class="headerlink" title="横幅式Notification"></a>横幅式Notification</h3><ul>
<li>builder对象调用setFullScreenIntent()方法</li>
</ul>
<h3 id="进度条Notification"><a href="#进度条Notification" class="headerlink" title="进度条Notification"></a>进度条Notification</h3><ul>
<li>builder对象调用setProgress()方法</li>
</ul>
<h3 id="BigTextStyle样式的Notification"><a href="#BigTextStyle样式的Notification" class="headerlink" title="BigTextStyle样式的Notification"></a>BigTextStyle样式的Notification</h3><ul>
<li>创建Notification.BigTextStyle对象</li>
<li>使用setBigContentTitle()设置标题</li>
<li>使用bigText()设置正文</li>
<li>使用setSummaryText()设置末尾行文本</li>
<li>使用setStyle()设置此style对象</li>
</ul>
<h3 id="BigPictureStyle样式的Notification"><a href="#BigPictureStyle样式的Notification" class="headerlink" title="BigPictureStyle样式的Notification"></a>BigPictureStyle样式的Notification</h3><ul>
<li>创建Notification.BigPictureStyle对象</li>
<li>使用setBigContentTitle()设置标题</li>
<li>使用setSummaryText()设置文本</li>
<li>使用bigPicture()设置大图，但是太大会造成OOM</li>
<li>使用bigLargeIcon()设置图标</li>
<li>使用setStyle()设置此style对象</li>
</ul>
<h3 id="InboxStyle样式的Notification"><a href="#InboxStyle样式的Notification" class="headerlink" title="InboxStyle样式的Notification"></a>InboxStyle样式的Notification</h3><ul>
<li>创建Notification.InboxStyle对象</li>
<li>使用setBigContentTitle()设置标题</li>
<li>使用addLine()添加行文本，调用n次则生成n行文本</li>
<li>使用setSummaryText()设置末尾行文本</li>
<li>使用setStyle()设置此style对象</li>
</ul>
<h3 id="MediaStyle样式的Notification"><a href="#MediaStyle样式的Notification" class="headerlink" title="MediaStyle样式的Notification"></a>MediaStyle样式的Notification</h3><ul>
<li>builder中使用addAction()添加按钮</li>
<li>使用setMediaSession()设置MediaSession.Token对象</li>
<li>使用setShowActionsInCompactView()方法设置显示在通知右方的图标 最多三个</li>
<li>使用setStyle()设置此style对象</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">Android开发艺术探索</a><br><a href="http://blog.csdn.net/feng88724/article/details/6259071" target="_blank" rel="external">【Android】状态栏通知Notification、NotificationManager详解</a><br><a href="http://blog.sina.com.cn/s/blog_5da93c8f01011w5j.html" target="_blank" rel="external">Notification中PendingIntent.Flag的应用 </a><br><a href="http://blog.csdn.net/vipzjyno1/article/details/25248021" target="_blank" rel="external">Android 通知栏Notification的整合 全面学习 （一个DEMO让你完全了解它）</a><br><a href="http://blog.csdn.net/w804518214/article/details/51231946" target="_blank" rel="external">Android Notification常见样式总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一般步骤&quot;&gt;&lt;a href=&quot;#一般步骤&quot; class=&quot;headerlink&quot; title=&quot;一般步骤&quot;&gt;&lt;/a&gt;一般步骤&lt;/h2&gt;&lt;p&gt;使用状态栏通知一般有4个步骤：&lt;/p&gt;
&lt;p&gt;1、  通过getSystemService()方法获取NotificationManager服务。&lt;/p&gt;
&lt;p&gt;2、  创建一个Notification.Builder对象，并为其设置各种属性。&lt;/p&gt;
&lt;p&gt;3、  对Notification.Builder对象设置各种属性和事件信息，构造一个对Notification对象。&lt;/p&gt;
&lt;p&gt;4、  通过NotificationManager类的notify()方法将通知发送到状态栏。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>BroadcastReceiver的使用</title>
    <link href="https://luoweiguang.github.io/2016/08/27/BroadcastReceiver%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/08/27/BroadcastReceiver的使用/</id>
    <published>2016-08-27T14:00:00.000Z</published>
    <updated>2017-11-14T17:28:33.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="广播的分类"><a href="#广播的分类" class="headerlink" title="广播的分类"></a>广播的分类</h2><ul>
<li>普通广播</li>
<li>有序广播</li>
<li>粘性广播</li>
<li>本地广播</li>
<li>定向广播</li>
</ul>
<a id="more"></a>
<h2 id="广播接收者的注册"><a href="#广播接收者的注册" class="headerlink" title="广播接收者的注册"></a>广播接收者的注册</h2><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MyBroadcastReceiver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>  <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.BOOT_COMPLETED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>  <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.net.conn.CONNECTIVITY_CHANGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span>  <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.BATTERY_CHANGED<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="启用和禁止广播接收器"><a href="#启用和禁止广播接收器" class="headerlink" title="启用和禁止广播接收器"></a>启用和禁止广播接收器</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//启用广播接收器</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enableBroadcastReceiver</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PackageManager packageManager <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    packageManager<span class="token punctuation">.</span><span class="token function">setComponentEnabledSetting</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">,</span>
                   PackageManager<span class="token punctuation">.</span>COMPONENT_ENABLED_STATE_ENABLED<span class="token punctuation">,</span>
                   PackageManager<span class="token punctuation">.</span>DONT_KILL_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//禁止广播接收器</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">disableBroadcastReceiver</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PackageManager packageManager <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    packageManager<span class="token punctuation">.</span><span class="token function">setComponentEnabledSetting</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">,</span>
                   PackageManager<span class="token punctuation">.</span>COMPONENT_ENABLED_STATE_DISABLED<span class="token punctuation">,</span>
                   PackageManager<span class="token punctuation">.</span>DONT_KILL_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><ul>
<li><strong>注册</strong><pre class=" language-java"><code class="language-java">MyBroadcastReceiver receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"android.intent.action.TIME_TICK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><strong>解除注册</strong><pre class=" language-java"><code class="language-java"><span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<p><strong>动态注册的广播接收器必须要组件销毁前进行解除注册</strong></p>
<h2 id="普通广播"><a href="#普通广播" class="headerlink" title="普通广播"></a>普通广播</h2><ul>
<li>普通广播是完全异步的</li>
<li>通过Context的<code>sendBroadcat()</code>函数来发送</li>
<li>消息传递的效率比较高，但是所有的receivers(接收器)的执行顺序不确定</li>
<li>接收者不能将处理结果传递给下一个接收者，并且无法终止广播Intent的传播</li>
</ul>
<h2 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h2><ul>
<li>有序广播通过Context的<code>sendOrderedBroadcast()</code>来发送</li>
<li>所有的广播接收器按照优先级依次执行，广播接收器的优先级通过receiver的intent-filter中的<code>android:priority</code>属性来设置，数值越大优先级越高。</li>
<li>当广播接收器接收的广播后，可以使用<code>setResult()</code>函数将结果传给下一个广播接收器接收，然后通过<code>getResult()</code>函数来取得上个广播接收器返回的结果，并可以用<code>abortBroadcast()</code>函数来让系统丢弃广播，使广播不再传送到别的广播接收器</li>
</ul>
<h3 id="有序广播的优先级"><a href="#有序广播的优先级" class="headerlink" title="有序广播的优先级"></a>有序广播的优先级</h3><ul>
<li>优先按<code>android:priority</code>来比较，数值越大则优先级越高，最大值为<code>2147483647</code>(即int型的最大值，而非官方文档的1000)</li>
<li>在<code>android:priority</code>相同的情况下，<code>动态注册</code>优先级高于<code>静态注册</code></li>
<li>在注册方式一样的情况下，<code>先注册</code>的优先级高于<code>后注册</code>的</li>
</ul>
<h2 id="粘性广播"><a href="#粘性广播" class="headerlink" title="粘性广播"></a>粘性广播</h2><ul>
<li><strong>API21</strong>上标记为过时</li>
<li>通过Context的<code>sendStickyBroadcast()</code>函数来发送。用此函数发送的广播会一直滞留，当有匹配此广播的广播接收器被注册后，该广播接收器就会收到此条广播。</li>
<li>sendStickyBroadcast只保留最后一条广播，并且一直保留下去，这样即使已经有广播接收器处理了该广播，当再有匹配的广播接收器被注册时，此广播仍会被接收。如果只想处理一遍该广播，可以通过<code>removeStickyBroadcast()</code>函数实现</li>
<li>使用此函数发送广播时，需要获得B权限<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BROADCAST_STICKY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
</li>
</ul>
<h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><ul>
<li>在21版的Support4包中新增本地广播，也就是<code>LocalBroadcastManager</code></li>
<li>只需要调用context的sendBroadcast、registerReceiver、unregisterReceiver的地方替换为LocalBroadcastManager getInstance(Context context)中对应的函数即可</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalBroadcastManager.getInstance(context).registerReceiver(receiver,intentFilter)</td>
<td>注册receiver</td>
</tr>
<tr>
<td>LocalBroadcastManager.getInstance(context).unregisterReceiver(receiver)</td>
<td>注销receiver</td>
</tr>
<tr>
<td>LocalBroadcastManager.getInstance(context).sendBroadcast(new Intent(HELLO_ACTON))</td>
<td>发送异步广播</td>
</tr>
<tr>
<td>LocalBroadcastManager.getInstance(context).sendBroadcastSync(new Intent())</td>
<td>发送同步广播</td>
</tr>
</tbody>
</table>
<h2 id="定向广播"><a href="#定向广播" class="headerlink" title="定向广播"></a>定向广播</h2><ul>
<li>定向广播是普通广播的一个变体</li>
<li>定向广播使用了intent-filter的一个特性，通过在Intent中设置ComponentName来显示指定接收器</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDirectedBroadcast</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span>String className<span class="token punctuation">,</span>String action<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
`
</code></pre>
<h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><h3 id="自定义权限"><a href="#自定义权限" class="headerlink" title="自定义权限"></a>自定义权限</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.permission.MYRECEIVER<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>protectionLevel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dangerous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="申明权限"><a href="#申明权限" class="headerlink" title="申明权限"></a>申明权限</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.permission.MYRECEIVER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<h3 id="发送权限"><a href="#发送权限" class="headerlink" title="发送权限"></a>发送权限</h3><pre><code>sendBroadcast(intent, &quot;com.android.study.permission.MYRECEIVER&quot;);
</code></pre><h3 id="静态注册带权限的广播接受者"><a href="#静态注册带权限的广播接受者" class="headerlink" title="静态注册带权限的广播接受者"></a>静态注册带权限的广播接受者</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.receiver.PermissionBroadcastReceiver<span class="token punctuation">"</span></span>  
     <span class="token attr-name"><span class="token namespace">android:</span>permission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.permission.MYRECEIVER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    ...  
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="动态注册带权限的广播接受者"><a href="#动态注册带权限的广播接受者" class="headerlink" title="动态注册带权限的广播接受者"></a>动态注册带权限的广播接受者</h3><pre class=" language-java"><code class="language-java">MyBroadcastReceiver receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"android.intent.action.TIME_TICK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> filter<span class="token punctuation">,</span><span class="token string">"com.android.permission.MYRECEIVER"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="系统广播"><a href="#系统广播" class="headerlink" title="系统广播"></a>系统广播</h2><ol>
<li><p>BATTERY_CHANGED_ACTION<br> 说明:充电状态，或者电池的电量发生变化。<br> action:”android.intent.action.BATTERY_CHANGED”</p>
</li>
<li><p>BOOT_COMPLETED_ACTION<br> 说明:在系统启动后，这个动作被广播一次（只有一次）。<br> action:”android.intent.action.BOOT_COMPLETED”</p>
</li>
<li><p>CALL_FORWARDING_STATE_CHANGED_ACTION<br> 说明:语音电话的呼叫转移状态已经改变。<br> action:”android.intent.action.CFF”</p>
</li>
<li><p>CONFIGURATION_CHANGED_ACTION<br> 说明:设备的配置信息已经改变<br> action:”android.intent.action.CONFIGURATION_CHANGED”</p>
</li>
<li><p>DATA_ACTIVITY_STATE_CHANGED_ACTION<br> 说明:电话的数据活动(data activity)状态（即收发数据的状态）已经改变。<br> action:”android.intent.action.DATA_ACTIVITY”</p>
</li>
<li><p>DATA_CONNECTION_STATE_CHANGED_ACTION<br> 说明:电话的数据连接状态已经改变。<br> action:”android.intent.action.DATA_STATE”</p>
</li>
<li><p>DATE_CHANGED_ACTION<br> 说明:日期被改变。<br> action:”android.intent.action.DATE_CHANGED”</p>
</li>
<li><p>FOTA_CANCEL_ACTION<br> 说明:取消所有被挂起的 (pending) 更新下载。<br> action:”android.server.checkin.FOTA_CANCEL”</p>
</li>
<li><p>FOTA_INSTALL_ACTION<br> 说明:更新已经被确认，马上就要开始安装。<br> action:”android.server.checkin.FOTA_INSTALL”</p>
</li>
<li><p>FOTA_READY_ACTION<br>说明:更新已经被下载，可以开始安装。<br>action:”android.server.checkin.FOTA_READY”</p>
</li>
<li><p>FOTA_RESTART_ACTION<br>说明:恢复已经停止的更新下载。<br>action:”android.server.checkin.FOTA_RESTART”</p>
</li>
<li><p>FOTA_UPDATE_ACTION<br>说明:通过 OTA 下载并安装操作系统更新。<br>action:”android.server.checkin.FOTA_UPDATE”</p>
</li>
<li><p>MEDIABUTTON_ACTION<br>说明:用户按下了“Media Button”。<br>action:”android.intent.action.MEDIABUTTON”</p>
</li>
<li><p>MEDIA_BAD_REMOVAL_ACTION<br>说明:扩展介质（扩展卡）已经从 SD 卡插槽拔出，但是挂载点 (mount point) 还没解除 (unmount)。<br>action:”android.intent.action.MEDIA_BAD_REMOVAL”</p>
</li>
<li><p>MEDIA_EJECT_ACTION<br>说明:用户想要移除扩展介质（拔掉扩展卡）。<br>action:”android.intent.action.MEDIA_EJECT”</p>
</li>
<li><p>MEDIA_MOUNTED_ACTION<br>说明:扩展介质被插入，而且已经被挂载。<br>action:”android.intent.action.MEDIA_MOUNTED”</p>
</li>
<li><p>MEDIA_REMOVED_ACTION<br>说明:扩展介质被移除。<br>action:”android.intent.action.MEDIA_REMOVED”</p>
</li>
<li><p>MEDIA_SCANNER_FINISHED_ACTION<br>说明:已经扫描完介质的一个目录。<br>action:”android.intent.action.MEDIA_SCANNER_FINISHED”</p>
</li>
<li><p>MEDIA_SCANNER_STARTED_ACTION<br>说明:开始扫描介质的一个目录。<br>action:”android.intent.action.MEDIA_SCANNER_STARTED”</p>
</li>
<li><p>MEDIA_SHARED_ACTION<br>说明:扩展介质的挂载被解除 (unmount)，因为它已经作为 USB 大容量存储被共享。<br>action:”android.intent.action.MEDIA_SHARED”</p>
</li>
<li><p>MEDIA_UNMOUNTED_ACTION<br>说明:扩展介质存在，但是还没有被挂载 (mount)。<br>action:”android.intent.action.MEDIA_UNMOUNTED”</p>
</li>
<li><p>MESSAGE_WAITING_STATE_CHANGED_ACTION<br>说明:电话的消息等待（语音邮件）状态已经改变。<br>action:”android.intent.action.MWI”</p>
</li>
<li><p>NETWORK_TICKLE_RECEIVED_ACTION<br>说明:设备收到了新的网络 “tickle” 通知。<br>action:”android.intent.action.NETWORK_TICKLE_RECEIVED”</p>
</li>
<li><p>PACKAGE_ADDED_ACTION<br>说明:设备上新安装了一个应用程序包。<br>action:”android.intent.action.PACKAGE_ADDED”</p>
</li>
<li><p>PACKAGE_REMOVED_ACTION<br>说明:设备上删除了一个应用程序包。<br>action:”android.intent.action.PACKAGE_REMOVED”</p>
</li>
<li><p>PHONE_STATE_CHANGED_ACTION<br>说明:电话状态已经改变。<br>action:”android.intent.action.PHONE_STATE”</p>
</li>
<li><p>PROVIDER_CHANGED_ACTION<br>说明:更新将要（真正）被安装。<br>action:”android.intent.action.PROVIDER_CHANGED”</p>
</li>
<li><p>PROVISIONING_CHECK_ACTION<br>说明:要求 polling of provisioning service 下载最新的设置。<br>action:”android.intent.action.PROVISIONING_CHECK”</p>
</li>
<li><p>SCREEN_OFF_ACTION<br>说明:屏幕被关闭。<br>action:”android.intent.action.SCREEN_OFF”</p>
</li>
<li><p>SCREEN_ON_ACTION<br>说明:屏幕已经被打开。<br>action:”android.intent.action.SCREEN_ON”</p>
</li>
<li><p>SERVICE_STATE_CHANGED_ACTION<br>说明:电话服务的状态已经改变。<br>action:”android.intent.action.SERVICE_STATE”</p>
</li>
<li><p>SIGNAL_STRENGTH_CHANGED_ACTION<br>说明:电话的信号强度已经改变。<br>action:”android.intent.action.SIG_STR”</p>
</li>
<li><p>STATISTICS_REPORT_ACTION<br>说明:要求 receivers 报告自己的统计信息。<br>action:”android.intent.action.STATISTICS_REPORT”</p>
</li>
<li><p>STATISTICS_STATE_CHANGED_ACTION<br>说明:统计信息服务的状态已经改变。<br>action:”android.intent.action.STATISTICS_STATE_CHANGED”</p>
</li>
<li><p>TIMEZONE_CHANGED_ACTION<br>说明:时区已经改变。<br>action:”android.intent.action.TIMEZONE_CHANGED”</p>
</li>
<li><p>TIME_CHANGED_ACTION<br>说明:时间已经改变（重新设置）。<br>action:”android.intent.action.TIME_SET”</p>
</li>
<li><p>TIME_TICK_ACTION<br>说明:当前时间已经变化（正常的时间流逝）。<br>action:”android.intent.action.TIME_TICK”</p>
</li>
<li><p>UMS_CONNECTED_ACTION<br>说明:设备进入 USB 大容量存储模式。<br>action:”android.intent.action.UMS_CONNECTED”</p>
</li>
<li><p>UMS_DISCONNECTED_ACTION<br>说明:设备从 USB 大容量存储模式退出。<br>action:”android.intent.action.UMS_DISCONNECTED”</p>
</li>
<li><p>WALLPAPER_CHANGED_ACTION<br>说明:系统的墙纸已经改变。<br>action:”android.intent.action.WALLPAPER_CHANGED”</p>
</li>
<li><p>XMPP_CONNECTED_ACTION<br>说明:XMPP 连接已经被建立。<br>action:”android.intent.action.XMPP_CONNECTED”</p>
</li>
<li><p>XMPP_DISCONNECTED_ACTION<br>说明:XMPP 连接已经被断开。<br>action:”android.intent.action.XMPP_DI说明:</p>
</li>
</ol>
<h3 id="无法收到系统广播"><a href="#无法收到系统广播" class="headerlink" title="无法收到系统广播"></a>无法收到系统广播</h3><ul>
<li>android3.1以后，首次安装未启动或者用户强制force stop后，应用无法监听到系统广播</li>
<li>在Android3.1以后版本添加了标志<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>和<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>，用于区分发送广播时是否启动激活那些未启动过或者被用户<code>force stop</code>的应用组件。当两个Flag都不设置或都设置的时候，默认操作是<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>。</li>
<li>系统向所有的Intent的广播添加了<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>标志。它这样做是为了防止广播无意中的或不必要地开启组件的stoppped应用程序的后台服务。这样可以优化系统性能，提高安全性。</li>
<li>用户给自定义的广播Intent添加<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>，用于启动stop状态的应用组件。但是系统自带的广播intent，我们无能为力。</li>
<li>部分广播需要动态注册才有效，如时间变化等</li>
<li>部分广播需要设置addDataScheme，mediaScanner相关的需要设置<code>file</code>，package相关的需要设置<code>package</code>,.sms相关的需要设置<code>sms</code></li>
</ul>
<p><strong><a href="http://developer.android.com/about/versions/android-3.1.html#launchcontrols" target="_blank" rel="external">android官方API说明</a></strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/26744163/" target="_blank" rel="external">Android开发进阶从小工到专家</a><br><a href="http://www.cnblogs.com/albert1017/archive/2012/07/23/2605048.html" target="_blank" rel="external">BroadcastReceiver应用详解</a><br><a href="http://blog.csdn.net/huliang7777/article/details/8424787?utm_source=tuicool" target="_blank" rel="external">BroadcastReceiver中使用自定义Permission</a><br><a href="http://blog.csdn.net/ocean2006/article/details/40806819" target="_blank" rel="external">Android静态注册无法接受系统广播问题</a><br><a href="http://blog.csdn.net/pkxiuluo01/article/details/7388777" target="_blank" rel="external">android.intent.action大全</a><br><a href="http://blog.csdn.net/huangxiaohu_coder/article/details/7106014" target="_blank" rel="external">Android的BroadcastReciver收不到Broadcast（系统广播）的原因之一</a><br><a href="https://book.douban.com/subject/25911738/" target="_blank" rel="external">Android编程实战</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;广播的分类&quot;&gt;&lt;a href=&quot;#广播的分类&quot; class=&quot;headerlink&quot; title=&quot;广播的分类&quot;&gt;&lt;/a&gt;广播的分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通广播&lt;/li&gt;
&lt;li&gt;有序广播&lt;/li&gt;
&lt;li&gt;粘性广播&lt;/li&gt;
&lt;li&gt;本地广播&lt;/li&gt;
&lt;li&gt;定向广播&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ContentProvider的使用</title>
    <link href="https://luoweiguang.github.io/2016/08/23/ContentProvider%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/08/23/ContentProvider的使用/</id>
    <published>2016-08-23T14:00:00.000Z</published>
    <updated>2017-11-14T17:35:51.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>1.ContentProvider为存储和读取数据提供了统一的接口<br>2.使用ContentProvider，应用程序可以实现数据共享<br>3.android内置的许多数据都是使用ContentProvider形式，供开发者调用的(如视频，音频，图片，通讯录等)</p>
<a id="more"></a>
<p>了解<a href="/2016/04/19/URI、URL/">URI</a></p>
<h2 id="UriMatcher"><a href="#UriMatcher" class="headerlink" title="UriMatcher"></a>UriMatcher</h2><p>UriMatcher用于匹配Uri路径</p>
<ol>
<li>创建URiMatcher<pre><code>UriMatcher  sMatcher = new UriMatcher(UriMatcher.NO_MATCH);
</code></pre></li>
<li>设置路径及匹配码<pre><code>addURI(String authority, String path, int code)
</code></pre></li>
</ol>
<ul>
<li>自定义ContentProvider类的AUTHORITY字符串</li>
<li>path表示需要匹配的路径</li>
<li>code表示匹配码<strong>(必须大于零)</strong>，匹配则返回的值<br><strong>用#代表匹配任意数字，用*来匹配任意文本</strong></li>
</ul>
<p><strong>例子</strong></p>
<pre><code>sMatcher.addURI(&quot;contacts&quot;, &quot;person&quot;,1);
</code></pre><ol>
<li>进行匹配返回匹配码<pre><code>match(Uri uri)
</code></pre></li>
</ol>
<p><strong>例子</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> code <span class="token operator">=</span> sMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://contacts/person/10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="ContentUris"><a href="#ContentUris" class="headerlink" title="ContentUris"></a>ContentUris</h2><p>ContentUris类用于获取Uri路径后面的ID部分</p>
<ul>
<li>withAppendedId(Uri contentUri, long id)用于为路径加上ID部分：</li>
</ul>
<pre><code>Uri uri = Uri.parse(&quot;content://contacts/person&quot;)
Uri resultUri = ContentUris.withAppendedId(uri, 10);
</code></pre><ul>
<li>parseId(Uri contentUri)方法用于从路径中获取ID部分：</li>
</ul>
<pre><code>Uri uri = Uri.parse(&quot;content://contacts/person/10&quot;)
long personid = ContentUris.parseId(uri);//获取的结果为:10
</code></pre><h2 id="使用ContentProvider共享数据"><a href="#使用ContentProvider共享数据" class="headerlink" title="使用ContentProvider共享数据"></a>使用ContentProvider共享数据</h2><p>继承于ContentProvider实现以下方法</p>
<ul>
<li>public void onCreate() 该方法在ContentProvider创建后调用，当第一次访问ContentProvider时，该ContentProvider会被创建出来，并立即回调该onCreate()方法</li>
<li>public Cursor query(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder) 该方法用于返回当前Uri所代表的数据。<ul>
<li>projection 要查询出来的列名，相当于select语句select关键字后面的部分</li>
<li>selection 查询条件子句，相当于select语句where关键字后面的部分，在条件子句中允许使用占位符“？”</li>
<li>selectionArgs 用于为selection子句中的占位符传值</li>
<li>sortOrder 表示排序方式，相当于select语句order by关键字后面的部分</li>
</ul>
</li>
<li>public String getType(Uri uri) 该方法用于返回当前Uri所代表数据的MIME类型。<ul>
<li>如果要操作的数据属于非集合类型数据，那么MIME类型字符串应该以vnd.android.cursor.item/开头</li>
<li>如果操作的数据属于集合类型，那么MIME类型字符串应该以vnd.android.cursor.dir/开头</li>
</ul>
</li>
<li>public Uri insert(Uri uri, ContentValues values) 根据当前Uri插入values对应的数据<ul>
<li>values代表要插入的数据</li>
</ul>
</li>
<li>public int delete(Uri uri, String selection, String[] selectionArgs) 根据当前Uri删除对应的数据<ul>
<li>selection 查询条件子句，相当于where关键字后面的部分，在条件子句中允许使用占位符“？”</li>
<li>selectionArgs 用于为selection子句中的占位符传值</li>
</ul>
</li>
<li>public int update(Uri uri, ContentValues values, String selection,String[] selectionArgs) 根据当前Uri修改对应的数据<ul>
<li>values 要修改的值，对应与set关键字后面的字段</li>
<li>selection 查询条件子句，相当于where关键字后面的部分，在条件子句中允许使用占位符“？”</li>
<li>selectionArgs 用于为selection子句中的占位符传值 </li>
</ul>
</li>
</ul>
<p>当使用查询语句要返回Cursor对象时，可以使用<strong>MatrixCursor</strong>或继承<strong>MatrixCursor</strong>实现自己的Cursor来创建返回的Cursor对象</p>
<h2 id="使用ContentResolver操作ContentProvider中的数据"><a href="#使用ContentResolver操作ContentProvider中的数据" class="headerlink" title="使用ContentResolver操作ContentProvider中的数据"></a>使用ContentResolver操作ContentProvider中的数据</h2><p>使用<code>getContentResolver();</code>获得ContentResolver对象</p>
<ul>
<li>public Uri insert(Uri uri, ContentValues values) 该方法用于往ContentProvider添加数据。</li>
<li>public int delete(Uri uri, String selection, String[] selectionArgs) 该方法用于从ContentProvider删除数据。</li>
<li>public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) 该方法用于更新ContentProvider中的数据。</li>
<li>public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) 该方法用于从ContentProvider中获取数据。</li>
</ul>
<h2 id="监听ContentProvider中数据的变化"><a href="#监听ContentProvider中数据的变化" class="headerlink" title="监听ContentProvider中数据的变化"></a>监听ContentProvider中数据的变化</h2><ol>
<li><p>设置监听器</p>
<pre><code>getContentResolver().registerContentObserver(uri,true,new ContentObserver(new Handler()) {
         @Override public void onChange(boolean selfChange)
         {
             super.onChange(selfChange);
         }

     });
</code></pre><p>其中第二个参数为true时，只要uri是其子层也会被通知，如果为false，则只有uri完全匹配才行。</p>
</li>
<li>通知数据发生变化<br>在自己ContentProvider类的方法中调用。<pre><code>getContext().getContentResolver().notifyChange(uri,null);
</code></pre></li>
</ol>
<h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><p>ContentProvider通过在AndroidManifest中设置<strong>读权限</strong>（android:readPermission）<strong>写权限</strong>（android:writePermission）<strong>读写权限</strong>（android:permission）(但优先级没前面两个高)来控制权限，通过<strong>path-permission</strong>子标签能进行更详细的控制，<strong>grant-uri-permission</strong>子标签用于当一个有权限访问的组件调用一个无权限访问的组件访问时ContentProvider可以访问</p>
<p>具体属性请看<a href="/2016/07/16/AndroidManifest.xml文件详解/#provider">provider属性详解</a></p>
<h2 id="AsyncQueryHandler"><a href="#AsyncQueryHandler" class="headerlink" title="AsyncQueryHandler"></a>AsyncQueryHandler</h2><pre><code>// 定义一个handler，采用的是匿名类的方式，只处理query，因此只重写了onQueryComplete函数：
queryHandler = new AsyncQueryHandler(this.getContentResolver()){ 
// 传入的是一个ContentResolver实例，所以必须在OnCreate后实例化该Handler类
@Override
protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
        // 在这里你可以获得一个cursor和你传入的附加的token和cookie。
        // 该方法在当前线程下（如果传入的是默认的Looper话），可以自由设定UI信息
    }
};
</code></pre><p>　调用时只需要调用</p>
<pre><code>startQuery(int token, Object cookie, ContentURI uri,
String[] projection, String selection, String[] selectionArgs, String sortOrder)
</code></pre><p>函数即可：</p>
<p>例如：</p>
<pre><code>queryHandler.startQuery(token, cookie, uri, projection, selection, selectionArgs, sortBy);
</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.sina.com.cn/s/blog_9f233c070101euqx.html" target="_blank" rel="external">Android ContentProvider和Uri详解 (绝对全面)</a><br><a href="http://blog.sina.com.cn/s/blog_6c1b75e70100sxiv.html" target="_blank" rel="external">一些ContentProvider和 AsyncQueryHandler 联合使用技巧 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;1.ContentProvider为存储和读取数据提供了统一的接口&lt;br&gt;2.使用ContentProvider，应用程序可以实现数据共享&lt;br&gt;3.android内置的许多数据都是使用ContentProvider形式，供开发者调用的(如视频，音频，图片，通讯录等)&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio的使用</title>
    <link href="https://luoweiguang.github.io/2016/08/10/Android%20Studio%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/08/10/Android Studio的使用/</id>
    <published>2016-08-10T14:00:00.000Z</published>
    <updated>2017-11-14T17:44:56.236Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>帮助</td>
<td>F1</td>
</tr>
<tr>
<td>查找文件所在目录位置</td>
<td>Alt+F1</td>
</tr>
<tr>
<td>快速打开或隐藏工程面板</td>
<td>Alt+1</td>
</tr>
<tr>
<td>打开设置对话框</td>
<td>Ctrl+Alt+S</td>
</tr>
<tr>
<td>跳转到导航栏</td>
<td>Alt+Home</td>
</tr>
<tr>
<td>光标返回编辑框</td>
<td>Esc</td>
</tr>
<tr>
<td>光标返回编辑框,关闭无用的窗口</td>
<td>Shift+Esc</td>
</tr>
<tr>
<td>关闭标签页</td>
<td>Shift+Click</td>
</tr>
<tr>
<td>把焦点从编辑框移到最近使用的工具窗口</td>
<td>F12</td>
</tr>
<tr>
<td>同步</td>
<td>Ctrl+Alt+Y</td>
</tr>
<tr>
<td>打开或关闭列选择模式</td>
<td>Alt+Shift+Insert</td>
</tr>
<tr>
<td>打开当前项目/模块属性</td>
<td>Ctrl+Alt+Shift+S</td>
</tr>
<tr>
<td>查看文件的变更历史</td>
<td>Alt+Shift+C</td>
</tr>
<tr>
<td>运行</td>
<td>Ctrl+Shift+F10</td>
</tr>
<tr>
<td>debug运行</td>
<td>Ctrl+Shift+F9</td>
</tr>
<tr>
<td>资源管理器打开文件夹</td>
<td>Ctrl+Alt+F12</td>
</tr>
<tr>
<td>切换器</td>
<td>Ctrl+Tab</td>
</tr>
<tr>
<td>版本控制操作弹窗</td>
<td>Alt+`</td>
</tr>
</tbody>
</table>
<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>复制当前行或选中的内容</td>
<td>Ctrl+C</td>
</tr>
<tr>
<td>粘贴当前行或选中的内容</td>
<td>Ctrl+D</td>
</tr>
<tr>
<td>剪切当前行或选中的内容</td>
<td>Ctrl+X</td>
</tr>
<tr>
<td>删除行</td>
<td>Ctrl+Y</td>
</tr>
<tr>
<td>倒退</td>
<td>Ctrl+Z</td>
</tr>
<tr>
<td>向前</td>
<td>Ctrl+Shift+Z</td>
</tr>
<tr>
<td>自动修正</td>
<td>Alt+Enter</td>
</tr>
<tr>
<td>格式化代码</td>
<td>Ctrl+Alt+L</td>
</tr>
<tr>
<td>将选中的代码进行自动缩进编排</td>
<td>Ctrl+Alt+I</td>
</tr>
<tr>
<td>优化导入的类和包</td>
<td>Ctrl+Alt+O</td>
</tr>
<tr>
<td>自动生成代码</td>
<td>Alt+Insert</td>
</tr>
<tr>
<td>选最近使用的剪贴板内容并插入</td>
<td>Ctrl+Shift+V</td>
</tr>
<tr>
<td>简单粘贴</td>
<td>Ctrl+Alt+Shift+V</td>
</tr>
<tr>
<td>选最近使用的剪贴板内容并插入</td>
<td>Ctrl+Shift+Insert</td>
</tr>
<tr>
<td>在当前行的上面插入新行，并移动光标到新行</td>
<td>Ctrl+Enter</td>
</tr>
<tr>
<td>在当前行的下面插入新行，并移动光标到新行</td>
<td>Shift+Enter</td>
</tr>
<tr>
<td>自动代码</td>
<td>Ctrl+J</td>
</tr>
<tr>
<td>把选中的代码放在try{}、if{}、else{}里</td>
<td>Ctrl+Alt+T</td>
</tr>
<tr>
<td>竖编辑模式</td>
<td>Shift+Alt+Insert</td>
</tr>
<tr>
<td>注释 //</td>
<td>Ctrl+ /</td>
</tr>
<tr>
<td>注释 /…/</td>
<td>Ctrl+Shift+ /</td>
</tr>
<tr>
<td>合并成一行</td>
<td>Ctrl+Shift+J</td>
</tr>
<tr>
<td>跳转到下/上一个错误语句处</td>
<td>F2/Shift+F2</td>
</tr>
<tr>
<td>跳转到上次编辑的地方</td>
<td>Ctrl+Shift+Back</td>
</tr>
<tr>
<td>类名自动完成</td>
<td>Ctrl+Alt+Space</td>
</tr>
<tr>
<td>内容向上/下移动</td>
<td>Shift+Alt+Up/Down</td>
</tr>
<tr>
<td>方法向上/下移动</td>
<td>Ctrl+Shift+Up/Down</td>
</tr>
<tr>
<td>大小写切换</td>
<td>Ctrl+Shift+U</td>
</tr>
<tr>
<td>代码标签输入完成后，按Tab，生成代码</td>
<td>Tab</td>
</tr>
<tr>
<td>按单词删除</td>
<td>Ctrl+Backspace</td>
</tr>
<tr>
<td>语句完成</td>
<td>Ctrl+Shift+Enter</td>
</tr>
<tr>
<td>用动态模板环绕</td>
<td>Ctrl+Alt+J</td>
</tr>
<tr>
<td>展开所有方法</td>
<td>Ctrl+Shift++</td>
</tr>
<tr>
<td>收缩所有方法</td>
<td>Ctrl+Shift+-</td>
</tr>
<tr>
<td>展开当前方法</td>
<td>Ctrl+Alt++</td>
</tr>
<tr>
<td>收缩当前方法</td>
<td>Ctrl+Alt+-</td>
</tr>
<tr>
<td>最近剪贴板的内容列表</td>
<td>Ctrl+Shift+V</td>
</tr>
<tr>
<td>查看当前方法的申明</td>
<td>Alt+Q</td>
</tr>
<tr>
<td>查看当前类的申明</td>
<td>连续两次Alt+Q</td>
</tr>
<tr>
<td>根据选中内容，选择多行</td>
<td>Alt+J</td>
</tr>
<tr>
<td>列选择模式</td>
<td>Alt+Mouse</td>
</tr>
<tr>
<td>移除包裹代码</td>
<td>Ctrl+Shift+Delete</td>
</tr>
</tbody>
</table>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示当前文件的结构</td>
<td>Ctrl+F12</td>
</tr>
<tr>
<td>显示类继承结构图</td>
<td>Ctrl+H</td>
</tr>
<tr>
<td>显示注释文档</td>
<td>Ctrl+Q</td>
</tr>
<tr>
<td>方法参数提示</td>
<td>Ctrl+P</td>
</tr>
<tr>
<td>打开当前类的父类或者实现的接口</td>
<td>Ctrl+U</td>
</tr>
<tr>
<td>切换代码视图</td>
<td>Alt+Left/Righ</td>
</tr>
<tr>
<td>返回上次编辑的位置</td>
<td>Ctrl+Alt+Left/Right</td>
</tr>
<tr>
<td>在方法间快速移动定位</td>
<td>Alt+Up/Down</td>
</tr>
<tr>
<td>快速打开光标处的类或方法</td>
<td>Ctrl+B</td>
</tr>
<tr>
<td>选中代码，连续按会有其他效果</td>
<td>Ctrl+W</td>
</tr>
<tr>
<td>取消选择光标所在词</td>
<td>Ctrl+Shift+W</td>
</tr>
<tr>
<td>高亮错误或警告快速定位</td>
<td>F2或Shift+F2</td>
</tr>
<tr>
<td>在方法间快速移动定位</td>
<td>Alt+Up/Down</td>
</tr>
<tr>
<td>代码行级移动</td>
<td>Alt+Shift++Up/Down</td>
</tr>
<tr>
<td>复制引用，必须选择类名</td>
<td>Ctrl+Alt+Shift+C</td>
</tr>
<tr>
<td>复制路径</td>
<td>Ctrl+Shift+C</td>
</tr>
<tr>
<td>定位行</td>
<td>Ctrl+G</td>
</tr>
<tr>
<td>方法调用层级弹窗</td>
<td>Ctrl+Alt+H</td>
</tr>
<tr>
<td>定义快速查找</td>
<td>Ctrl+Shift+I</td>
</tr>
</tbody>
</table>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>在当前窗口查找文本</td>
<td>Ctrl+F</td>
</tr>
<tr>
<td>在指定环境下查找文本</td>
<td>Ctrl+Shift+F</td>
</tr>
<tr>
<td>向下查找关键字出现位置</td>
<td>F3</td>
</tr>
<tr>
<td>向上一个关键字出现位置</td>
<td>Shift+F3</td>
</tr>
<tr>
<td>在当前窗口替换文本</td>
<td>Ctrl+R</td>
</tr>
<tr>
<td>在指定窗口替换文本</td>
<td>Ctrl+Shift+R</td>
</tr>
<tr>
<td>查找类</td>
<td>Ctrl+N</td>
</tr>
<tr>
<td>查找文件</td>
<td>Ctrl+Shift+N</td>
</tr>
<tr>
<td>查找项目中的方法或变量</td>
<td>Ctrl+Shift+Alt+N</td>
</tr>
<tr>
<td>查找变量的来源</td>
<td>Ctrl+B</td>
</tr>
<tr>
<td>快速打开光标处的类或方法</td>
<td>Ctrl+Alt+B</td>
</tr>
<tr>
<td>跳转到类或方法实现处</td>
<td>Ctrl+Shift+B</td>
</tr>
<tr>
<td>最近打开的文件列表</td>
<td>Ctrl+E</td>
</tr>
<tr>
<td>快速查找，效果和Ctrl+F相同</td>
<td>Alt+F3</td>
</tr>
<tr>
<td>跳转至定义变量的位置</td>
<td>F4</td>
</tr>
<tr>
<td>查询当前元素在工程中的引用</td>
<td>Alt+F7</td>
</tr>
<tr>
<td>查询当前元素在当前文件中的引用，然后按F3可以选择</td>
<td>Ctrl+F7</td>
</tr>
<tr>
<td>选中查询当前元素在工程中的引用</td>
<td>Ctrl+Alt+F7</td>
</tr>
<tr>
<td>高亮显示匹配的字符，按Esc高亮消失</td>
<td>Ctrl+Shift+F7</td>
</tr>
<tr>
<td>弹出显示查找内容</td>
<td>Ctrl+Shift+O</td>
</tr>
<tr>
<td>快速跳转搜索结果</td>
<td>Ctrl+Alt+Up/Down</td>
</tr>
<tr>
<td>高级搜索、搜索结构</td>
<td>Ctrl+Shift+S</td>
</tr>
<tr>
<td>查找Android Studio的菜单选项</td>
<td>Ctrl+Shift+A</td>
</tr>
</tbody>
</table>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>复制</td>
<td>F5</td>
</tr>
<tr>
<td>移动</td>
<td>F6</td>
</tr>
<tr>
<td>安全删除</td>
<td>Alt+Delete</td>
</tr>
<tr>
<td>转到父类</td>
<td>Ctrl+U</td>
</tr>
<tr>
<td>重写父类的方法</td>
<td>Ctrl+O</td>
</tr>
<tr>
<td>实现方法</td>
<td>Ctrl+I</td>
</tr>
<tr>
<td>内联</td>
<td>Ctrl+Alt+N</td>
</tr>
<tr>
<td>弹出重构菜单</td>
<td>Ctrl+Alt+Shift+T</td>
</tr>
<tr>
<td>重构-重命名</td>
<td>Shift+F6</td>
</tr>
<tr>
<td>提取代码组成方法</td>
<td>Ctrl+Alt+M</td>
</tr>
<tr>
<td>将变量更改为常量</td>
<td>Ctrl+Alt+C</td>
</tr>
<tr>
<td>定义变量引用当前对象或者方法的返回值</td>
<td>Ctrl+Alt+V</td>
</tr>
<tr>
<td>将局部变量更改为类的成员变量</td>
<td>Ctrl+Alt+F</td>
</tr>
<tr>
<td>将变量更改为方法的参数</td>
<td>Ctrl+Alt+P</td>
</tr>
</tbody>
</table>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>跳到下一步</td>
<td>F8</td>
</tr>
<tr>
<td>跳出函数、跳到下一个断点</td>
<td>Shift+F8</td>
</tr>
<tr>
<td>强制跳出函数</td>
<td>Alt+Shift+F8</td>
</tr>
<tr>
<td>进入代码</td>
<td>F7</td>
</tr>
<tr>
<td>智能进入代码</td>
<td>Shift+F7</td>
</tr>
<tr>
<td>强制进入代码</td>
<td>Alt+Shift+F7</td>
</tr>
<tr>
<td>运行至光标处</td>
<td>Alt+F9</td>
</tr>
<tr>
<td>强制运行至光标处</td>
<td>Ctrl+Alt+F9</td>
</tr>
<tr>
<td>停止运行</td>
<td>Ctrl+F2</td>
</tr>
<tr>
<td>计算变量值</td>
<td>Alt+F8</td>
</tr>
</tbody>
</table>
<h3 id="VCS"><a href="#VCS" class="headerlink" title="VCS"></a>VCS</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>VCS操作菜单</td>
<td>Alt+ ~</td>
</tr>
<tr>
<td>提交更改</td>
<td>Ctrl+K</td>
</tr>
<tr>
<td>更新项目</td>
<td>Ctrl+T</td>
</tr>
<tr>
<td>显示变化</td>
<td>Ctrl+Alt+Shift+D</td>
</tr>
</tbody>
</table>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td>打上或取消标签</td>
<td>F11</td>
</tr>
<tr>
<td>带字母或者数字的标签</td>
<td>Ctrl+F11</td>
</tr>
<tr>
<td>展示标签</td>
<td>Shift+F11</td>
</tr>
<tr>
<td>如果设置数字标签则跳转到指定标志行</td>
<td>Ctrl+数字</td>
</tr>
</tbody>
</table>
<h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="使用Eclipse的快捷键方案"><a href="#使用Eclipse的快捷键方案" class="headerlink" title="使用Eclipse的快捷键方案"></a>使用Eclipse的快捷键方案</h3><p>设置 File-&gt;Settings 或Ctrl + Alt + S 找到keymap ，右侧找到 keymaps，选择Eclipse</p>
<h3 id="设置界面的字体和大小"><a href="#设置界面的字体和大小" class="headerlink" title="设置界面的字体和大小"></a>设置界面的字体和大小</h3><p>设置 File-&gt;Settings 或Ctrl + Alt + S 找到Appearance &amp; Behavior -&gt;Appearance ,右侧勾选Override default fonts by(not recommended),再选择字体大小即可</p>
<h3 id="设置编辑器的字体和大小"><a href="#设置编辑器的字体和大小" class="headerlink" title="设置编辑器的字体和大小"></a>设置编辑器的字体和大小</h3><p>设置 File-&gt;Settings 或Ctrl + Alt + S 找到Editor ——&gt;Colors&amp;Fonts——&gt;Font，右侧点击Save As新建一份自己的设置Editor Font即可</p>
<h3 id="设置行宽"><a href="#设置行宽" class="headerlink" title="设置行宽"></a>设置行宽</h3><p>设置 File-&gt;Settings 或Ctrl + Alt + S 找到Editor-&gt;Code Style, 右侧找到Right margin (columns)，默认是100</p>
<h3 id="设置代码格式化风格"><a href="#设置代码格式化风格" class="headerlink" title="设置代码格式化风格"></a>设置代码格式化风格</h3><p>设置 File-&gt;Settings 或Ctrl + Alt + S 找到Editor-&gt;Code Style-&gt;java,右侧找到Wrapping and Brances设置</p>
<p>以下为个人使用的设置(大括号换行且if有括号)</p>
<p><img src="/img/20160810000001.png" alt=""></p>
<h3 id="设置LogCat颜色"><a href="#设置LogCat颜色" class="headerlink" title="设置LogCat颜色"></a>设置LogCat颜色</h3><p>设置 File-&gt;Settings 或Ctrl + Alt + S 找到 Editor -&gt; Colors &amp;Fonts -&gt; Android Logcat 或在上面的搜索框中输入Logcat 点中Verbose , Info, Debug等选项，然后在后面将Use Inberited attributes 去掉勾选 再将 Foreground 前的复选框选上，就可以双击后面的颜色</p>
<p>对应色值（自用）</p>
<table>
<thead>
<tr>
<th>Log级别</th>
<th>色值</th>
</tr>
</thead>
<tbody>
<tr>
<td>VERBOSE</td>
<td>BBBBBB</td>
</tr>
<tr>
<td>DEBUG</td>
<td>0070BB</td>
</tr>
<tr>
<td>INFO</td>
<td>48BB31</td>
</tr>
<tr>
<td>WARN</td>
<td>BBBB23</td>
</tr>
<tr>
<td>ERROR</td>
<td>FF4157</td>
</tr>
<tr>
<td>ASSERT</td>
<td>FF0006</td>
</tr>
</tbody>
</table>
<h3 id="LogCat换行显示"><a href="#LogCat换行显示" class="headerlink" title="LogCat换行显示"></a>LogCat换行显示</h3><p>点击右边图标第五个Use Soft Wraps即可</p>
<h3 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h3><p>行号位置右击点选Show Line Numbers</p>
<h3 id="创建自己的模板缩写"><a href="#创建自己的模板缩写" class="headerlink" title="创建自己的模板缩写"></a>创建自己的模板缩写</h3><p>设置 File-&gt;Settings 或Ctrl + Alt + S 找到 Editor-&gt;Live Templates，<br>右边找到一个绿色加号的图标，点击选择&gt;Live Template，这时有三个输入框，Abbreviation是模板的缩写，Description是描述，Template text输入要生成的模板代码，其中变量使用<code>$变量的名称$</code></p>
<p>例如</p>
<pre><code>Intent intent = new Intent($MainActivity$.this,$SecondActivity$.class);
startActivity(intent);
</code></pre><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><ul>
<li>ADB IDEA<br>使用快捷键ctrl + Shift + Alt + A</li>
<li>ECTranslation</li>
<li>Material Theme UI</li>
<li>GsonFormat<br>使用快捷键Alt + S 或者Code -&gt; Generate -&gt; GsonFormat</li>
<li>Android Material Design Icon Generator<br>File -&gt; New -&gt; Material Design Icon</li>
<li>Android Parcelable code generator<br>Code -&gt; Generate -&gt; parcelable</li>
<li>CodeGlance</li>
<li>Android Layout Id Converter<br>在layout文件右键点击Convert Android layout xml</li>
</ul>
<h2 id="使用小技巧"><a href="#使用小技巧" class="headerlink" title="使用小技巧"></a>使用小技巧</h2><ol>
<li><p>与分支比对（Compare With Branch (Git)）<br>● 描述：假如你的项目是使用git来管理的，你可以将当前文件或者文件夹与其他的分支进行比对。比较有用的是可以让你了解到你与主分支有多少差别。<br>● 调用：Menu → VCS → Git → Compare With Branch</p>
</li>
<li><p>与剪切板比对（Compare With Clipboard）<br>● 描述：将当前选中的部分与剪切板上的内容进行比对。<br>● 调用：右键选中的部分，在右键菜单中选择“Compare With Clipboard”</p>
</li>
<li><p>分析传入数据流（Analyze data flow to here）<br>● 描述：这个操作将会根据当前选中的变量、参数或者字段，分析出其传递到此处的路径。 当你进入某段陌生的代码，试图明白某个参数是怎么传递到此处的时候，这是一个非常有用的操作。<br>● 调用：Menu → Analyze → Analyze Data Flow to Here<br>● 快捷键：无，可以在设置中指定。<br>● 相反的操作：分析传出数据流（Analyze data flow from here），这个将会分析当前选中的变量往下传递的路径，直到结束。</p>
</li>
<li><p>堆栈追踪分析（Analyze Stacktrace）<br>● 描述： 这个操作读取一份堆栈追踪信息，并且使它像logcat中那样可以点击。当你从bug报告中或者终端复制了一份堆栈追踪，使用该操作可以很方便地调试。<br>● 调用：Menu → Analyze → Analyze Stacktrace<br>● 快捷键：无，可以在设置中指定。<br>● 更多：通过使用“ProGuard Unscramble Plugin”插件，也可以分析混淆过的堆栈追踪。</p>
</li>
<li><p>条件断点（Conditional Breakpoints）<br>● 描述：简单说，就是当设定的条件满足时，才会触发断点。你可以基于当前范围输入一个java布尔表达式，并且条件输入框内是支持代码补全的。<br>● 调用：右键需要填写表达式的断点，然后输入布尔表达式。</p>
</li>
<li><p>禁用断点（Disable Breakpoints）<br>● 这个操作将使得断点。当你有一个设置过复杂条件的断点或者是日志断点，当前不需要，但是下次又不用重新创建，该操作是很方便的。<br>● 调用：按住Alt，然后单击断点即可。</p>
</li>
<li><p>计算表达式（Evaluate Expression）<br>● 描述：这个操作可以用来查看变量的内容并且计算几乎任何有效的java表达式。需要注意的是，如果你修改了变量的状态，这个状态在你恢复代码执行后依然会保留。<br>● 快捷键：处在断点状态时，光标放在变量处，按Alt + F8，即可显示计算表达式对话框。</p>
</li>
<li><p>审查变量（Inspect Variable）<br>● 描述：该操作可以在不打开计算表达式对话框就能审查表达式的值。<br>● 快捷键：调试状态下，按住Alt键，然后单击表达式即可。</p>
</li>
<li><p>日志断点（Logging Breakpoints）<br>● 描述：这是一种打印日志而不是暂停的断点，当你想打印一些日志信息但是不想添加log代码后重新部署项目，这是一个非常有用的操作。<br>● 调用：在断点上右键，取消Suspend的勾选，然后勾选上Log evaluated Expression，并在输入框中输入你要打印的日志信息。</p>
</li>
<li><p>标记对象（Mark Object）<br>● 描述：当你在调试的时候，这个操作可以让你给某个特殊的对象添加一个标签，方便你后面很快地辨认。在调试时，当你从一堆相似的对象中查看某个对象是否和之前是一样的，这就是一个非常有用的操作。<br>● 调用：右键你需要标记的对象，选中Mark Object，输入标签；<br>● 快捷键：选中对象时，按F3(OS X)、F11(Windows/Linux)；</p>
</li>
<li><p>显示当前运行点（Show Execution Point）<br>● 描述：该操作会立刻把你的光标移回到当前debug处。<br>通常的情况是： 1. 你在某处触发了断点 2. 然后在文件中随意浏览 3. 直接调用这个快捷键，快速返回之前逐步调试的地方。<br>● 快捷键：（Debug时) Alt + F10；</p>
</li>
<li><p>终止进程（Stop Process）<br>● 描述：该操作会终止当前正在运行的任务。如果任务数量大于一，则显示一个列表供你选择。在终止调试或者中止编译的时候特别有用！<br>● 快捷键：Cmd + F2(OS X)、Ctrl + F2（Windows、Linux）；</p>
</li>
<li><p>临时断点（Temporary Breakpoints）<br>● 描述：通过该操作可以添加一个断点，这个断点会在第一次被命中的时候自动移除。<br>● 快捷键：Alt + 鼠标左键 点击代码左侧（鼠标）、Cmd + Alt + Shift + F8(OS X)、Ctrl + Alt + Shift + F8(Windows/Linux)</p>
</li>
<li><p>调用层级树弹窗（The Call Hierarchy Popup）<br>● 描述：该操作会给你展示 在一个方法的声明和调用之间所有可能的路径。<br>● 快捷键：Ctrl + Alt + H</p>
</li>
</ol>
<h2 id="常用模板缩写"><a href="#常用模板缩写" class="headerlink" title="常用模板缩写"></a>常用模板缩写</h2><p>key</p>
<pre><code>private static final String KEY_$value$ = &quot;$value$&quot;;
</code></pre><p>toast</p>
<pre><code>android.widget.Toast.makeText($className$.this, &quot;$text$&quot;, Toast.LENGTH_SHORT).show();
</code></pre><p>logd</p>
<pre><code>android.util.Log.d(TAG, &quot;$METHOD_NAME$: $content$&quot;);
</code></pre><p>loge</p>
<pre><code>android.util.Log.e(TAG, &quot;$METHOD_NAME$: $content$&quot;, $exception$);
</code></pre><p>logi</p>
<pre><code>android.util.Log.i(TAG, &quot;$METHOD_NAME$: $content$&quot;);
</code></pre><p>logr</p>
<pre><code>android.util.Log.d(TAG, &quot;$METHOD_NAME$() returned: &quot; +  $result$);
</code></pre><p>logt</p>
<pre><code>private static final String TAG = &quot;$className$&quot;;
</code></pre><p>wtf</p>
<pre><code>android.util.Log.wtf(TAG, &quot;$METHOD_NAME$: $content$&quot;, $exception$);
</code></pre><p>appNs</p>
<pre><code>xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
</code></pre><p>toolsNs</p>
<pre><code>xmlns:tools=&quot;http://schemas.android.com/tools&quot;
</code></pre><p>psf</p>
<pre><code>public static final
</code></pre><p>fori</p>
<pre><code>for(int $INDEX$ = 0; $INDEX$ &lt; $LIMIT$; $INDEX$++) {
  $END$
}
</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.androidchina.net/2143.html" target="_blank" rel="external">Android Studio快捷键</a><br><a href="http://jaeger.itscoder.com/android/2016/02/14/android-studio-tips.html" target="_blank" rel="external">Android Studio 小技巧合集</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;h3 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Tool" scheme="https://luoweiguang.github.io/categories/Tool/"/>
    
    
      <category term="Android Studio" scheme="https://luoweiguang.github.io/tags/Android-Studio/"/>
    
      <category term="IDE" scheme="https://luoweiguang.github.io/tags/IDE/"/>
    
      <category term="Tool" scheme="https://luoweiguang.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>ViewGrop及其子类属性的总结</title>
    <link href="https://luoweiguang.github.io/2016/08/09/ViewGrop%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB%E5%B1%9E%E6%80%A7%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>https://luoweiguang.github.io/2016/08/09/ViewGrop及其子类属性的总结/</id>
    <published>2016-08-09T14:00:00.000Z</published>
    <updated>2017-11-14T17:51:06.508Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="ViewGroup"><a href="#ViewGroup" class="headerlink" title="ViewGroup"></a>ViewGroup</h2><ol>
<li><p>android:addStatesFromChildren<br>相关方法:setAddStatesFromChildren(boolean)<br>说明:定义布局是否应用子布局的背景</p>
</li>
<li><p>android:alwaysDrawnWithCache<br>相关方法:setAlwaysDrawnWithCacheEnabled(boolean)<br>说明:定义子布局是否应用绘图的高速缓存</p>
</li>
<li><p>android:animateLayoutChanges<br>相关方法:setLayoutTransition(LayoutTransition)<br>说明:布局改变时是否有动画效果</p>
</li>
<li><p>android:animationCache<br>相关方法:setAnimationCacheEnabled(boolean)<br>说明:定义子布局也有动画效果</p>
</li>
<li><p>android:clipChildren<br>相关方法:setClipChildren(boolean)<br>说明:定义子布局是否一定要在限定的区域内</p>
</li>
<li><p>android:clipToPadding<br>相关方法:setClipToPadding(boolean)<br>说明:定义布局间是否有间距</p>
</li>
<li><p>android:descendantFocusability<br>相关方法:setDescendantFocusability (int)<br>说明:控制子布局焦点获取方式 常用于listView的item中包含多个控件 点击无效</p>
</li>
<li><p>android:layoutAnimation<br>相关方法:setLayoutAnimation (LayoutAnimationController)<br>说明:定义布局显示时候的动画</p>
</li>
<li><p>android:layoutMode(API18)<br>相关方法:setLayoutMode(int)<br>说明:设置布局类型</p>
</li>
<li><p>android:persistentDrawingCache<br>相关方法:setPersistentDrawingCache(int)<br>说明:定义绘图的高速缓存的持久性</p>
</li>
<li><p>android:splitMotionEvents<br>相关方法:setMotionEventSplittingEnabled(boolean)<br>说明:定义布局是否传递touch事件到子布局</p>
</li>
</ol>
<hr>
<ul>
<li><code>android:descendantFocusability</code></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeDescendants</td>
<td>viewgroup会优先其子类控件而获取到焦点</td>
</tr>
<tr>
<td>afterDescendants</td>
<td>viewgroup只有当其子类控件不需要获取焦点时才获取焦点</td>
</tr>
<tr>
<td>blocksDescendants</td>
<td>viewgroup会覆盖子类控件而直接获得焦点</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:layoutMode</code></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>clipBounds</td>
<td>使用控件编辑布局(默认)</td>
</tr>
<tr>
<td>opticalBounds</td>
<td>使用视觉边界布局</td>
</tr>
</tbody>
</table>
<h2 id="AbsListView"><a href="#AbsListView" class="headerlink" title="AbsListView"></a>AbsListView</h2><ol>
<li><p>android:cacheColorHint<br>相关方法:setCacheColorHint(int)<br>说明:列表总是在固定的单色、不透明的背景下绘制</p>
</li>
<li><p>android:choiceMode<br>相关方法:setChoiceMode(int)<br>说明:设置选择模式</p>
</li>
<li><p>android:drawSelectorOnTop<br>相关方法:setDrawSelectorOnTop(boolean)<br>说明:如果为真，选择器将绘制在选中条目的上层。否则绘制在下层。默认为假</p>
</li>
<li><p>android:fastScrollEnabled<br>相关方法:setFastScrollEnabled(boolean)<br>说明:是否允许使用快速滚动滑块</p>
</li>
<li><p>android:listSelector<br>相关方法:setSelector(int)<br>说明:用于在列表中指示当前选中条目的可绘制对象</p>
</li>
<li><p>android:scrollingCache<br>相关方法:setScrollingCacheEnabled(boolean)<br>说明:当为真时，列表滚动使用绘图缓存。该选项使渲染更快，但占用更多的内存。 默认值为真</p>
</li>
<li><p>android:smoothScrollbar<br>相关方法:setSmoothScrollbarEnabled(boolean)<br>说明:为真时，列表会使用更精确的基于条目在屏幕上的可见像素高度的计算方法。 默认该属性为真，如果你的适配器需要绘制可变高的条目，他应该设为假。 当该属性为真时，你在适配器在显示变高条目时，滚动条的把手会在滚动的 过程中改变大小。当设为假时，列表只使用适配器中的条目数和屏幕上的 可见条目来决定滚动条的属性</p>
</li>
<li><p>android:stackFromBottom<br>相关方法:setStackFromBottom(boolean)<br>说明:内容栈从底部开始</p>
</li>
<li><p>android:textFilterEnabled<br>相关方法:setTextFilterEnabled(boolean)<br>说明:设为真时，列表会过滤根据用户的要求，过滤结果集。列表的适配器必须实现了 Filterable 接口，才能使其可用</p>
</li>
<li><p>android:transcriptMode<br>相关方法:setTranscriptMode(int)<br>说明:设置列表的跳转模式。在跳转模式下，当加入新条目时，列表会滚动到底部， 使新条目可见</p>
</li>
</ol>
<ul>
<li><code>android:choiceMode</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>无选择模式</td>
</tr>
<tr>
<td>singlechoice</td>
<td>最多可以有一项被选中</td>
</tr>
<tr>
<td>multipleChoice</td>
<td>可以多项被选中</td>
</tr>
<tr>
<td>multipleChoiceModal</td>
<td>排斥点击的多选</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:transcriptMode</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>disabled</td>
<td>禁用跳转模式</td>
</tr>
<tr>
<td>normal</td>
<td>仅当最后的条目在屏幕上可见，并且收到数据集变更消息时列表将自动滚动到底部。</td>
</tr>
<tr>
<td>alwaysScroll</td>
<td>总是自动滚动到列表的底部</td>
</tr>
</tbody>
</table>
<h2 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h2><ol>
<li><p>android:columnWidth<br>相关方法:setColumnWidth(int)<br>说明:每列的宽度</p>
</li>
<li><p>android:gravity<br>相关方法:setGravity(int)<br>说明:设置对齐方式</p>
</li>
<li><p>android:horizontalSpacing<br>相关方法:setHorizontalSpacing(int)<br>说明:两列之间的间距</p>
</li>
<li><p>android:numColumns<br>相关方法:setNumColumns(int)<br>说明:列数</p>
</li>
<li><p>android:stretchMode<br>相关方法:setStretchMode(int)<br>说明:缩放模式</p>
</li>
<li><p>android:verticalSpacing<br>相关方法:setVerticalSpacing(int)<br>说明:两行之间的间距</p>
</li>
</ol>
<ul>
<li><code>android:numColumns</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto_fit</td>
<td>列数</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:stretchMode</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>不拉伸</td>
</tr>
<tr>
<td>spacingWidth</td>
<td>仅拉伸元素之间的间距</td>
</tr>
<tr>
<td>columnWidth</td>
<td>仅拉伸表格元素本身</td>
</tr>
<tr>
<td>spacingWidthUniform</td>
<td>表格元素与元素之间的间距一起拉伸</td>
</tr>
</tbody>
</table>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><ol>
<li><p>android:divider<br>相关方法:setDivider(Drawable)<br>说明:设置分隔条</p>
</li>
<li><p>android:dividerHeight<br>相关方法:setDividerHeight(int)<br>说明:分隔条的高度</p>
</li>
<li><p>android:entries<br>说明:指定一个数组资源，将根据数组资源生成ListView</p>
</li>
<li><p>android:footerDividersEnabled<br>相关方法:setFooterDividersEnabled(boolean)<br>说明:如果有表尾的话,列表表尾是否显示分割线</p>
</li>
<li><p>android:headerDividersEnabled<br>相关方法:setHeaderDividersEnabled(boolean)<br>说明:如果有表头的话,列表表头是否显示分割线</p>
</li>
</ol>
<h2 id="ExpandableListView"><a href="#ExpandableListView" class="headerlink" title="ExpandableListView"></a>ExpandableListView</h2><ol>
<li><p>android:childDivider<br>相关方法:setChildDivider(Drawable)<br>说明:指定各子列表项之间的分隔条</p>
</li>
<li><p>android:childIndicator<br>相关方法:setChildIndicator(Drawable)<br>说明:显示在子列表旁边的Drawable对象</p>
</li>
<li><p>android:childIndicatorEnd<br>相关方法:setChildIndicatorBoundsRelative(int,int)<br>说明:子列表项指示符距离结束的位置</p>
</li>
<li><p>android:childIndicatorLeft<br>相关方法:setChildIndicatorBounds(int,int)<br>说明:子列表项指示符的左边约束位置</p>
</li>
<li><p>android:childIndicatorRight<br>相关方法:setChildIndicatorBounds(int,int)<br>说明:子列表项指示符的右边约束位置</p>
</li>
<li><p>android:childIndicatorStart<br>相关方法:setChildIndicatorBoundsRelative(int,int)<br>说明:子列表项指示符距离开始的位置</p>
</li>
<li><p>android:groupIndicator<br>相关方法:setGroupIndicator(Drawable)<br>说明:显示在组列表旁边的Drawable对象</p>
</li>
<li><p>android:indicatorEnd<br>相关方法:setIndicatorBoundsRelative(int,int)<br>说明:组列表项指示符距离结束的位置</p>
</li>
<li><p>android:indicatorLeft<br>相关方法:setIndicatorBounds(int, int)<br>说明:组列表项指示器的左边约束位置</p>
</li>
<li><p>android:indicatorRight<br>相关方法:setIndicatorBounds(int,int)<br>说明:组列表项指示器的右边约束位置</p>
</li>
<li><p>android:indicatorStart<br>相关方法:setIndicatorBoundsRelative(int,int)<br>说明:组列表项指示符距离开始的位置</p>
</li>
</ol>
<h2 id="AbsSpinner"><a href="#AbsSpinner" class="headerlink" title="AbsSpinner"></a>AbsSpinner</h2><ol>
<li>android:entries<br>说明:指定一个数组资源</li>
</ol>
<h2 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h2><ol>
<li><p>android:animationDuration<br>相关方法:setAnimationDuration(int)<br>说明:设置布局变化时动画的时间</p>
</li>
<li><p>android:gravity<br>相关方法:setGravity(int)<br>说明:设置对齐方式</p>
</li>
<li><p>android:spacing<br>相关方法:setSpacing(int)<br>说明:设置图片之间的间距</p>
</li>
<li><p>android:unselectedAlpha<br>相关方法:setUnselectedAlpha(float)<br>说明:设置未选择条目的透明度</p>
</li>
</ol>
<h2 id="Spinner"><a href="#Spinner" class="headerlink" title="Spinner"></a>Spinner</h2><ol>
<li><p>android:dropDownHorizontalOffset 相关方法:setDropDownHorizontalOffset(int)<br>说明:设置列表选择框的水平偏移距</p>
</li>
<li><p>android:dropDownSelector<br>说明:设定spinnerMode=”dropdown”时列表选择器的显示效果</p>
</li>
<li><p>android:dropDownVerticalOffset<br>相关方法:setDropDownVerticalOffset(int)<br>说明:设置列表选择框的垂直偏移距</p>
</li>
<li><p>android:dropDownWidth<br>相关方法:setDropDownWidth(int)<br>说明:设置列表选择框的宽度</p>
</li>
<li><p>android:gravity<br>相关方法:setGravity(int)<br>说明:设置对齐方式</p>
</li>
<li><p>android:popupBackground<br>相关方法:setPopupBackgroundResource(int)<br>说明:设置列表选择框的背景色</p>
</li>
<li><p>android:prompt<br>相关方法:setPrompt(CharSequence)<br>说明:设置列表选择框的提示信息</p>
</li>
<li><p>android:spinnerMode<br>说明:显示模式</p>
</li>
</ol>
<ul>
<li><code>android:spinnerMode</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>dialog</td>
<td>Spinner会被作为一个对口窗口来显示</td>
</tr>
<tr>
<td>dropdown</td>
<td>Spinner会作为一个内嵌的下拉列表来显示</td>
</tr>
</tbody>
</table>
<h2 id="AdapterViewAnimator"><a href="#AdapterViewAnimator" class="headerlink" title="AdapterViewAnimator"></a>AdapterViewAnimator</h2><ol>
<li><p>android:animateFirstView<br>相关方法:setAnimateFirstView(boolean)<br>说明:首次显示时是否对当前视图应用动画</p>
</li>
<li><p>android:inAnimation<br>相关方法:setInAnimation(ObjectAnimator)<br>说明:标识显示视图时使用的动画 </p>
</li>
<li><p>android:loopViews<br>说明:定义当动画执行到列表尾部后,是否循环执行到第一个视图</p>
</li>
<li><p>android:outAnimation<br>相关方法:setOutAnimation(ObjectAnimator)<br>说明:设置组件隐藏时使用的动画</p>
</li>
</ol>
<h2 id="AdapterViewFlipper"><a href="#AdapterViewFlipper" class="headerlink" title="AdapterViewFlipper"></a>AdapterViewFlipper</h2><ol>
<li><p>android:autoStart<br>相关方法:setAutoStart(boolean)<br>说明:设置显示该组件是否是自动播放</p>
</li>
<li><p>android:flipInterval<br>相关方法:setFlipInterval(int)<br>说明:设置自动播放的时间间隔</p>
</li>
</ol>
<h2 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h2><ol>
<li><p>android:alignmentMode<br>相关方法:setAlignmentMode(int)<br>说明:对齐类型</p>
</li>
<li><p>android:columnCount<br>相关方法:setColumnCount(int)<br>说明:最大列数</p>
</li>
<li><p>android:columnOrderPreserved<br>相关方法:setColumnOrderPreserved(boolean)<br>说明:当设置为true，使列边界显示的顺序和列索引的顺序相同。默认是true</p>
</li>
<li><p>android:orientation<br>相关方法:setOrientation(int)<br>说明:定义方向</p>
</li>
<li><p>android:rowCount<br>相关方法:setRowCount(int)<br>说明:最大行数</p>
</li>
<li><p>android:rowOrderPreserved<br>相关方法:setRowOrderPreserved(boolean)<br>说明:当设置为true，使行边界显示的顺序和行索引的顺序相同。默认是true。</p>
</li>
<li><p>android:useDefaultMargins<br>相关方法:setUseDefaultMargins(boolean)<br>说明:当设置ture，当没有指定视图的布局参数时，告诉GridLayout使用默认的边距。默认值是false。</p>
</li>
</ol>
<ul>
<li><code>android:alignmentMode</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>alignBounds</td>
<td>对齐子视图边界</td>
</tr>
<tr>
<td>alignMargins</td>
<td>对齐子视图边距</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:orientation</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>horizontal定义水平部件</td>
</tr>
<tr>
<td>vertical</td>
<td>定义垂直部件</td>
</tr>
</tbody>
</table>
<h2 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h2><ol>
<li><p>android:foregroundGravity<br>相关方法:setForegroundGravity(int)<br>说明:设置布局前景图的位置</p>
</li>
<li><p>android:measureAllChildren<br>相关方法:setMeasureAllChildren(boolean)<br>说明:是否在测量时测量所有的子元素（即使该子元素为gone）</p>
</li>
</ol>
<h2 id="CalendarView"><a href="#CalendarView" class="headerlink" title="CalendarView"></a>CalendarView</h2><ol>
<li><p>android:dateTextAppearance<br>相关方法:setDateTextAppearance(int)<br>说明:设置日期文本样式</p>
</li>
<li><p>android:firstDayOfWeek<br>相关方法:setFirstDayOfWeek(int)<br>说明:当天是本周的第几天</p>
</li>
<li><p>android:focusedMonthDateColor<br>相关方法:setFocusedMonthDateColor(int)<br>说明:设置获得焦点的月份的日期的颜色</p>
</li>
<li><p>android:maxDate<br>相关方法:setMaxDate(long)<br>说明:设置支持的最大日期，以mm/dd/yyyy格式指定最大日期</p>
</li>
<li><p>android:minDate<br>相关方法:setMinDate(long)<br>说明:设置支持的最小日期，以mm/dd/yyyy格式指定最小日期</p>
</li>
<li><p>android:selectedDateVerticalBar<br>相关方法:setSelectedDateVerticalBar(int)<br>说明:设置绘制在选中日期两边的虚线对应的drawable</p>
</li>
<li><p>android:selectedWeekBackgroundColor  相关方法:setSelectedWeekBackgroundColor(int)<br>说明:设置被选中周的背景色</p>
</li>
<li><p>android:showWeekNumber<br>相关方法:setShowWeekNumber(boolean)<br>说明:设置是否显示第几周</p>
</li>
<li><p>android:shownWeekCount<br>相关方法:setShownWeekCount(int)<br>说明:设置显示的星期数</p>
</li>
<li><p>android:unfocusedMonthDateColor<br>相关方法:setUnfocusedMonthDateColor(int)<br>说明:设置没有焦点月份日期文字的颜色</p>
</li>
<li><p>android:weekDayTextAppearance<br>相关方法:setWeekDayTextAppearance(int)<br>说明:设置星期几的文字样式</p>
</li>
<li><p>android:weekNumberColor<br>相关方法:setWeekNumberColor(int)<br>说明:设置显示周编号的颜色</p>
</li>
<li><p>android:weekSeparatorLineColor<br>相关方法:setWeekSeparatorLineColor(int)<br>说明:设置周分隔线的颜色</p>
</li>
</ol>
<h2 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h2><ol>
<li><p>android.support.v7.cardview:cardBackgroundColor  相关方法:setCardBackgroundColor(int)<br>说明:背景颜色</p>
</li>
<li><p>android.support.v7.cardview:cardCornerRadius<br>相关方法:setRadius(float)<br>说明:圆角的半径</p>
</li>
<li><p>android.support.v7.cardview:cardElevation    相关方法:setMaxCardElevation(float)<br>说明:Z轴距离</p>
</li>
<li><p>android.support.v7.cardview:cardMaxElevation<br>说明:最大Z轴距离</p>
</li>
<li><p>android.support.v7.cardview:cardPreventCornerOverlap 相关方法:setPreventCornerOverlap(boolean)<br>说明:防止内容与边角重叠</p>
</li>
<li><p>android.support.v7.cardview:cardUseCompatPadding 相关方法:setUseCompatPadding(boolean)<br>说明:是否使用边距</p>
</li>
<li><p>android.support.v7.cardview:contentPadding   相关方法:setContentPadding(int,int,int,int)<br>说明:边距</p>
</li>
<li><p>android.support.v7.cardview:contentPaddingBottom 相关方法:setContentPadding(int,int,int,int)<br>说明:下边距</p>
</li>
<li><p>android.support.v7.cardview:contentPaddingLeft   相关方法:setContentPadding(int,int,int,int)<br>说明:左边距</p>
</li>
<li><p>android.support.v7.cardview:contentPaddingRight 相关方法:setContentPadding(int,int,int,int)<br>说明:右边距</p>
</li>
<li><p>android.support.v7.cardview:contentPaddingTop<br>相关方法:setContentPadding(int,int,int,int)<br>说明:上边距</p>
</li>
</ol>
<h2 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h2><ol>
<li><p>android.support.design:collapsedTitleGravity 相关方法:setCollapsedTitleGravity(int)<br>说明:指定折叠状态的标题如何放置</p>
</li>
<li><p>android.support.design:collapsedTitleTextAppearance  相关方法:setCollapsedTitleTextAppearance(int)<br>说明:指定折叠状态标题文字的样貌</p>
</li>
<li><p>android.support.design:contentScrim<br>相关方法:setContentScrimResource(int)<br>说明:指定CollapsingToolbarLayout完全被滚出到屏幕外时的ColorDrawable</p>
</li>
<li><p>android.support.design:expandedTitleGravity  相关方法:setExpandedTitleGravity(int)<br>说明:展开状态的标题如何放置</p>
</li>
<li><p>android.support.design:expandedTitleMargin<br>说明:设置边界距离 </p>
</li>
<li><p>android.support.design:expandedTitleMarginBottom<br>说明:底部的边界距离</p>
</li>
<li><p>android.support.design:expandedTitleMarginEnd<br>说明:右边的边界距离</p>
</li>
<li><p>android.support.design:expandedTitleMarginStart<br>说明:左边的边界距离</p>
</li>
<li><p>android.support.design:expandedTitleTextAppearance   相关方法:setExpandedTitleTextAppearance(int)<br>说明:指定展开状态标题文字的样貌</p>
</li>
<li><p>android.support.design:statusBarScrim<br>相关方法:setStatusBarScrimResource(int)<br>说明:在折叠的时候状态栏的背景颜色</p>
</li>
<li><p>android.support.design:title<br>相关方法:setTitle(CharSequence)<br>说明:如果标题可用的话显示的标题文字</p>
</li>
<li><p>android.support.design:titleEnabled<br>相关方法:setTitleEnabled(boolean)<br>说明:是否显示标题</p>
</li>
<li><p>android.support.design:toolbarId<br>说明:在折叠的时候 显示的toolbar的id</p>
</li>
</ol>
<h2 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h2><ol>
<li><p>android:calendarTextColor<br>说明:日历的列表文字颜色</p>
</li>
<li><p>android:calendarViewShown<br>说明:是否显示日历视图</p>
</li>
<li><p>android:datePickerMode<br>说明:定义部件的外观，有spinner和calendar两种选择</p>
</li>
<li><p>android:dayOfWeekBackground<br>说明:头部的星期的背景颜色</p>
</li>
<li><p>android:dayOfWeekTextAppearance<br>说明:头部的星期的文字外观</p>
</li>
<li><p>android:endYear<br>说明:最后一年</p>
</li>
<li><p>android:firstDayOfWeek<br>相关方法:setFirstDayOfWeek(int)<br>说明:设置日历星期第一天是哪一天</p>
</li>
<li><p>android:headerBackground<br>说明:头部背景</p>
</li>
<li><p>android:headerDayOfMonthTextAppearance<br>说明:头部对应号数的文字外观</p>
</li>
<li><p>android:headerMonthTextAppearance<br>说明:头部对应月份的文字外观</p>
</li>
<li><p>android:headerYearTextAppearance<br>说明:头部对应年份的文字外观</p>
</li>
<li><p>android:maxDate<br>说明:日历视图的最大日期,格式为mm/dd/yyyy</p>
</li>
<li><p>android:minDate<br>说明:日历视图的最小日期，格式为mm/dd/yyyy</p>
</li>
</ol>
<p>14.android:spinnersShown<br>说明:是否显示下拉菜单</p>
<ol>
<li><p>android:startYear<br>说明:从哪一年开始</p>
</li>
<li><p>android:yearListItemTextAppearance<br>说明:选择年的列表的文字外观</p>
</li>
<li><p>android:yearListSelectorColor<br>说明:选择年的列表中选中的颜色</p>
</li>
</ol>
<h2 id="HorizontalScrollView"><a href="#HorizontalScrollView" class="headerlink" title="HorizontalScrollView"></a>HorizontalScrollView</h2><ol>
<li>android:fillViewport<br>相关方法:setFillViewport(boolean)<br>说明:是否可以充满整个父布局</li>
</ol>
<h2 id="GestureOverlayView"><a href="#GestureOverlayView" class="headerlink" title="GestureOverlayView"></a>GestureOverlayView</h2><ol>
<li><p>android:eventsInterceptionEnabled<br>相关方法:setEventsInterceptionEnabled(boolean)<br>说明:当手势已经被识别出来时，是否拦截该手势动作</p>
</li>
<li><p>android:fadeDuration<br>说明:当用户画完手势效果淡出的时间</p>
</li>
<li><p>android:fadeEnabled<br>相关方法:setFadeEnabled(boolean)<br>说明: 用户画完之后手势是否自动淡出</p>
</li>
<li><p>android:fadeOffset<br>相关方法:setFadeOffset(long)<br>说明:每两次的间隔时间延长</p>
</li>
<li><p>android:gestureColor<br>相关方法:setGestureColor(int)<br>说明:手势的颜色</p>
</li>
<li><p>android:gestureStrokeAngleThreshold<br>相关方法:setGestureStrokeAngleThreshold(float)<br>说明:角度的最小识别值</p>
</li>
<li><p>android:gestureStrokeLengthThreshold<br>相关方法:setGestureStrokeLengthThreshold(float)<br>说明:长度的最小识别值</p>
</li>
<li><p>android:gestureStrokeSquarenessThreshold<br>相关方法:setGestureStrokeSquarenessTreshold(float)<br>说明:方形的最小识别值</p>
</li>
<li><p>android:gestureStrokeType<br>相关方法:setGestureStrokeType(int)<br>说明:笔画的类型</p>
</li>
<li><p>android:gestureStrokeWidth<br>相关方法:setGestureStrokeWidth(float)<br>说明:笔画的粗细</p>
</li>
<li><p>android:orientation<br>相关方法:setOrientation(int)<br>说明:设置它内容的对其方向</p>
</li>
<li><p>android:uncertainGestureColor<br>相关方法:setUncertainGestureColor(int)<br>说明:确定为手势之前,描绘用户笔画的颜色</p>
</li>
</ol>
<h2 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h2><ol>
<li><p>android.support.design:itemBackground    相关方法:setItemBackgroundResource(int)<br>说明:定义全部Item的背景</p>
</li>
<li><p>android.support.design:itemIconTint  相关方法:setItemIconTintList(ColorStateList)<br>说明:定义全部Item的图片着色</p>
</li>
<li><p>android.support.design:itemTextAppearance    相关方法:setItemTextAppearance(int)<br>说明:定义全部Item的文字风格</p>
</li>
<li><p>android.support.design:itemTextColor 相关方法:setItemTextColor(ColorStateList)<br>说明:定义全部Item的文字颜色</p>
</li>
</ol>
<h2 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h2><ol>
<li>android:fillViewport<br>相关方法:setFillViewport(boolean)<br>说明:是否可以充满整个父布局</li>
</ol>
<h2 id="NestedScrollView"><a href="#NestedScrollView" class="headerlink" title="NestedScrollView"></a>NestedScrollView</h2><ol>
<li>android:fillViewport<br>相关方法:setFillViewport(boolean)<br>说明:是否可以充满整个父布局</li>
</ol>
<h2 id="TimePicker"><a href="#TimePicker" class="headerlink" title="TimePicker"></a>TimePicker</h2><ol>
<li>android:timePickerMode<br>说明:组件外观,同样可选值为:spinner和clock(默认) 前者是旧版本的TimePicker</li>
</ol>
<h2 id="ViewAnimator"><a href="#ViewAnimator" class="headerlink" title="ViewAnimator"></a>ViewAnimator</h2><ol>
<li>android:animateFirstView<br>相关方法:setAnimateFirstView(boolean)<br>说明:定义ViewAnimation首次显示时是否对当前视图应用动画. </li>
</ol>
<ol>
<li>android:inAnimation<br>相关方法:setInAnimation(Animation)<br>说明:标识显示视图时使用的动画. </li>
</ol>
<ol>
<li>android:outAnimation<br>相关方法:setOutAnimation(Animation)<br>说明:标识隐藏视图时使用的动画. </li>
</ol>
<h2 id="ViewFlipper"><a href="#ViewFlipper" class="headerlink" title="ViewFlipper"></a>ViewFlipper</h2><ol>
<li><p>android:autoStart<br>相关方法:setAutoStart(boolean)<br>说明:是否自动播放</p>
</li>
<li><p>android:flipInterval<br>相关方法:setFlipInterval(int)<br>说明:设置View播放的时间间隔</p>
</li>
</ol>
<h2 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h2><ol>
<li><p>android:baselineAligned<br>相关方法:setBaselineAligned(boolean)<br>说明:是否允许用户调整它内容的基线</p>
</li>
<li><p>android:baselineAlignedChildIndex<br>相关方法:setBaselineAlignedChildIndex(int)<br>说明:当一个线性布局与另一个布局是按基线对齐的一部分，它可以指定其内容的基线对齐方式。</p>
</li>
<li><p>android:divider<br>相关方法:setDividerDrawable(Drawable)<br>说明:设置分隔条</p>
</li>
<li><p>android:gravity<br>相关方法:setGravity(int)<br>说明:设置对齐方式</p>
</li>
<li><p>android:measureWithLargestChild  相关方法:setMeasureWithLargestChildEnabled(boolean)<br>说明:该属性为true的时候,所有带权重的子元素都会具有最大子元素的最小尺寸; 默认为false</p>
</li>
<li><p>android:orientation<br>相关方法:setOrientation(int)<br>说明:设置它内容的对其方向</p>
</li>
<li><p>android:weightSum<br>相关方法:setWeightSum(float)<br>说明:权重总和</p>
</li>
</ol>
<h2 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h2><ol>
<li>android.support.design:expanded<br>相关方法:setExpanded(boolean)<br>说明:是否展开</li>
</ol>
<h2 id="RadioGroup"><a href="#RadioGroup" class="headerlink" title="RadioGroup"></a>RadioGroup</h2><ol>
<li>android:checkedButton<br>相关方法:getCheckedRadioButtonId()<br>说明:设为默认的视图id</li>
</ol>
<h2 id="SearchView"><a href="#SearchView" class="headerlink" title="SearchView"></a>SearchView</h2><ol>
<li><p>android:iconifiedByDefault<br>相关方法:setIconifiedByDefault(boolean)<br>说明:搜索图标是否在输入框内</p>
</li>
<li><p>android:imeOptions<br>相关方法:setImeOptions(int)<br>说明:输入法的回车键的功能</p>
</li>
<li><p>android:inputType<br>相关方法:setInputType(int)<br>说明:输入框文本类型</p>
</li>
<li><p>android:maxWidth<br>相关方法:setMaxWidth(int)<br>说明:最大宽度</p>
</li>
<li><p>android:queryHint<br>相关方法:setQueryHint(CharSequence)<br>说明:输入框默认文本</p>
</li>
</ol>
<h2 id="TabWidget"><a href="#TabWidget" class="headerlink" title="TabWidget"></a>TabWidget</h2><ol>
<li><p>android:divider<br>相关方法:setDividerDrawable(Drawable)<br>说明:设置分隔条</p>
</li>
<li><p>android:tabStripEnabled<br>相关方法:setEnabled(boolean)<br>说明:确定是否在选项卡绘制</p>
</li>
<li><p>android:tabStripLeft<br>相关方法:setLeftStripDrawable(Drawable)<br>说明:被用来绘制选项卡下面的分割线左边部分的可视化对象</p>
</li>
<li><p>android:tabStripRight<br>相关方法:setRightStripDrawable(Drawable)<br>说明:被用来绘制选项卡下面的分割线右边部分的可视化对象</p>
</li>
</ol>
<h2 id="TableLayout"><a href="#TableLayout" class="headerlink" title="TableLayout"></a>TableLayout</h2><ol>
<li><p>android:collapseColumns<br>相关方法:setColumnCollapsed(int,boolean)<br>说明:将TableLayout里面指定的列隐藏，若有多列需要隐藏，请用逗号将需要隐藏的列序号隔开</p>
</li>
<li><p>android:shrinkColumns<br>相关方法:setShrinkAllColumns(boolean)<br>说明:设置指定的列为可收缩的列。当可收缩的列太宽(内容过多)不会被挤出屏幕。当需要设置多列为可收缩时，将列序号用逗号隔开</p>
</li>
<li><p>android:stretchColumns<br>相关方法:setStretchAllColumns(boolean)<br>说明:设置指定的列为可伸展的列，以填满剩下的多余空白空间，若有多列需要设置为可伸展，请用逗号将需要伸展的列序号隔开</p>
</li>
</ol>
<h2 id="TextInputLayout"><a href="#TextInputLayout" class="headerlink" title="TextInputLayout"></a>TextInputLayout</h2><ol>
<li><p>android.support.design:errorEnabled<br>相关方法:setErrorEnabled(boolean)<br>说明:是否开启错误提醒功能</p>
</li>
<li><p>android.support.design:hintAnimationEnabled<br>相关方法:setHintAnimationEnabled(boolean)<br>说明:是否开启提示文字动画</p>
</li>
<li><p>android.support.design:hintTextAppearance<br>相关方法:setHintTextAppearance(int)<br>说明:设置提示文字风格</p>
</li>
<li><p>android:hint<br>相关方法:setHint(CharSequence)<br>说明:设置提示文字</p>
</li>
</ol>
<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><ol>
<li>android.support.v7.recyclerview:layoutManager<br>相关方法:setLayoutManager(RecyclerView.LayoutManager)<br>说明:设置布局管理器</li>
</ol>
<h2 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h2><ol>
<li><p>android:gravity<br>相关方法:setGravity(int)<br>说明:设置对齐方式</p>
</li>
<li><p>android:ignoreGravity<br>相关方法:setIgnoreGravity(int)<br>说明:忽略对齐方式的影响</p>
</li>
</ol>
<h2 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h2><ol>
<li><p>android:navigationContentDescription<br>相关方法:setNavigationContentDescription(CharSequence)<br>说明:设置侧滑栏提醒的文字</p>
</li>
<li><p>android:navigationIcon<br>相关方法:setNavigationIcon(int)<br>说明:设置侧滑栏的图标</p>
</li>
</ol>
<h2 id="对子布局的属性"><a href="#对子布局的属性" class="headerlink" title="对子布局的属性"></a>对子布局的属性</h2><ol>
<li><p>android:layout_width<br>说明:布局整体宽度 </p>
</li>
<li><p>android:layout_height<br>说明:布局整体高度 </p>
</li>
<li><p>android:layout_marginLeft<br>说明:距离父布局左间距</p>
</li>
<li><p>android:layout_marginTop<br>说明:距离父布局上间距</p>
</li>
<li><p>android:layout_marginRight<br>说明:距离父布局右间距</p>
</li>
<li><p>android:layout_marginBottom<br>说明:距离父布局下间距</p>
</li>
<li><p>android:layout_marginStart<br>说明:控件离父布局开始的位置的距离</p>
</li>
<li><p>android:layout_marginEnd<br>说明:控件离父布局结束的位置的距离</p>
</li>
<li><p>android:layout_margin<br>说明:距离父布局四个方向距离</p>
</li>
<li><p>android:layout_gravity<br>说明:在父布局中的位置</p>
</li>
</ol>
<h3 id="LinearLayout-1"><a href="#LinearLayout-1" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><ol>
<li>layout_weight<br>说明:剩余空间的分配权重</li>
</ol>
<h3 id="RelativeLayout-1"><a href="#RelativeLayout-1" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h3><ol>
<li><p>layout_alignParentBottom<br>说明:当前控件低端与父控件的低端对齐(重合）</p>
</li>
<li><p>layout_alignParentLeft<br>说明:当前控件左端与父控件的左端对齐(重合）</p>
</li>
<li><p>layout_alignParentRight<br>说明:当前控件右端与父控件的右端对齐(重合）</p>
</li>
<li><p>layout_alignParentTop<br>说明:当前控件上端与父控件的上端对齐(重合）</p>
</li>
<li><p>layout_centerHorizontal<br>说明:当前控件位于父控件的横向中间位置（水平方向上的中间）</p>
</li>
<li><p>layout_centerInParent<br>说明:当前控件位于父控件的纵横向中间位置（垂直方向上的中间）</p>
</li>
<li><p>layout_centerVertical<br>说明:当前控件位于父控件的纵向中间位置（平面上的正中间）</p>
</li>
<li><p>layout_above<br>说明:使当前控件位于给出id控件的上方</p>
</li>
<li><p>layout_below<br>说明:使当前控件位于给出id控件的下方</p>
</li>
<li><p>layout_toLeftOf<br>说明:使当前控件位于给出id控件的左侧</p>
</li>
<li><p>layout_toRightOf<br>说明:使当前控件位于给出id控件的右侧</p>
</li>
<li><p>layout_alignBottom<br>说明:使当前控件与给出id控件的底部部重合(注意可用和给出id控件来对齐）</p>
</li>
<li><p>layout_alignLeft<br>说明:使当前控件与给出id控件的左边重合</p>
</li>
<li><p>layout_alignRight<br>说明:使当前控件与给出id控件的右边重合</p>
</li>
<li><p>layout_alignTop<br>说明:使当前控件与给出id控件的顶部重合</p>
</li>
<li><p>layout_alignBaseline<br>说明:使当前控件的BaseLine与给出id控件t的BaseLine重合，这个主要用于Label或者其他包含文本的widgets。</p>
</li>
</ol>
<h2 id="TableLayout-1"><a href="#TableLayout-1" class="headerlink" title="TableLayout"></a>TableLayout</h2><ol>
<li><p>android:layout_colum<br>说明:设置该控件在TableRow中指定的列。</p>
</li>
<li><p>android:layout_span<br>说明:设置该控件所跨越的列数</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ViewGroup&quot;&gt;&lt;a href=&quot;#ViewGroup&quot; class=&quot;headerlink&quot; title=&quot;ViewGroup&quot;&gt;&lt;/a&gt;ViewGroup&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;android:addStat
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础控件" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>View概述</title>
    <link href="https://luoweiguang.github.io/2016/08/08/View%E6%A6%82%E8%BF%B0/"/>
    <id>https://luoweiguang.github.io/2016/08/08/View概述/</id>
    <published>2016-08-08T14:00:00.000Z</published>
    <updated>2017-11-14T17:54:36.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义View常用方法"><a href="#自定义View常用方法" class="headerlink" title="自定义View常用方法"></a>自定义View常用方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onFinishInflate()</td>
<td>当View中所有的子控件 均被映射成xml后触发</td>
</tr>
<tr>
<td>onMeasure(int, int)</td>
<td>确定所有子元素的大小</td>
</tr>
<tr>
<td>onLayout(boolean, int, int, int, int)</td>
<td>当View分配所有的子元素的大小和位置时触发</td>
</tr>
<tr>
<td>onSizeChanged(int, int, int, int)</td>
<td>当view的大小发生变化时触发</td>
</tr>
<tr>
<td>onDraw(Canvas)</td>
<td>view渲染内容的细节</td>
</tr>
<tr>
<td>onKeyDown(int, KeyEvent)</td>
<td>有按键按下后触发</td>
</tr>
<tr>
<td>onKeyUp(int, KeyEvent)</td>
<td>有按键按下后弹起时触发</td>
</tr>
<tr>
<td>onTrackballEvent(MotionEvent)</td>
<td>轨迹球事件</td>
</tr>
<tr>
<td>onTouchEvent(MotionEvent)</td>
<td>触屏事件</td>
</tr>
<tr>
<td>onFocusChanged(boolean, int, Rect)</td>
<td>当View获取 或失去焦点时触发</td>
</tr>
<tr>
<td>onWindowFocusChanged(boolean)</td>
<td>当窗口包含的view获取或失去焦点时触发</td>
</tr>
<tr>
<td>onAttachedToWindow()</td>
<td>当view被附着到一个窗口时触发</td>
</tr>
<tr>
<td>onDetachedFromWindow()</td>
<td>当view离开附着的窗口时触发</td>
</tr>
<tr>
<td>onWindowVisibilityChanged(int)</td>
<td>当窗口中包含的可见的view发生变化时触发</td>
</tr>
</tbody>
</table>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol>
<li><p>android:accessibilityLiveRegion<br>相关方法:setAccessibilityLiveRegion(int)<br>说明:设置无障碍服务 表明 View 组件改变时用户是否应该被通知.</p>
</li>
<li><p>android:accessibilityTraversalAfter<br>相关方法:setAccessibilityTraversalAfter(int)<br>说明:设置访问性遍历中, 先执行的View组件id|</p>
</li>
<li><p>android:accessibilityTraversalBefore<br>相关方法:setAccessibilityTraversalBefore(int)<br>说明:设置访问性遍历中, 后执行的View组件的id</p>
</li>
<li><p>android:alpha<br>相关方法:setAlpha(float)<br>说明:设置透明度</p>
</li>
<li><p>android:background<br>相关方法:setBackgroundResource(int)<br>说明:设置背景</p>
</li>
<li><p>android:backgroundTint<br>相关方法:setBackgroundTintList(ColorStateList)<br>说明:设置背景着色</p>
</li>
<li><p>android:backgroundTintMode<br>相关方法:setBackgroundTintMode(PorterDuff.Mode)<br>说明:设置背景着色模式</p>
</li>
<li><p>android:clickable<br>相关方法:setClickable(boolean)<br>说明:是否对点击事件做出响应</p>
</li>
<li><p>android:contentDescription<br>相关方法:setContentDescription(CharSequence)<br>说明:设置组件的内容描述信息</p>
</li>
<li><p>android:contextClickable<br>相关方法:setContextClickable(boolean)<br>说明:是否对点击事件做出响应</p>
</li>
<li><p>android:drawingCacheQuality<br>相关方法:setDrawingCacheQuality(int)<br>说明:半透明绘制缓存的质量</p>
</li>
<li><p>android:duplicateParentState<br>说明:设置为true,则该View由它的直接父类获得绘制状态（焦点、按下）而不是它自身</p>
</li>
<li><p>android:elevation<br>相关方法:setElevation(float)<br>说明:设置z轴深度</p>
</li>
<li><p>android:fadeScrollbars<br>相关方法:setScrollbarFadingEnabled(boolean)<br>说明:不使用滚动条时是否淡出显示</p>
</li>
<li><p>android:fadingEdgeLength<br>相关方法:getVerticalFadingEdgeLength()<br>说明:设置渐变边缘的长度</p>
</li>
<li><p>android:filterTouchesWhenObscured<br>相关方法:setFilterTouchesWhenObscured(boolean)<br>说明:当该View的窗口被其他可见的窗口遮挡时是否过滤触摸事件</p>
</li>
<li><p>android:fitsSystemWindows<br>相关方法:setFitsSystemWindows(boolean)<br>说明:是否根据系统窗口例如状态栏调整View布局</p>
</li>
<li><p>android:focusable<br>相关方法:setFocusable(boolean)<br>说明:是否可以获得焦点</p>
</li>
<li><p>android:focusableInTouchMode<br>相关方法:setFocusableInTouchMode(boolean)<br>说明:触摸模式下是否可以得到焦点</p>
</li>
<li><p>android:foreground<br>相关方法:setForeground(Drawable)<br>说明:设置前景</p>
</li>
<li><p>android:foregroundGravity<br>相关方法:setForegroundGravity(int)<br>说明:设置前景位置</p>
</li>
<li><p>android:foregroundTint<br>相关方法:setForegroundTintList(ColorStateList)<br>说明:设置前景着色</p>
</li>
<li><p>android:foregroundTintMode<br>相关方法:setForegroundTintMode(PorterDuff.Mode)<br>说明:设置前景着色模式</p>
</li>
<li><p>android:hapticFeedbackEnabled<br>相关方法:setHapticFeedbackEnabled(boolean)<br>说明:否为特定动作开启触摸反馈功能(如长按)</p>
</li>
<li><p>android:id<br>相关方法:setId(int)<br>说明:设置唯一标识</p>
</li>
<li><p>android:importantForAccessibility<br>相关方法:setImportantForAccessibility(int)<br>说明:设置该View组件对无障碍服务的重要性</p>
</li>
<li><p>android:isScrollContainer<br>相关方法:setScrollContainer(boolean)<br>说明:指定该View是否作为一个可滚动的容器，支持可以通过改变大小收缩整个窗口为输入法腾出空间</p>
</li>
<li><p>android:keepScreenOn<br>相关方法:setKeepScreenOn(boolean)<br>说明:是否强制屏幕常亮</p>
</li>
<li><p>android:layerType<br>相关方法:setLayerType(int,Paint)<br>说明:设置指定层的类型</p>
</li>
<li><p>android:layoutDirection<br>相关方法:setLayoutDirection(int)<br>说明:指定布局绘制的方向</p>
</li>
<li><p>android:longClickable<br>相关方法:setLongClickable(boolean)<br>说明:是否响应长点击事件</p>
</li>
<li><p>android:minHeight<br>相关方法:setMinimumHeight(int)<br>说明:设置视图最小高度</p>
</li>
<li><p>android:minWidth<br>相关方法:setMinimumWidth(int)<br>说明:设置视图最小宽度</p>
</li>
<li><p>android:nextFocusDown<br>相关方法:setNextFocusDownId(int)<br>说明:向下移动焦点时，下一个获取焦点的view的id</p>
</li>
<li><p>android:nextFocusForward<br>相关方法:setNextFocusForwardId(int)<br>说明:下一个获取焦点的view的id</p>
</li>
<li><p>android:nextFocusLeft<br>相关方法:setNextFocusLeftId(int)<br>说明:向左移动焦点时，下一个获取焦点的view的id</p>
</li>
<li><p>android:nextFocusRight<br>相关方法:setNextFocusRightId(int)<br>说明:向右移动焦点时，下一个获取焦点的view的id</p>
</li>
<li><p>android:nextFocusUp<br>相关方法:setNextFocusUpId(int)<br>说明:向上移动焦点时，下一个获取焦点的view的id</p>
</li>
<li><p>android:onClick<br>说明:点击时，要调用的方法的名称</p>
</li>
<li><p>android:padding<br>相关方法:setPaddingRelative(int,int,int,int)<br>说明:设置上下左右的边距</p>
</li>
<li><p>android:paddingBottom<br>相关方法:setPaddingRelative(int,int,int,int)<br>说明:下边距</p>
</li>
<li><p>android:paddingEnd<br>相关方法:setPaddingRelative(int,int,int,int)<br>说明:右边距</p>
</li>
<li><p>android:paddingLeft<br>相关方法:setPadding(int,int,int,int)<br>说明:左边距</p>
</li>
<li><p>android:paddingRight<br>相关方法:setPadding(int,int,int,int)<br>说明:右边距</p>
</li>
<li><p>android:paddingStart<br>相关方法:setPaddingRelative(int,int,int,int)<br>说明:左边距</p>
</li>
<li><p>android:paddingTop<br>相关方法:setPaddingRelative(int,int,int,int)<br>说明:上边距</p>
</li>
<li><p>android:requiresFadingEdge<br>相关方法:setVerticalFadingEdgeEnabled(boolean)<br>说明:定义滚动时边缘是否褪色</p>
</li>
<li><p>android:rotation<br>相关方法:setRotation(float)<br>说明:旋转度数</p>
</li>
<li><p>android:rotationX<br>相关方法:setRotationX(float)<br>说明:水平旋转度数</p>
</li>
<li><p>android:rotationY<br>相关方法:setRotationY(float)<br>说明:竖直旋转度数</p>
</li>
<li><p>android:saveEnabled<br>相关方法:setSaveEnabled(boolean)<br>说明:在配置改变等情况出现时是否保存view的状态数据</p>
</li>
<li><p>android:scaleX<br>相关方法:setScaleX(float)<br>说明:水平方向缩放比例</p>
</li>
<li><p>android:scaleY<br>相关方法:setScaleY(float)<br>说明:竖直方向缩放比例</p>
</li>
<li><p>android:scrollIndicators<br>相关方法:setScrollIndicators(int)<br>说明:定义了哪些滚动指标时视图可以滚动</p>
</li>
<li><p>android:scrollX<br>说明:水平方向的滚动偏移</p>
</li>
<li><p>android:scrollY<br>说明:竖直方向的滚动偏移</p>
</li>
<li><p>android:scrollbarAlwaysDrawHorizontalTrack<br>说明:是否显示水平滚动条轨道</p>
</li>
<li><p>android:scrollbarAlwaysDrawVerticalTrack<br>说明:是否显示垂直滚动条轨道</p>
</li>
<li><p>android:scrollbarDefaultDelayBeforeFade<br>相关方法:setScrollBarDefaultDelayBeforeFade(int)<br>说明:滚动条在多少毫秒后开始淡出</p>
</li>
<li><p>android:scrollbarFadeDuration<br>相关方法:setScrollBarFadeDuration(int)<br>说明:滚动条在淡出过程需要多少毫秒</p>
</li>
<li><p>android:scrollbarSize<br>相关方法:setScrollBarSize(int)<br>说明:垂直滚动条的宽度和水平滚动条的高度</p>
</li>
<li><p>android:scrollbarStyle<br>相关方法:setScrollBarStyle(int)<br>说明:滚动条的风格和位置</p>
</li>
<li><p>android:scrollbarThumbHorizontal<br>说明:水平滚动条的滑块对应的Drawable对象</p>
</li>
<li><p>android:scrollbarThumbVertical<br>说明:垂直滚动条的滑块对应的Drawable对象</p>
</li>
<li><p>android:scrollbarTrackHorizontal<br>说明:水平滚动条的轨道对应的Drawable对象</p>
</li>
<li><p>android:scrollbarTrackVertical<br>说明:垂直滚动条的轨道对应的Drawable对象</p>
</li>
<li><p>android:scrollbars<br>说明:设置可显示的滚动条</p>
</li>
<li><p>android:soundEffectsEnabled<br>相关方法:setSoundEffectsEnabled(boolean)<br>说明:点击或触摸该view时，是否使用音效</p>
</li>
<li><p>android:stateListAnimator<br>说明:设置状态动画</p>
</li>
<li><p>android:tag<br>说明:设置一个字符串类型的tag值</p>
</li>
<li><p>android:textAlignment<br>相关方法:setTextAlignment(int)<br>说明:设置文本的显示对齐方式</p>
</li>
<li><p>android:textDirection<br>相关方法:setTextDirection(int)<br>说明:设置文本的显示方向</p>
</li>
<li><p>android:transformPivotX<br>相关方法:setPivotX(float)<br>说明:设置该组件旋转时旋转中心的X坐标</p>
</li>
<li><p>android:transformPivotY<br>相关方法:setPivotY(float)<br>说明:设置该组件旋转时旋转中心的Y坐标</p>
</li>
<li><p>android:transitionName<br>说明:对于需要共享的元素分配一个通用的名字</p>
</li>
<li><p>android:translationX<br>相关方法:setTranslationX(float)<br>说明:设置该组件在X方向上的位移</p>
</li>
<li><p>android:translationY<br>相关方法:setTranslationY(float)<br>说明:设置该组件在Y方向上的位移</p>
</li>
<li><p>android:translationZ<br>相关方法:setTranslationZ(float)<br>说明:设置该组件在Z方向上的位移</p>
</li>
<li><p>android:visibility<br>相关方法:setVisibility(int)<br>说明:设置该组件是否可见</p>
</li>
</ol>
<ul>
<li>其中<strong>android:isScrollContainer</strong>、<strong>android:scrollbarAlwaysDrawHorizontalTrack</strong>、<strong>android:scrollbarAlwaysDrawVerticalTrack</strong>似乎无效</li>
</ul>
<ul>
<li><code>android:accessibilityLiveRegion</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>不通知</td>
</tr>
<tr>
<td>polite</td>
<td>通知</td>
</tr>
<tr>
<td>assertive</td>
<td>中断当前工作并通知</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:drawingCacheQuality</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>默认值, 让系统框架决定应该被用于绘图缓存的质量等级</td>
</tr>
<tr>
<td>low</td>
<td>低质量, 当设置为低质量时, 绘图缓存使用较低的色彩深度, 这样在渲染一些渐变图像时会丢失一些精度, 但是使用较少的内存</td>
</tr>
<tr>
<td>high</td>
<td>高质量, 使用更高的色彩深度, 但是消耗更多的内存</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:importantForAccessibility</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>让系统决定本 View 组件对于无障碍服务的重要性, 不推荐</td>
</tr>
<tr>
<td>yes</td>
<td>该 View 组件对于无障碍服务是重要的</td>
</tr>
<tr>
<td>no</td>
<td>该 View 组件对于无障碍服务是不重要的</td>
</tr>
<tr>
<td>noHideDescendants</td>
<td>该View组件对于无障碍服务是不重要的,但是该属性的作用范围不包括View树中该View下层的组件</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:layerType</code>属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>不指定</td>
</tr>
<tr>
<td>software</td>
<td>软件层</td>
</tr>
<tr>
<td>hardware</td>
<td>硬件层</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:scrollbars</code>的属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>不显示滚动条</td>
</tr>
<tr>
<td>horizontal</td>
<td>显示水平滚动条</td>
</tr>
<tr>
<td>vertical</td>
<td>显示垂直滚动条</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:scrollbarStyle</code>的属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>insideOverlay</td>
<td>默认值，表示在padding区域内并且覆盖在view上</td>
</tr>
<tr>
<td>insideInset</td>
<td>表示在padding区域内并且插入在view后面</td>
</tr>
<tr>
<td>outsideOverlay</td>
<td>表示在padding区域外并且覆盖在view上</td>
</tr>
<tr>
<td>outsideInset</td>
<td>表示在padding区域外并且插入在view后面</td>
</tr>
</tbody>
</table>
<ul>
<li><code>android:scrollbars</code></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>不显示滚动条</td>
</tr>
<tr>
<td>horizontal</td>
<td>显示水平滚动条</td>
</tr>
<tr>
<td>vertical</td>
<td>显示竖直滚动条</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.sina.com.cn/s/blog_a7b8ab28010176cf.html" target="_blank" rel="external">android中View类的详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义View常用方法&quot;&gt;&lt;a href=&quot;#自定义View常用方法&quot; class=&quot;headerlink&quot; title=&quot;自定义View常用方法&quot;&gt;&lt;/a&gt;自定义View常用方法&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础控件" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>系统属性</title>
    <link href="https://luoweiguang.github.io/2016/08/04/%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7/"/>
    <id>https://luoweiguang.github.io/2016/08/04/系统属性/</id>
    <published>2016-08-04T14:00:00.000Z</published>
    <updated>2017-11-14T17:59:52.049Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="android-os-Build"><a href="#android-os-Build" class="headerlink" title="android.os.Build"></a>android.os.Build</h2><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><table>
<thead>
<tr>
<th>说明</th>
<th>字段方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>无线电固件版本（API14已废弃）</td>
<td>Build.RADIO</td>
</tr>
<tr>
<td>获取无线电固件版本（API14新增）</td>
<td>Build.getRadioVersion()</td>
</tr>
<tr>
<td>cpu指令集(API21废弃)</td>
<td>SBuild.CPU_ABI</td>
</tr>
<tr>
<td>cpu指令集(API21废弃)</td>
<td>Build.CPU_ABI2</td>
</tr>
<tr>
<td>主板</td>
<td>Build.BOARD</td>
</tr>
<tr>
<td>系统启动程序版本号</td>
<td>Build.BOOTLOADER</td>
</tr>
<tr>
<td>系统定制商</td>
<td>Build.BRAND</td>
</tr>
<tr>
<td>设备参数</td>
<td>Build.DEVICE</td>
</tr>
<tr>
<td>显示屏参数</td>
<td>Build.DISPLAY</td>
</tr>
<tr>
<td>唯一编号</td>
<td>Build.FINGERPRINT</td>
</tr>
<tr>
<td>硬件名称</td>
<td>Build.HARDWARE</td>
</tr>
<tr>
<td>Host值</td>
<td>Build.HOST</td>
</tr>
<tr>
<td>修订版本列表</td>
<td>Build.ID</td>
</tr>
<tr>
<td>硬件制造商</td>
<td>Build.MANUFACTURER</td>
</tr>
<tr>
<td>版本(最终用户可见的名称)</td>
<td>Build.MODEL</td>
</tr>
<tr>
<td>手机产品名</td>
<td>Build.PRODUCT</td>
</tr>
<tr>
<td>硬件序列号(API9新增)</td>
<td>Build.SERIAL</td>
</tr>
<tr>
<td>支持的32位指令集(API21新增)</td>
<td>Build.SUPPORTED_32_BIT_ABIS</td>
</tr>
<tr>
<td>支持的64位指令集(API21新增)</td>
<td>Build.SUPPORTED_64_BIT_ABIS</td>
</tr>
<tr>
<td>支持的指令集(API21新增)</td>
<td>Build.SUPPORTED_ABIS</td>
</tr>
<tr>
<td>描述Build的标签</td>
<td>Build.TAGS</td>
</tr>
<tr>
<td>编译时间</td>
<td>Build.TIME</td>
</tr>
<tr>
<td>Builder类型</td>
<td>Build.TYPE</td>
</tr>
<tr>
<td>即字符串”unknown”</td>
<td>Build.UNKNOWN</td>
</tr>
<tr>
<td>User名</td>
<td>Build.USER</td>
</tr>
</tbody>
</table>
<h3 id="Build-VERSION"><a href="#Build-VERSION" class="headerlink" title="Build.VERSION"></a>Build.VERSION</h3><table>
<thead>
<tr>
<th>说明</th>
<th>字段方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>系统(API23新增)</td>
<td>Build.VERSION.BASE_OS</td>
</tr>
<tr>
<td>目前的开发代号</td>
<td>Build.VERSION.CODENAME</td>
</tr>
<tr>
<td>源码控制版本号</td>
<td>Build.VERSION.INCREMENTAL</td>
</tr>
<tr>
<td>预发行的SDK版本(API23新增)</td>
<td>Build.VERSION.PREVIEW_SDK_INT</td>
<td></td>
</tr>
<tr>
<td>版本字符串</td>
<td>Build.VERSION.RELEASE</td>
</tr>
<tr>
<td>SDK版本(已废弃)</td>
<td>Build.VERSION.SDK</td>
</tr>
<tr>
<td>SDK版本</td>
<td>Build.VERSION.SDK_INT</td>
</tr>
<tr>
<td>安全补丁(API23新增)</td>
<td>Build.VERSION.SECURITY_PATCH</td>
</tr>
</tbody>
</table>
<h3 id="Build-VERSION-CODES"><a href="#Build-VERSION-CODES" class="headerlink" title="Build.VERSION_CODES"></a>Build.VERSION_CODES</h3><table>
<thead>
<tr>
<th>名称</th>
<th>编号</th>
<th>Android对应的版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>Build.VERSION_CODES.CUR_DEVELOPMENT</td>
<td>10000</td>
<td>-</td>
</tr>
<tr>
<td>Build.VERSION_CODES.BASE</td>
<td>1</td>
<td>1.0</td>
</tr>
<tr>
<td>Build.VERSION_CODES.BASE_1_1</td>
<td>2</td>
<td>1.1</td>
</tr>
<tr>
<td>Build.VERSION_CODES.CUPCAKE</td>
<td>3</td>
<td>1.5</td>
</tr>
<tr>
<td>Build.VERSION_CODES.DONUT</td>
<td>4</td>
<td>1.6</td>
</tr>
<tr>
<td>Build.VERSION_CODES.ECLAIR</td>
<td>5</td>
<td>2.0</td>
</tr>
<tr>
<td>Build.VERSION_CODES.ECLAIR_0_1</td>
<td>6</td>
<td>2.0.1</td>
</tr>
<tr>
<td>Build.VERSION_CODES.ECLAIR_MR1</td>
<td>7</td>
<td>2.1x</td>
</tr>
<tr>
<td>Build.VERSION_CODES.FROYO</td>
<td>8</td>
<td>2.2x</td>
</tr>
<tr>
<td>Build.VERSION_CODES.GINGERBREAD</td>
<td>9</td>
<td>2.3,2.3.1,2.3.2</td>
</tr>
<tr>
<td>Build.VERSION_CODES.GINGERBREAD_MR1</td>
<td>10</td>
<td>2.3.3,2.3.4</td>
</tr>
<tr>
<td>Build.VERSION_CODES.HONEYCOMB</td>
<td>11</td>
<td>3.0x</td>
</tr>
<tr>
<td>Build.VERSION_CODES.HONEYCOMB_MR1</td>
<td>12</td>
<td>3.1x</td>
</tr>
<tr>
<td>Build.VERSION_CODES.HONEYCOMB_MR2</td>
<td>13</td>
<td>3.2</td>
</tr>
<tr>
<td>Build.VERSION_CODES.ICE_CREAM_SANDWICH</td>
<td>14</td>
<td>4.0, 4.0.1, 4.0.2</td>
</tr>
<tr>
<td>Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1</td>
<td>15</td>
<td>4.0.3, 4.0.4</td>
</tr>
<tr>
<td>Build.VERSION_CODES.JELLY_BEAN</td>
<td>16</td>
<td>4.1-4.1.1</td>
</tr>
<tr>
<td>Build.VERSION_CODES.JELLY_BEAN_MR1</td>
<td>17</td>
<td>4.2, 4.2.2</td>
</tr>
<tr>
<td>Build.VERSION_CODES.JELLY_BEAN_MR2</td>
<td>18</td>
<td>4.3</td>
</tr>
<tr>
<td>Build.VERSION_CODES.KITKAT</td>
<td>19</td>
<td>4.4</td>
</tr>
<tr>
<td>Build.VERSION_CODES.KITKAT_WATCH</td>
<td>20</td>
<td>4.4W</td>
</tr>
<tr>
<td>Build.VERSION_CODES.LOLLIPOP</td>
<td>21</td>
<td>5.0</td>
</tr>
<tr>
<td>Build.VERSION_CODES.LOLLIPOP_MR</td>
<td>22</td>
<td>5.1</td>
</tr>
<tr>
<td>Build.VERSION_CODES.M</td>
<td>23</td>
<td>6.0</td>
</tr>
</tbody>
</table>
<h2 id="android-os-SystemProperty"><a href="#android-os-SystemProperty" class="headerlink" title="android.os.SystemProperty"></a>android.os.SystemProperty</h2><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>dalvik.vm.heapsize</td>
<td>虚拟内存大小</td>
</tr>
<tr>
<td>dalvik.vm.heapgrowthlimit</td>
<td>单个应用程序最大内存限制，超过将被Kill</td>
</tr>
<tr>
<td>dalvik.vm.heapstartsize</td>
<td>应用程序分配的初始内存</td>
</tr>
<tr>
<td>dalvik.vm.stack-trace-file</td>
<td>堆栈记录调试文件</td>
</tr>
<tr>
<td>debug.sf.hw</td>
<td>强制使用GPU渲染</td>
</tr>
<tr>
<td>keyguard.no_require_sim</td>
<td>无需SIM卡也可操作手机</td>
</tr>
<tr>
<td>net.bt.name</td>
<td>蓝牙网络中显示的名称</td>
</tr>
<tr>
<td>persist.sys.timezone</td>
<td>强制时区</td>
</tr>
<tr>
<td>ro.build.display.id</td>
<td>显示的标识</td>
</tr>
<tr>
<td>ro.build.id</td>
<td>修订版本列表</td>
</tr>
<tr>
<td>ro.board.platform</td>
<td>主板平台</td>
</tr>
<tr>
<td>ro.build.version.incremental</td>
<td>版本增量</td>
</tr>
<tr>
<td>ro.build.version.sdk</td>
<td>sdk版本</td>
</tr>
<tr>
<td>ro.build.version.codename</td>
<td>版本代号</td>
</tr>
<tr>
<td>ro.build.version.release</td>
<td>系统版本</td>
</tr>
<tr>
<td>ro.build.date</td>
<td>系统编译的时间</td>
</tr>
<tr>
<td>ro.build.date.utc</td>
<td>系统编译的时间(数字版)</td>
</tr>
<tr>
<td>ro.build.user</td>
<td>编译账户</td>
</tr>
<tr>
<td>ro.build.host</td>
<td>编译主机系统</td>
</tr>
<tr>
<td>ro.build.tags</td>
<td>编译标签</td>
</tr>
<tr>
<td>ro.com.android.dataroaming</td>
<td>漫游设置</td>
</tr>
<tr>
<td>ro.com.android.dateformat</td>
<td>默认时间格式</td>
</tr>
<tr>
<td>ro.com.google.clientidbase</td>
<td>谷歌客户身份</td>
</tr>
<tr>
<td>ro.config.alarm_alert</td>
<td>默认闹铃</td>
</tr>
<tr>
<td>ro.config.notification_sound</td>
<td>默认提示音</td>
</tr>
<tr>
<td>ro.config.ringtone</td>
<td>默认铃声设置</td>
</tr>
<tr>
<td>ro.opengles.version</td>
<td>开放式绘图介面参数</td>
</tr>
<tr>
<td>ro.product.model</td>
<td>手机代号</td>
</tr>
<tr>
<td>ro.product.brand</td>
<td>手机品牌</td>
</tr>
<tr>
<td>ro.product.board</td>
<td>采用的处理器</td>
</tr>
<tr>
<td>ro.product.cpu.abi</td>
<td>cpu的指令集版本</td>
</tr>
<tr>
<td>ro.product.cpu.abilist</td>
<td>cpu支持的指令集版本列表</td>
</tr>
<tr>
<td>ro.product.cpu.abilist32</td>
<td>cpu支持的32位指令集版本列表</td>
</tr>
<tr>
<td>ro.product.cpu.abilist64</td>
<td>cpu支持的64位指令集版本列表</td>
</tr>
<tr>
<td>ro.product.device</td>
<td>采用的设备</td>
</tr>
<tr>
<td>ro.product.manufacturer</td>
<td>手机制造商</td>
</tr>
<tr>
<td>ro.product.name</td>
<td>手机正式名称</td>
</tr>
<tr>
<td>ro.product.locale</td>
<td>语言</td>
</tr>
<tr>
<td>ro.ril.gprsclass</td>
<td>GPRS设置</td>
</tr>
<tr>
<td>ro.setupwizard.mode</td>
<td>安装向导模式</td>
</tr>
<tr>
<td>ro.sf.lcd_density</td>
<td>显示屏分辨率</td>
</tr>
<tr>
<td>ro.telephony.default_network</td>
<td>默认的网络类型</td>
</tr>
<tr>
<td>ro.wifi.channels</td>
<td>无线局域网络的通信信道,空白表示自动识别</td>
</tr>
<tr>
<td>wifi.interface</td>
<td>WIFI界面</td>
</tr>
</tbody>
</table>
<h2 id="java中的System-getProperty"><a href="#java中的System-getProperty" class="headerlink" title="java中的System.getProperty()"></a>java中的System.getProperty()</h2><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>java.version</td>
<td>Java 运行时环境版本</td>
</tr>
<tr>
<td>java.vendorJava</td>
<td>运行时环境供应商</td>
</tr>
<tr>
<td>java.vendor.url</td>
<td>Java 供应商的URL</td>
</tr>
<tr>
<td>java.home</td>
<td>Java安装目录</td>
</tr>
<tr>
<td>java.vm.specification.version</td>
<td>Java虚拟机规范版本</td>
</tr>
<tr>
<td>java.vm.specification.vendor</td>
<td>Java虚拟机规范供应商</td>
</tr>
<tr>
<td>java.vm.specification.name</td>
<td>Java虚拟机规范名称</td>
</tr>
<tr>
<td>java.vm.version</td>
<td>Java虚拟机实现版本</td>
</tr>
<tr>
<td>java.vm.vendor</td>
<td>Java虚拟机实现供应商</td>
</tr>
<tr>
<td>java.vm.name</td>
<td>Java虚拟机实现名称</td>
</tr>
<tr>
<td>java.specification.version</td>
<td>Java运行时环境规范版本</td>
</tr>
<tr>
<td>java.specification.vendor</td>
<td>Java运行时环境规范供应商</td>
</tr>
<tr>
<td>java.specification.name</td>
<td>Java运行时环境规范名称</td>
</tr>
<tr>
<td>java.class.version</td>
<td>Java类格式版本号</td>
</tr>
<tr>
<td>java.class.path</td>
<td>Java类路径</td>
</tr>
<tr>
<td>java.library.path</td>
<td>加载库时搜索的路径列表</td>
</tr>
<tr>
<td>java.io.tmpdir</td>
<td>默认的临时文件路径</td>
</tr>
<tr>
<td>java.compiler</td>
<td>要使用的 JIT 编译器的名称</td>
</tr>
<tr>
<td>java.ext.dirs</td>
<td>一个或多个扩展目录的路径</td>
</tr>
<tr>
<td>os.name</td>
<td>操作系统的名称</td>
</tr>
<tr>
<td>os.arch</td>
<td>操作系统的架构</td>
</tr>
<tr>
<td>os.version</td>
<td>操作系统的版本</td>
</tr>
<tr>
<td>file.separator</td>
<td>文件分隔符</td>
</tr>
<tr>
<td>path.separator</td>
<td>路径分隔符）</td>
</tr>
<tr>
<td>line.separator</td>
<td>行分隔符</td>
</tr>
<tr>
<td>user.name</td>
<td>用户的账户名称</td>
</tr>
<tr>
<td>user.home</td>
<td>用户的主目录</td>
</tr>
<tr>
<td>user.dir</td>
<td>用户的当前工作目录</td>
</tr>
</tbody>
</table>
<h2 id="proc目录"><a href="#proc目录" class="headerlink" title="/proc目录"></a>/proc目录</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>acpi</td>
<td>高级配置和电源管理接口</td>
</tr>
<tr>
<td>asound</td>
<td>声卡相关的信息</td>
</tr>
<tr>
<td>buddyinfo</td>
<td>每个内存区中每个order有多少块可用，和内存碎片问题有关</td>
</tr>
<tr>
<td>bus</td>
<td>输入设备信息</td>
</tr>
<tr>
<td>cgroups</td>
<td>cgroups子系统信息</td>
</tr>
<tr>
<td>cmdline</td>
<td>内核启动的命令行</td>
</tr>
<tr>
<td>cpuinfo</td>
<td>系统cpu的信息</td>
</tr>
<tr>
<td>crypto</td>
<td>内核使用的所有已安装的加密密码及细节</td>
</tr>
<tr>
<td>devices</td>
<td>当前挂载的所有软硬件设备(字符设备和块设备)，包括主设备号和设备名称</td>
</tr>
<tr>
<td>diskstats</td>
<td>用于显示磁盘、分区和统计信息</td>
</tr>
<tr>
<td>dma</td>
<td>驱动程序保留的DMA通道和保留它们的驱动程序名称</td>
</tr>
<tr>
<td>execdomains</td>
<td>安全相关的信息</td>
</tr>
<tr>
<td>fb</td>
<td>帧缓冲设备信息</td>
</tr>
<tr>
<td>filesystems</td>
<td>当前注册了的文件系统列表</td>
<td></td>
</tr>
<tr>
<td>fs</td>
<td>文件系统信息</td>
</tr>
<tr>
<td>interrupts</td>
<td>当前系统的中断信息</td>
</tr>
<tr>
<td>iomem</td>
<td>记录物理地址的分配情况</td>
</tr>
<tr>
<td>ioports</td>
<td>被占用的输入/输出地址范围列表</td>
</tr>
<tr>
<td>irq</td>
<td>中断请求设备信息</td>
</tr>
<tr>
<td>kallsyms</td>
<td>内核符号表信息</td>
</tr>
<tr>
<td>kcore</td>
<td>内核核心印象</td>
</tr>
<tr>
<td>kmsg</td>
<td>输出内核消息日志</td>
</tr>
<tr>
<td>kpagecount</td>
<td>这个文件包含一个64位值，该值表示每个page被映射的次数，通过PFN索引</td>
</tr>
<tr>
<td>kpageflags</td>
<td>这个文件包含每一个page的64位的标记集，通过PFN索引。</td>
</tr>
<tr>
<td>loadavg</td>
<td>监控cpu平均负载</td>
</tr>
<tr>
<td>locks</td>
<td>打开文件上的加锁信息</td>
</tr>
<tr>
<td>meminfo</td>
<td>显示物理及虚拟内存使用情况</td>
</tr>
<tr>
<td>misc</td>
<td>内核函数misc_register登记的设备驱动程序</td>
</tr>
<tr>
<td>modules</td>
<td>加载的内核模块列表</td>
</tr>
<tr>
<td>mounts</td>
<td>当前系统所安装的文件系统信息（包括手动安装的）</td>
</tr>
<tr>
<td>mtrr</td>
<td>系统使用的Memory Type Range Registers (MTRRs)</td>
</tr>
<tr>
<td>net</td>
<td>网卡设备信息</td>
</tr>
<tr>
<td>pagetypeinfo</td>
<td>内存分页信息</td>
</tr>
<tr>
<td>partitions</td>
<td>分区信息</td>
</tr>
<tr>
<td>sched_debug</td>
<td>cpu调度信息</td>
</tr>
<tr>
<td>schedstat</td>
<td>kernel调度器的统计信息</td>
</tr>
<tr>
<td>slabinfo</td>
<td>Slab池信息</td>
</tr>
<tr>
<td>softirqs</td>
<td>软中断情况</td>
</tr>
<tr>
<td>stat</td>
<td>系统简要信息</td>
</tr>
<tr>
<td>swaps</td>
<td>对换空间的利用情况</td>
</tr>
<tr>
<td>sys</td>
<td>报告各种不同的内核参数</td>
</tr>
<tr>
<td>tty</td>
<td>tty设备信息</td>
</tr>
<tr>
<td>uptime</td>
<td>系统启动时间和系统空闲时间</td>
</tr>
<tr>
<td>version</td>
<td>系统内核版本</td>
</tr>
<tr>
<td>vmallocinfo</td>
<td>vmalloc内存分配信息</td>
</tr>
<tr>
<td>vmstat</td>
<td>统计虚拟内存信息</td>
</tr>
<tr>
<td>zoneinfo</td>
<td>显示内存空间的统计信息，对分析虚拟内存行为很有用</td>
</tr>
</tbody>
</table>
<h2 id="proc目录中进程N的信息"><a href="#proc目录中进程N的信息" class="headerlink" title="/proc目录中进程N的信息"></a>/proc目录中进程N的信息</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/proc/N/cmdline</td>
<td>进程启动命令</td>
</tr>
<tr>
<td>/proc/N/cwd</td>
<td>链接到进程当前工作目录</td>
</tr>
<tr>
<td>/proc/N/environ</td>
<td>进程环境变量列表</td>
</tr>
<tr>
<td>/proc/N/exe</td>
<td>链接到进程的执行命令文件</td>
</tr>
<tr>
<td>/proc/N/fd</td>
<td>包含进程相关的所有的文件描述符</td>
</tr>
<tr>
<td>/proc/N/limits</td>
<td>当前进程所使用的每一个受限资源的软限制、硬限制和管理单元；此文件仅可由实际启动当前进程的UID用户读取</td>
</tr>
<tr>
<td>/proc/N/maps</td>
<td>与进程相关的内存映射信息</td>
</tr>
<tr>
<td>/proc/N/mem</td>
<td>指代进程持有的内存，不可读</td>
</tr>
<tr>
<td>/proc/N/oom_adj</td>
<td>oom_adj相当于一个因子，它值越大，在OOM时更容易被系统kill掉</td>
</tr>
<tr>
<td>/proc/N/oom_score</td>
<td>由oom_adj计算出的，用于决定在OOM时是否被kill的是</td>
</tr>
<tr>
<td>/proc/N/pagemap</td>
<td>这个文件允许一个用户态的进程查看到每个虚拟页映射到的物理页，每一个虚拟页都包含了一个64位的值</td>
</tr>
<tr>
<td>/proc/N/root</td>
<td>链接到进程的根目录</td>
</tr>
<tr>
<td>/proc/N/stat</td>
<td>进程的状态</td>
</tr>
<tr>
<td>/proc/N/statm</td>
<td>进程使用的内存的状态</td>
</tr>
<tr>
<td>/proc/N/status</td>
<td>进程状态信息，比stat/statm更具可读性</td>
</tr>
<tr>
<td>/proc/N/task</td>
<td>目录文件，包含由当前进程所运行的每一个线程的相关信息，每个线程的相关信息文件均保存在一个由线程号（tid）命名的目录中，这类似于其内容类似于每个进程目录中的内容；</td>
</tr>
</tbody>
</table>
<p><a href="https://book.douban.com/subject/26599539/" target="_blank" rel="external">android群英传</a><br><a href="http://my.oschina.net/chaselinfo/blog/213393" target="_blank" rel="external">Android应用获取系统属性</a><br><a href="http://blog.csdn.net/anlegor/article/details/38317305" target="_blank" rel="external">Android系统/proc目录详解</a><br><a href="http://blog.csdn.net/virus026/article/details/8474359" target="_blank" rel="external">android /proc/meminfo内存信息</a><br><a href="http://blog.csdn.net/testcs_dn/article/details/43056051" target="_blank" rel="external">Java:System.getProperty()方法大全</a><br><a href="http://blog.csdn.net/zdwzzu2006/article/details/7747977" target="_blank" rel="external">Linux下/proc目录简介</a></p>
<p>MemTotal:        2052488 kB         所有可用RAM大小<br>MemFree:         1439916 kB         LowFree与HighFree的总和，被系统留着未使用的内存<br>Buffers:            5924 kB         用来给文件做缓冲大小<br>Cached:           350720 kB         被高速缓冲存储器（cache memory）用的内存的大小（等于diskcache minus SwapCache）。<br>SwapCached:            0 kB         被高速缓冲存储器（cache memory）用的交换空间的大小。已经被交换出来的内存，仍然被存放在swapfile中，用来在需要的时候很快的被替换而不需要再次打开I/O端口<br>Active:           280524 kB         在活跃使用中的缓冲或高速缓冲存储器页面文件的大小，除非非常必要，否则不会被移作他用。<br>Inactive:         276248 kB         在不经常使用中的缓冲或高速缓冲存储器页面文件的大小，可能被用于其他途径。<br>Active(anon):     200140 kB<br>Inactive(anon):    14604 kB<br>Active(file):      80384 kB<br>Inactive(file):   261644 kB<br>Unevictable:           0 kB<br>Mlocked:               0 kB<br>SwapTotal:             0 kB         交换空间的总大小<br>SwapFree:              0 kB         未被使用交换空间的大小<br>Dirty:                 0 kB         等待被写回到磁盘的内存大小<br>Writeback:             0 kB         正在被写回到磁盘的内存大小<br>AnonPages:        199868 kB         未映射页的内存大小<br>Mapped:           123448 kB         设备和文件等映射的大小<br>Shmem:             14636 kB<br>Slab:              33084 kB         内核数据结构缓存的大小，可以减少申请和释放内存带来的消耗。<br>SReclaimable:      11608 kB         可收回Slab的大小。<br>SUnreclaim:        21476 kB         不可收回Slab的大小（SUnreclaim+SReclaimable＝Slab）。<br>KernelStack:        4280 kB<br>PageTables:         9732 kB         管理内存分页页面的索引表的大小。<br>NFS_Unstable:          0 kB         不稳定页表的大小。<br>Bounce:                0 kB<br>WritebackTmp:          0 kB<br>CommitLimit:     1026244 kB<br>Committed_AS:   13825784 kB<br>VmallocTotal:   34359738367 kB<br>VmallocUsed:       47400 kB<br>VmallocChunk:   34359624708 kB<br>HugePages_Total:       0<br>HugePages_Free:        0<br>HugePages_Rsvd:        0<br>HugePages_Surp:        0<br>Hugepagesize:       2048 kB<br>DirectMap4k:       16320 kB<br>DirectMap2M:     2080768 kB</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;android-os-Build&quot;&gt;&lt;a href=&quot;#android-os-Build&quot; class=&quot;headerlink&quot; title=&quot;android.os.Build&quot;&gt;&lt;/a&gt;android.os.Build&lt;/h2
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>资源详解</title>
    <link href="https://luoweiguang.github.io/2016/08/01/%E8%B5%84%E6%BA%90%E8%AF%A6%E8%A7%A3/"/>
    <id>https://luoweiguang.github.io/2016/08/01/资源详解/</id>
    <published>2016-08-01T14:00:00.000Z</published>
    <updated>2017-11-14T18:07:17.007Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Android-中的长度单位"><a href="#Android-中的长度单位" class="headerlink" title="Android 中的长度单位"></a>Android 中的长度单位</h2><ul>
<li><figcaption></li></figcaption><pre class=" language-px</code>：像素，物理上的绝对单位</p>"><code class="language-px</code>：像素，物理上的绝对单位</p>"><li><p><code>dp或dip</code>：Density Independent Pixels（密度无关像素）的缩写。以160dpi为基准，1dp=1px</p>
</li>
<li><p><code>sp</code>: 等同于dp，但还会根据用户的字体大小偏好来缩放。使用12sp及以上，不要使用奇数和小数。否者放大缩小会导致精度缺失</p>
</li>
<li><p><code>in</code>：表示英寸，是屏幕的物理尺寸。每英寸等于 2.54 厘米。</p>
</li>
<li><p><code>pt</code>：表示点，是屏幕的物理尺寸。大小为 1 英寸的 1/72。</p>
</li>
<li><p><code>mm</code>：表示毫米，是屏幕的物理尺寸。 </p>
</li>
</ul>
<h2 id="其他值"><a href="#其他值" class="headerlink" title="其他值"></a>其他值</h2><h3 id="像素密度"><a href="#像素密度" class="headerlink" title="像素密度"></a>像素密度</h3><table>
<thead>
<tr>
<th>名称</th>
<th>像素密度范围</th>
<th>比值</th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi</td>
<td>120dp~160dp</td>
<td>2</td>
</tr>
<tr>
<td>hdpi</td>
<td>160dp~240dp</td>
<td>3</td>
</tr>
<tr>
<td>xhdpi</td>
<td>240dp~320dp</td>
<td>4</td>
</tr>
<tr>
<td>xxhdpi</td>
<td>320dp~480dp</td>
<td>6</td>
</tr>
<tr>
<td>xxxhdpi</td>
<td>480dp~640dp</td>
<td>8</td>
</tr>
</tbody>
</table>
<h3 id="PPI-DPI"><a href="#PPI-DPI" class="headerlink" title="PPI(DPI)"></a>PPI(DPI)</h3><p><img src="/img/20160801000001.png" alt=""></p>
<ul>
<li>PPI和DPI虽然是两种概念，但在android中把它们已经混用了，所以指同一概念</li>
<li><code>安卓对界面元素进行缩放的比例依据的是系统定义的dpi值，而不是实际计算出来的dpi。</code></li>
</ul>
<h3 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h3><table>
<thead>
<tr>
<th>名称</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>small</td>
<td>小于3.55英寸</td>
</tr>
<tr>
<td>normal</td>
<td>小于5英寸</td>
</tr>
<tr>
<td>large</td>
<td>小于7.5英寸</td>
</tr>
<tr>
<td>xlarge</td>
<td>剩余</td>
</tr>
</tbody>
</table>
<p>设置设备支持请看<a href="/2016/07/16/AndroidManifest.xml文件详解/#supports-screens">supports-screens</a></p>
<h2 id="res-目录内支持的资源目录"><a href="#res-目录内支持的资源目录" class="headerlink" title="res/ 目录内支持的资源目录"></a>res/ 目录内支持的资源目录</h2><table>
<thead>
<tr>
<th>目录</th>
<th>资源类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>animator/</code></td>
<td>用于定义属性动画的 XML 文件。</td>
</tr>
<tr>
<td><code>anim/</code></td>
<td>定义渐变动画的 XML文件。（属性动画也可以保存在此目录中，但是为了区分这两种类型，属性动画首选 animator/ 目录。）</td>
</tr>
<tr>
<td><code>color/</code></td>
<td>用于定义颜色状态列表的 XML 文件。请参阅颜色状态列表资源</td>
</tr>
<tr>
<td><code>drawable/</code></td>
<td>位图文件（.png、.9.png、.jpg、.gif）或编译为Drawable 资源子类型的 XML 文件,详见<a href="/2016/07/19/Android的Drawable/">Android的Drawable</a></td>
</tr>
<tr>
<td><code>mipmap/</code></td>
<td>适用于不同启动器图标密度的 Drawable 文件。</td>
</tr>
<tr>
<td><code>layout/</code></td>
<td>用于定义用户界面布局的 XML 文件。 请参阅布局资源。</td>
<td></td>
</tr>
<tr>
<td><code>menu/</code></td>
<td>用于定义应用菜单（如选项菜单、上下文菜单或子菜单）的 XML 文件。</td>
</tr>
<tr>
<td><code>raw/</code></td>
<td>要以原始形式保存的任意文件。要使用原始<code>InputStream</code> 打开这些资源，请使用资源 ID（即 <code>R.raw.filename</code>）调用 <code>Resources.openRawResource()</code>。但是，如需访问原始文件名和文件层次结构，则可以考虑将某些资源保存在 <code>assets/</code> 目录下（而不是 <code>res/raw/</code>）。<code>assets/</code> 中的文件没有资源 ID，因此您只能使用 AssetManager读取这些文件。</td>
</tr>
<tr>
<td><code>values/</code></td>
<td>包含字符串、整型数和颜色等简单值的 XML 文件。其他 res/ 子目录中的 XML 资源文件是根据 XML 文件名定义单个资源，而目录中的 values/ 文件可描述多个资源。对于此目录中的文件，<resources> 元素的每个子元素均定义一个资源由于每个资源均用其自己的 XML 元素定义，因此您可以根据自己的需要命名文件，并将不同的资源类型放在一个文件中。但是，为了清晰起见，您可能需要将独特的资源类型放在不同的文件中。 例如，对于可在此目录中创建的资源，下面给出了相应的文件名约定：arrays.xml，用于资源数组（类型化数组）。colors.xml：颜色值。dimens.xml：尺寸值。strings.xml：字符串值。styles.xml：样式。详见<a href="/2016/07/21/Android中的值文件/">Android中的值文件</a></resources></td>
</tr>
<tr>
<td><code>xml/</code></td>
<td>可以在运行时通过调用<code>Resources.getXML()</code>读取的任意 XML 文件。各种 XML 配置文件（如可搜索配置）都必须保存在此处。</td>
</tr>
</tbody>
</table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><h3 id="按照优先级排序"><a href="#按照优先级排序" class="headerlink" title="按照优先级排序:"></a>按照优先级排序:</h3><ul>
<li>MCC和MNC</li>
<li>语言和地区(Language and region)</li>
<li>布局方向(Layout Direction)</li>
<li>最小宽度(smallestWidth)</li>
<li>可用宽度(Available width)</li>
<li>可用高度(Available height)</li>
<li>屏幕尺寸(Screen size)</li>
<li>屏幕纵横比(Screen aspect)</li>
<li>圆形屏幕(Round screen)</li>
<li>屏幕方向(Screen orientation)</li>
<li>UI模式(UI mode)</li>
<li>夜间模式(Night mode)</li>
<li>屏幕像素密度(Screen pixel density)</li>
<li>触屏类型(Touchscreen type)</li>
<li>键盘可用性(Keyboard availability)</li>
<li>主要文本输入法(Primary text input method)</li>
<li>导航键的有效性(Primary non-touch navigation method)</li>
<li>主要的非触屏导航方法(Primary non-touch navigation method)</li>
<li>平台版本（API 级别）Platform Version (API level)()</li>
</ul>
<h3 id="MCC和MNC"><a href="#MCC和MNC" class="headerlink" title="MCC和MNC"></a>MCC和MNC</h3><h4 id="限定符值"><a href="#限定符值" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>MCC460-MCN01
MCC460-MCN02
MCC460-MCN03
</code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>移动国家代码 (MCC)，（可选）后跟设备 SIM 卡中的移动网络代码 (MNC)。例如，mcc310 是指美国的任一运营商，mcc310-mnc004 是指美国的 Verizon 公司，mcc208-mnc00 是指法国的 Orange 公司。</p>
<p>如果设备使用无线电连接（GSM 手机），则 MCC 和 MNC 值来自 SIM 卡。</p>
<p>也可以单独使用 MCC（例如，将国家/地区特定的合法资源包括在应用中）。如果只需根据语言指定，则改用“语言和区域”限定符（稍后进行介绍）。 如果决定使用 MCC 和 MNC 限定符，请谨慎执行此操作并测试限定符是否按预期工作。</p>
<p>另请参阅配置字段 mcc 和 mnc，这两个字段分别表示当前的移动国家代码和移动网络代码。</p>
</blockquote>
<h3 id="语言和地区-Language-and-region"><a href="#语言和地区-Language-and-region" class="headerlink" title="语言和地区(Language and region)"></a>语言和地区(Language and region)</h3><h4 id="限定符值-1"><a href="#限定符值-1" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>en
zh-rch
zh-rtw
</code></pre><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>语言通过由两个字母组成的 ISO 639-1 语言代码定义，（可选）后跟两个字母组成的 ISO 3166-1-alpha-2 区域码（前带小写字母“r”）。</p>
<p>这些代码不区分大小写；r 前缀用于区分区域码。 不能单独指定区域。</p>
<p>如果用户更改系统设置中的语言，它有可能在应用生命周期中发生改变。 如需了解这会在运行期间给应用带来哪些影响，请参阅处理运行时变更。</p>
<p>有关针对其他语言本地化应用的完整指南，请参阅本地化。</p>
<p>另请参阅 locale 配置字段，该字段表示当前的区域设置。</p>
</blockquote>
<h4 id="具体值"><a href="#具体值" class="headerlink" title="具体值"></a>具体值</h4><table>
<thead>
<tr>
<th>名称</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>中文（中国）</td>
<td>zh-rCN</td>
</tr>
<tr>
<td>中文（台湾）</td>
<td>zh-rTW</td>
</tr>
<tr>
<td>中文（香港）</td>
<td>zh-rHK</td>
</tr>
<tr>
<td>英语（美国）</td>
<td>en-rUS</td>
</tr>
<tr>
<td>英语（英国）</td>
<td>en-rGB</td>
</tr>
<tr>
<td>英文（澳大利亚）</td>
<td>en-rAU</td>
</tr>
<tr>
<td>英文（加拿大）</td>
<td>en-rCA</td>
</tr>
<tr>
<td>英文（爱尔兰）</td>
<td>en-rIE</td>
</tr>
<tr>
<td>英文（印度）</td>
<td>en-rIN</td>
</tr>
<tr>
<td>英文（新西兰）</td>
<td>en-rNZ</td>
</tr>
<tr>
<td>英文（新加坡）</td>
<td>en-rSG</td>
</tr>
<tr>
<td>英文（南非）</td>
<td>en-rZA</td>
</tr>
<tr>
<td>阿拉伯文（埃及）</td>
<td>ar-rEG</td>
</tr>
<tr>
<td>阿拉伯文（以色列）</td>
<td>ar-rIL</td>
</tr>
<tr>
<td>保加利亚文</td>
<td>bg-rBG</td>
</tr>
<tr>
<td>加泰罗尼亚文</td>
<td>ca-rES</td>
</tr>
<tr>
<td>捷克文</td>
<td>cs-rCZ</td>
</tr>
<tr>
<td>丹麦文</td>
<td>da-rDK</td>
</tr>
<tr>
<td>德文（奥地利）</td>
<td>de-rAT</td>
</tr>
<tr>
<td>德文（瑞士）</td>
<td>de-rCH</td>
</tr>
<tr>
<td>德文（德国）</td>
<td>de-rDE</td>
</tr>
<tr>
<td>德文（列支敦士登）</td>
<td>de-rLI</td>
</tr>
<tr>
<td>希腊文</td>
<td>el-rGR</td>
</tr>
<tr>
<td>西班牙文（西班牙）</td>
<td>es-rES</td>
</tr>
<tr>
<td>西班牙文（美国）</td>
<td>es-rUS</td>
</tr>
<tr>
<td>芬兰文（芬兰）</td>
<td>fi-rFI</td>
</tr>
<tr>
<td>法文（比利时）</td>
<td>fr-rBE</td>
</tr>
<tr>
<td>法文（加拿大）</td>
<td>fr-rCA</td>
</tr>
<tr>
<td>法文（瑞士）</td>
<td>fr-rCH</td>
</tr>
<tr>
<td>法文（法国）</td>
<td>fr-rFR</td>
</tr>
<tr>
<td>希伯来文</td>
<td>iw-rIL</td>
</tr>
<tr>
<td>印地文</td>
<td>hi-rIN</td>
</tr>
<tr>
<td>克罗里亚文</td>
<td>hr-rHR</td>
</tr>
<tr>
<td>匈牙利文</td>
<td>hu-rHU</td>
</tr>
<tr>
<td>印度尼西亚文</td>
<td>in-rID</td>
</tr>
<tr>
<td>意大利文（瑞士）</td>
<td>it-rCH</td>
</tr>
<tr>
<td>意大利文（意大利）</td>
<td>it-rIT</td>
</tr>
<tr>
<td>日文</td>
<td>ja-rJP</td>
</tr>
<tr>
<td>韩文</td>
<td>ko-rKR</td>
</tr>
<tr>
<td>立陶宛文</td>
<td>lt-rLT</td>
</tr>
<tr>
<td>拉脱维亚文</td>
<td>lv-rLV</td>
</tr>
<tr>
<td>挪威博克马尔文</td>
<td>nb-rNO</td>
</tr>
<tr>
<td>荷兰文(比利时)</td>
<td>nl-BE</td>
</tr>
<tr>
<td>荷兰文（荷兰）</td>
<td>nl-rNL</td>
</tr>
<tr>
<td>波兰文</td>
<td>pl-rPL</td>
</tr>
<tr>
<td>葡萄牙文（巴西）</td>
<td>pt-rBR</td>
</tr>
<tr>
<td>葡萄牙文（葡萄牙）</td>
<td>pt-rPT</td>
</tr>
<tr>
<td>罗马尼亚文</td>
<td>ro-rRO</td>
</tr>
<tr>
<td>俄文</td>
<td>ru-rRU</td>
</tr>
<tr>
<td>斯洛伐克文</td>
<td>sk-rSK</td>
</tr>
<tr>
<td>斯洛文尼亚文</td>
<td>sl-rSI</td>
</tr>
<tr>
<td>塞尔维亚文</td>
<td>sr-rRS</td>
</tr>
<tr>
<td>瑞典文</td>
<td>sv-rSE</td>
</tr>
<tr>
<td>泰文</td>
<td>th-rTH</td>
</tr>
<tr>
<td>塔加洛语</td>
<td>tl-rPH</td>
</tr>
<tr>
<td>土耳其文</td>
<td>vr-rTR</td>
</tr>
<tr>
<td>乌克兰文</td>
<td>uk-rUA</td>
</tr>
<tr>
<td>越南文</td>
<td>vi-rVN</td>
</tr>
</tbody>
</table>
<h3 id="布局方向-Layout-Direction"><a href="#布局方向-Layout-Direction" class="headerlink" title="布局方向(Layout Direction)"></a>布局方向(Layout Direction)</h3><h4 id="限定符值-2"><a href="#限定符值-2" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>ldrtl
ldltr
</code></pre><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>应用的布局方向。ldrtl 是指“布局方向从右到左”。ldltr 是指“布局方向从左到右”，这是默认的隐式值。</p>
<p>它适用于布局、图片或值等任何资源。</p>
<p>例如，若要针对阿拉伯语提供某种特定布局，并针对任何其他“从右到左”语言（如波斯语或希伯来语）提供某种通用布局，则可编码如下：</p>
</blockquote>
<pre><code>res/
    layout/   
        main.xml  (默认布局)
    layout-ar/  
        main.xml  (特定布局，如阿拉伯语)
    layout-ldrtl/  
        main.xml  (任何“从右至左”的语言，除阿拉伯语，因为语言限定具有更高的优先级。)
</code></pre><blockquote>
<p>注：要为应用启用从右到左的布局功能，必须将 supportsRtl 设置为 “true”，并将 targetSdkVersion 设置为 17 或更高。</p>
<p><strong>此项为API 级别 17 中新增配置。</strong></p>
</blockquote>
<h3 id="最小宽度-smallestWidth"><a href="#最小宽度-smallestWidth" class="headerlink" title="最小宽度(smallestWidth)"></a>最小宽度(smallestWidth)</h3><h4 id="限定符值-3"><a href="#限定符值-3" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>w&lt;N&gt;dp
示例：
sw320dp
sw600dp
sw720dp
</code></pre><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>屏幕的基本尺寸，由可用屏幕区域的最小尺寸指定。 具体来说，设备的 smallestWidth 是屏幕可用高度和宽度的最小尺寸（您也可以将其视为屏幕的“最小可能宽度”）。无论屏幕的当前方向如何，您均可使用此限定符确保应用 UI 的可用宽度至少为 <code>&lt;N&gt;</code>dp。</p>
<p>例如，如果布局要求屏幕区域的最小尺寸始终至少为 600dp，则可使用此限定符创建布局资源 res/layout-sw600dp/。仅当可用屏幕的最小尺寸至少为 600dp 时，系统才会使用这些资源，而不考虑 600dp 所代表的边是用户所认为的高度还是宽度。smallestWidth 是设备的固定屏幕尺寸特性；<code>设备的 smallestWidth 不会随屏幕方向的变化而改变。</code></p>
<p>设备的 smallestWidth 将屏幕装饰元素和系统 UI 考虑在内。例如，如果设备的屏幕上有一些永久性 UI 元素占据沿 smallestWidth 轴的空间，则系统会声明 smallestWidth 小于实际屏幕尺寸，因为这些屏幕像素不适用于您的 UI。因此，使用的值应该是布局所需要的实际最小尺寸（通常，无论屏幕的当前方向如何，此值都是布局支持的“最小宽度”）。</p>
<p><code>应用为多个资源目录提供不同的 smallestWidth 限定符值时，系统会使用最接近（但未超出）设备 smallestWidth 的值。</code></p>
<p><code>此项为 API 级别 13 中新增配置。</code></p>
<p>另请参阅 android:requiresSmallestWidthDp 属性和 smallestScreenWidthDp 配置字段，前者声明与应用兼容的最小 smallestWidth；后者存放设备的 smallestWidth 值。</p>
<p>如需了解有关设计不同屏幕和使用此限定符的详细信息，请参阅支持多个屏幕开发者指南。</p>
</blockquote>
<h3 id="可用宽度-Available-width"><a href="#可用宽度-Available-width" class="headerlink" title="可用宽度(Available width)"></a>可用宽度(Available width)</h3><h4 id="限定符值-4"><a href="#限定符值-4" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>w&lt;N&gt;dp
示例：
w720dp
w1024dp
等等
</code></pre><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>指定资源应该使用的最小可用屏幕宽度，以 dp 为单位，由 <code>&lt;N&gt;</code> 值定义。在横向和纵向之间切换时，为了匹配当前实际宽度，此配置值也会随之发生变化。</p>
<p>应用为多个资源目录提供不同的此配置值时，系统会使用最接近（但未超出）设备当前屏幕宽度的值。 此处的值考虑到了屏幕装饰元素，因此如果设备显示屏的左边缘或右边缘上有一些永久性 UI 元素，考虑到这些 UI 元素，它会使用小于实际屏幕尺寸的宽度值，这样会减少应用的可用空间。</p>
<p><code>此项为 API 级别 13 中新增配置。</code></p>
<p>另请参阅 screenWidthDp 配置字段，该字段存放当前屏幕宽度。</p>
<p>如需了解有关设计不同屏幕和使用此限定符的详细信息，请参阅支持多个屏幕开发者指南。</p>
</blockquote>
<h3 id="可用高度-Available-height"><a href="#可用高度-Available-height" class="headerlink" title="可用高度(Available height)"></a>可用高度(Available height)</h3><h4 id="限定符值-5"><a href="#限定符值-5" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>h&lt;N&gt;dp
示例：
h720dp
h1024dp
等等
</code></pre><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>指定资源应该使用的最小可用屏幕高度，以“dp”为单位，由 <code>&lt;N&gt;</code> 值定义。 在横向和纵向之间切换时，为了匹配当前实际高度，此配置值也会随之发生变化。</p>
<p>应用为多个资源目录提供不同的此配置值时，系统会使用最接近（但未超出）设备当前屏幕高度的值。 此处的值考虑到了屏幕装饰元素，因此如果设备显示屏的上边缘或下边缘有一些永久性 UI 元素，考虑到这些 UI 元素，同时为减少应用的可用空间，它会使用小于实际屏幕尺寸的高度值。 非固定的屏幕装饰元素（例如，全屏时可隐藏的手机状态栏）并不在考虑范围内，标题栏或操作栏等窗口装饰也不在考虑范围内，因此应用必须准备好处理稍小于其所指定值的空间。</p>
<p><code>此项为 API 级别 13 中新增配置。</code></p>
<p>另请参阅 screenHeightDp 配置字段，该字段存放当前屏幕宽度。</p>
<p>如需了解有关设计不同屏幕和使用此限定符的详细信息，请参阅支持多个屏幕开发者指南。</p>
</blockquote>
<h3 id="屏幕尺寸-Screen-size"><a href="#屏幕尺寸-Screen-size" class="headerlink" title="屏幕尺寸(Screen size)"></a>屏幕尺寸(Screen size)</h3><h4 id="限定符值-6"><a href="#限定符值-6" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>small
normal
large
xlarge
</code></pre><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>注：使用尺寸限定符并不表示资源仅适用于该尺寸的屏幕。 如果没有为备用资源提供最符合当前设备配置的限定符，则系统可能使用其中最匹配的资源。</p>
<p>注意：如果所有资源均使用大于当前屏幕的尺寸限定符，则系统不会使用这些资源，并且应用在运行时将会崩溃（例如，如果所有布局资源均用 xlarge 限定符标记，但设备是标准尺寸的屏幕）。</p>
</blockquote>
<h3 id="屏幕纵横比-Screen-aspect"><a href="#屏幕纵横比-Screen-aspect" class="headerlink" title="屏幕纵横比(Screen aspect)"></a>屏幕纵横比(Screen aspect)</h3><h4 id="限定符值-7"><a href="#限定符值-7" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>long
notlong
</code></pre><h4 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>long：宽屏，如 WQVGA、WVGA、FWVGA<br>notlong：非宽屏，如 QVGA、HVGA 和 VGA</p>
<p>它完全基于屏幕的纵横比（宽屏较宽），而与屏幕方向无关。</p>
<p>另请参阅 screenLayout 配置字段，该字段指示屏幕是否为宽屏。</p>
</blockquote>
<h3 id="圆形屏幕-Round-screen"><a href="#圆形屏幕-Round-screen" class="headerlink" title="圆形屏幕(Round screen)"></a>圆形屏幕(Round screen)</h3><h4 id="限定符值-8"><a href="#限定符值-8" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>round
notround
</code></pre><h4 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>round：圆形的屏幕，如圆型穿戴设备<br>notround：矩形屏幕，如手机或平板电脑<br>此项为 API 级别 23 中新增配置</p>
<p>另请参见isScreenRound()配置方法，从而指示屏幕是否是圆的。</p>
</blockquote>
<h3 id="屏幕方向-Screen-orientation"><a href="#屏幕方向-Screen-orientation" class="headerlink" title="屏幕方向(Screen orientation)"></a>屏幕方向(Screen orientation)</h3><h4 id="限定符值-9"><a href="#限定符值-9" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>port
land
</code></pre><h4 id="说明-9"><a href="#说明-9" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>port：设备处于纵向（垂直）<br>land：设备处于横向（水平）<br>如果用户旋转屏幕，它有可能在应用生命周期中发生改变。 如需了解这会在运行期间给应用带来哪些影响，请参阅处理运行时变更。</p>
<p>另请参阅 orientation 配置字段，该字段指示当前的设备方向。</p>
</blockquote>
<h3 id="UI模式-UI-mode"><a href="#UI模式-UI-mode" class="headerlink" title="UI模式(UI mode)"></a>UI模式(UI mode)</h3><h4 id="限定符值-10"><a href="#限定符值-10" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>car
desk
television
appliance watch
</code></pre><h4 id="说明-10"><a href="#说明-10" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>car：设备正在车载手机座上显示<br>desk：设备正在桌面手机座上显示<br>television：设备正在电视上显示，为用户提供“十英尺”体验，其 UI 位于远离用户的大屏幕上，主要面向方向键或其他非指针式交互<br>appliance：设备用作不带显示屏的装置<br>watch：设备配有显示屏，戴在手腕上<br><code>此项为 API 级别 8 中新增配置，API 13 中新增电视配置，API 20 中新增手表配置。</code></pre>
<p>如需了解应用在设备插入手机座或从中移除时的响应方式，请阅读确定并监控插接状态和类型。</p>
<p>如果用户将设备放入手机座中，它有可能在应用生命周期中发生改变。 可以使用 UiModeManager 启用或禁用其中某些模式。如需了解这会在运行期间给应用带来哪些影响，请参阅处理运行时变更。</p>
</blockquote>
<h3 id="夜间模式-Night-mode"><a href="#夜间模式-Night-mode" class="headerlink" title="夜间模式(Night mode)"></a>夜间模式(Night mode)</h3><h4 id="限定符值-11"><a href="#限定符值-11" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>night
notnight
</code></pre><h4 id="说明-11"><a href="#说明-11" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>night：夜间<br>notnight：白天<br>此项为 API 级别 8 中新增配置。</p>
<p>如果夜间模式停留在自动模式（默认），它有可能在应用生命周期中发生改变。在这种情况下，该模式会根据当天的时间进行调整。 可以使用 UiModeManager 启用或禁用此模式。如需了解这会在运行期间给应用带来哪些影响，请参阅处理运行时变更。</p>
</blockquote>
<h3 id="屏幕像素密度-Screen-pixel-density"><a href="#屏幕像素密度-Screen-pixel-density" class="headerlink" title="屏幕像素密度(Screen pixel density)"></a>屏幕像素密度(Screen pixel density)</h3><h4 id="限定符值-12"><a href="#限定符值-12" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>ldpi
mdpi
hdpi
xhdpi
xxhdpi
xxxhdpi
nodpi
tvdpi
</code></pre><h4 id="说明-12"><a href="#说明-12" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>ldpi：低密度屏幕；约为 120dpi。<br>mdpi：中等密度（传统 HVGA）屏幕；约为 160dpi。<br>hdpi：高密度屏幕；约为 240dpi。<br>xhdpi：超高密度屏幕；约为 320dpi。API 级别 8 中新增配置<br>xxhdpi：超超高密度屏幕；约为 480dpi。API 级别 16 中新增配置<br>xxxhdpi：超超超高密度屏幕使用（仅限启动器图标，请参阅“支持多个屏幕”中的注释）；约为 640dpi。 API 级别 18 中新增配置<br>nodpi：它可用于您不希望缩放以匹配设备密度的位图资源。<br>tvdpi：密度介于 mdpi 和 hdpi 之间的屏幕；约为 213dpi。它并不是“主要”密度组， &gt; 主要用于电视，而大多数应用都不需要它。对于大多数应用而言，提供 mdpi 和 hdpi 资源便已足够，系统将根据需要对其进行缩放。API 级别 13 中引入了此限定符。<br>六个主要密度之间的缩放比为 3:4:6:8:12:16（忽略 tvdpi 密度）。因此，9x9 (ldpi) 位图相当于 12x12 (mdpi)、18x18 (hdpi)、24x24 (xhdpi) 位图，依此类推。</p>
<p>如果您认为图像资源在电视或其他某些设备上呈现的效果不够好，而想尝试使用 tvdpi 资源，则缩放比例为 1.33*mdpi。例如，mdpi 屏幕的 100px x 100px 图像应该相当于 tvdpi 的133px x 133px。</p>
<p>注：使用密度限定符并不表示资源仅适用于该密度的屏幕。 如果没有为备用资源提供最符合当前设备配置的限定符，则系统可能使用其中最匹配的资源。</p>
<p>如需了解有关如何处理不同屏幕密度以及 Android 如何缩放位图以适应当前密度的详细信息，请参阅支持多个屏幕。</p>
</blockquote>
<h3 id="触屏类型-Touchscreen-type"><a href="#触屏类型-Touchscreen-type" class="headerlink" title="触屏类型(Touchscreen type)"></a>触屏类型(Touchscreen type)</h3><h4 id="限定符值-13"><a href="#限定符值-13" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>notouch
finger
</code></pre><h4 id="说明-13"><a href="#说明-13" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>notouch：设备没有触摸屏。<br>finger：设备有一个专供用户通过手指直接与其交互的触摸屏。<br>另请参阅 touchscreen 配置字段，该字段指示设备上的触摸屏类型。</p>
</blockquote>
<h3 id="键盘可用性-Keyboard-availability"><a href="#键盘可用性-Keyboard-availability" class="headerlink" title="键盘可用性(Keyboard availability)"></a>键盘可用性(Keyboard availability)</h3><h4 id="限定符值-14"><a href="#限定符值-14" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>keysexposed
keyshidden
keyssoft
</code></pre><h4 id="说明-14"><a href="#说明-14" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>keysexposed：设备具有可用的键盘。如果设备启用了软键盘（不无可能），那么即使硬键盘没有展示给用户，哪怕设备没有硬键盘，也可以使用此限定符。 如果没有提供或已经禁用软键盘，则只有在显示硬键盘时才会使用此限定符。<br>keyshidden：设备具有可用的硬键盘，但它处于隐藏状态，且设备没有启用软键盘。<br>keyssoft：设备已经启用软键盘（无论是否可见）。<br>如果提供了 keysexposed 资源，但未提供 keyssoft 资源，那么只要系统已经启用软键盘，就会使用 keysexposed 资源，而不考虑键盘是否可见。</p>
<p>如果用户打开硬键盘，它有可能在应用生命周期中发生改变。 如需了解这会在运行期间给应用带来哪些影响，请参阅处理运行时变更。</p>
<p>另请参阅配置字段 hardKeyboardHidden 和 keyboardHidden，这两个字段分别指示硬键盘的可见性和任何一种键盘（包括软键盘）的可见性。</p>
</blockquote>
<h3 id="主要文本输入法-Primary-text-input-method"><a href="#主要文本输入法-Primary-text-input-method" class="headerlink" title="主要文本输入法(Primary text input method)"></a>主要文本输入法(Primary text input method)</h3><h4 id="限定符值-15"><a href="#限定符值-15" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>nokeys
qwerty
12key
</code></pre><h4 id="说明-15"><a href="#说明-15" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>nokeys：设备没有用于文本输入的硬按键。<br>qwerty：设备具有标准硬键盘（无论是否对用户可见）。<br>12key：设备具有 12 键硬键盘（无论是否对用户可见）。<br>另请参阅 keyboard 配置字段，该字段指示可用的主要文本输入法。</p>
</blockquote>
<h3 id="导航键的有效性-Navigation-key-availability"><a href="#导航键的有效性-Navigation-key-availability" class="headerlink" title="导航键的有效性(Navigation key availability)"></a>导航键的有效性(Navigation key availability)</h3><h4 id="限定符值-16"><a href="#限定符值-16" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>navexposed
navhidden
</code></pre><h4 id="说明-16"><a href="#说明-16" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>navexposed：导航键可供用户使用。<br>navhidden：导航键不可用（例如，位于密封盖子后面）。<br>如果用户显示导航键，它有可能在应用生命周期中发生改变。<br>如需了解这会在运行期间给应用带来哪些影响，请参阅处理运行时变更。</p>
<p>另请参阅 navigationHidden配置字段，该字段指示导航键是否处于隐藏状态。</p>
</blockquote>
<h3 id="主要的非触屏导航方法-Primary-non-touch-navigation-method"><a href="#主要的非触屏导航方法-Primary-non-touch-navigation-method" class="headerlink" title="主要的非触屏导航方法(Primary non-touch navigation method)"></a>主要的非触屏导航方法(Primary non-touch navigation method)</h3><h4 id="限定符值-17"><a href="#限定符值-17" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>nonav
dpad
trackball
wheel
</code></pre><h4 id="说明-17"><a href="#说明-17" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>nonav：除了使用触摸屏以外，设备没有其他导航设施。<br>dpad：设备具有用于导航的方向键。<br>trackball：设备具有用于导航的轨迹球。<br>wheel：设备具有用于导航的方向盘（不常见）。<br>另请参阅 navigation 配置字段，该字段指示可用的导航方法类型。</p>
</blockquote>
<h3 id="平台版本（API-级别）-Platform-Version-API-level"><a href="#平台版本（API-级别）-Platform-Version-API-level" class="headerlink" title="平台版本（API 级别）(Platform Version (API level))"></a>平台版本（API 级别）(Platform Version (API level))</h3><h4 id="限定符值-18"><a href="#限定符值-18" class="headerlink" title="限定符值"></a>限定符值</h4><pre><code>示例：
v3
v4
v7
等等
</code></pre><h4 id="说明-18"><a href="#说明-18" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>设备支持的 API 级别。例如，v1 对应于 API 级别 1（带有 Android 1.0 或更高版本系统的设备），v4 对应于 API 级别 4（带有 Android 1.6 或更高版本系统的设备）。如需了解有关这些值的详细信息，请参阅 Android API 级别文档。</p>
</blockquote>
<h2 id="限定符命名规则"><a href="#限定符命名规则" class="headerlink" title="限定符命名规则"></a>限定符命名规则</h2><ul>
<li>可以为单组资源指定多个限定符，并使用短划线分隔</li>
<li>这些限定符必须遵循顺序命名</li>
<li>不能嵌套备用资源目录</li>
<li>值不区分大小写。在处理之前，资源编译器会将目录名称转换为小写，以避免不区分大小写的文件系统出现问题。 名称中使用的任何大写字母只是为了便于认读。</li>
<li>对于每种限定符类型，仅支持一个值。</li>
</ul>
<h2 id="利用资源提供最佳设备兼容性"><a href="#利用资源提供最佳设备兼容性" class="headerlink" title="利用资源提供最佳设备兼容性"></a>利用资源提供最佳设备兼容性</h2><blockquote>
<p>提供默认资源至关重要，这不仅仅因为应用可能在超出预期的配置上运行，也因为新版 Android 有时会添加旧版本不支持的配置限定符。若要使用新的资源限定符，又希望维持对旧版 Android 的代码兼容性，则当旧版 Android 运行应用时，如果不提供默认资源，应用将会崩溃，这是因为它无法使用以新限定符命名的资源。例如，如果将 minSdkVersion 设置为 4，并使用夜间模式（night 或 notnight，API 级别 8 中新增配置）限定所有 Drawable 资源，则 API 级别 4 设备无法访问 Drawable 资源，而且会崩溃。在这种情况下，您可能希望 notnight 成为默认资源，为此，您应排除该限定符，使 Drawable 资源位于 drawable/ 或 drawable-night/ 中。</p>
</blockquote>
<h2 id="寻找最匹配资源"><a href="#寻找最匹配资源" class="headerlink" title="寻找最匹配资源"></a>寻找最匹配资源</h2><p><img src="/img/20160801000002.png" alt=""></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><code>屏幕像素密度是唯一一个未因冲突而被淘汰的限定符。</code></li>
<li>如果涉及的限定符是屏幕像素密度，则 Android 会选择最接近设备屏幕密度的选项。通常，Android 倾向于缩小大型原始图像，而不是放大小型原始图像</li>
<li>尽管对所请求的每个资源均执行此程序，但是系统仍会对某些方面做进一步优化。 例如，系统一旦知道设备配置，即会淘汰可能永远无法匹配的备用资源。 比如说，如果配置语言是英语（“en”），则系统绝不会将语言限定符设置为非英语的任何资源目录包含在选中的资源池中</li>
<li>根据屏幕尺寸限定符选择资源时，如果没有更好的匹配资源，则系统将使用专为小于当前屏幕的屏幕而设计的资源（例如，如有必要，大尺寸屏幕将使用标准尺寸的屏幕资源）。 但是，<code>如果唯一可用的资源大于当前屏幕，则系统不会使用这些资源，并且如果没有其他资源与设备配置匹配，应用将会崩溃</code>（例如，如果所有布局资源均用 xlarge 限定符标记，但设备是标准尺寸的屏幕）。</li>
<li>限定符的优先顺序比与设备完全匹配的限定符数量更加重要</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Android-中的长度单位&quot;&gt;&lt;a href=&quot;#Android-中的长度单位&quot; class=&quot;headerlink&quot; title=&quot;Android 中的长度单位&quot;&gt;&lt;/a&gt;Android 中的长度单位&lt;/h2&gt;&lt;ul&gt;
&lt;l
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ProgressBar及其子类的使用</title>
    <link href="https://luoweiguang.github.io/2016/07/30/ProgressBar%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/07/30/ProgressBar及其子类的使用/</id>
    <published>2016-07-30T14:00:00.000Z</published>
    <updated>2017-11-14T18:08:20.859Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="ProgressBar及其子类的类图"><a href="#ProgressBar及其子类的类图" class="headerlink" title="ProgressBar及其子类的类图"></a>ProgressBar及其子类的类图</h2><p><img src="/img/20160730000001.png" alt=""></p>
<h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><h3 id="ProgressBar常用属性"><a href="#ProgressBar常用属性" class="headerlink" title="ProgressBar常用属性"></a>ProgressBar常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:indeterminate</td>
<td>setIndeterminate()</td>
<td>该属性设置为true，表示不精确显示进度</td>
</tr>
<tr>
<td>android:indeterminateBehavior</td>
<td>-</td>
<td>当进度达到最大时，不确定模式的表现</td>
</tr>
<tr>
<td>android:indeterminateDrawable</td>
<td>setIndeterminateDrawable()</td>
<td>设置当选择不精确显示进度时，所绘制的drawable对象</td>
</tr>
<tr>
<td>android:indeterminateOnly</td>
<td>setIndeterminate()</td>
<td>设置只采用不精确显示进度模式</td>
</tr>
<tr>
<td>android:max</td>
<td>setMax()</td>
<td>设置进度可以达到的最大值</td>
</tr>
<tr>
<td>android:progress</td>
<td>setProgress()</td>
<td>设置该进度已完成的进度值</td>
</tr>
<tr>
<td>android:progressDrawable</td>
<td>setProgressDrawable()</td>
<td>设置该进度条轨道对应的drawable对象</td>
</tr>
<tr>
<td>android:secondaryProgress</td>
<td>setSecondaryProgress()</td>
<td>设置二级进度已完成的进度值</td>
</tr>
<tr>
<td>android:progressTint</td>
<td>setProgressTintList()</td>
<td>设置进度条颜色</td>
</tr>
<tr>
<td>android:progressBackgroundTint</td>
<td>setProgressBackgroundTintList()</td>
<td>设置背景的颜色</td>
</tr>
<tr>
<td>android:secondaryProgressTint</td>
<td>setSecondaryProgressTintList()</td>
<td>设置二级进度条颜色</td>
</tr>
<tr>
<td>android:indeterminateTint</td>
<td>setIndeterminateTintList()</td>
<td>设置不精确显示时的颜色</td>
</tr>
<tr>
<td>android:progressTintMode</td>
<td>setProgressTintMode()</td>
<td>设置进度条颜色模式</td>
</tr>
<tr>
<td>android:progressBackgroundTintMode</td>
<td>setProgressBackgroundTintMode()</td>
<td>设置背景的颜色模式</td>
</tr>
<tr>
<td>android:secondaryProgressTintMode</td>
<td>setSecondaryProgressTintMode()</td>
<td>设置二级进度条颜色模式</td>
</tr>
<tr>
<td>android:indeterminateTintMode</td>
<td>setIndeterminateTintMode()</td>
<td>设置不精确显示时的颜色模式</td>
</tr>
</tbody>
</table>
<h3 id="ProgressBar注意事项"><a href="#ProgressBar注意事项" class="headerlink" title="ProgressBar注意事项"></a>ProgressBar注意事项</h3><ul>
<li><code>android:indeterminateBehavior</code>必须为repeat或者cycle，repeat表示进度从0重新开始；cycle表示进度保持当前值，并且回到0</li>
<li>使用<code>android:style</code>设置样式<ul>
<li>Widget.ProgressBar.Horizontal  水平进度条</li>
<li>Widget.ProgressBar.Small       小环形进度条</li>
<li>Widget.ProgressBar.Large       大环进度条</li>
<li>Widget.ProgressBar.Inverse     普通大小的环形进度条</li>
<li>Widget.ProgressBar.Small.Inverse 小环形进度条</li>
<li>Widget.ProgressBar.Large.Inverse 大环形进度条</li>
</ul>
</li>
<li>使用<code>?android:attr</code>设置样式<ul>
<li>style=”?android:attr/progressBarStyle” </li>
<li>style=”?android:attr/progressBarStyleHorizontal” </li>
<li>style=”?android:attr/progressBarStyleInverse” </li>
<li>style=”?android:attr/progressBarStyleLarge” </li>
<li>style=”?android:attr/progressBarStyleLargeInverse” </li>
<li>style=”?android:attr/progressBarStyleSmall” </li>
<li>style=”?android:attr/progressBarStyleSmallInverse” </li>
<li>style=”?android:attr/progressBarStyleSmallTitle” </li>
</ul>
</li>
<li>别忘了加<code>?</code>，<code>?</code>表示引用主题资源</li>
<li>要使<code>android:indeterminateTint</code>生效，需时控件是不精确显示状态，且需要设置<code>android:indeterminateTintMode</code>才能生效</li>
</ul>
<h2 id="ContentLoadingProgressBar"><a href="#ContentLoadingProgressBar" class="headerlink" title="ContentLoadingProgressBar"></a>ContentLoadingProgressBar</h2><h3 id="ContentLoadingProgressBar常用属性"><a href="#ContentLoadingProgressBar常用属性" class="headerlink" title="ContentLoadingProgressBar常用属性"></a>ContentLoadingProgressBar常用属性</h3><ul>
<li>与<a href="#ProgressBar">ProgressBar</a>相同</li>
</ul>
<h3 id="ContentLoadingProgressBar常见方法"><a href="#ContentLoadingProgressBar常见方法" class="headerlink" title="ContentLoadingProgressBar常见方法"></a>ContentLoadingProgressBar常见方法</h3><ul>
<li><code>·onAttachedToWindow()</code>使图像显示</li>
<li><code>onDetachedFromWindow()</code>使图像隐藏，但图像仍占据空间，当使用<code>android:indeterminateDrawable</code>设置图片时，效果是暂停</li>
<li><code>show()</code>使图像显示</li>
<li><code>hide()</code>使图像隐藏，图像不再占据空间</li>
</ul>
<h3 id="ContentLoadingProgressBar注意事项"><a href="#ContentLoadingProgressBar注意事项" class="headerlink" title="ContentLoadingProgressBar注意事项"></a>ContentLoadingProgressBar注意事项</h3><ul>
<li>与<a href="#ProgressBar">ProgressBar</a>相同</li>
<li>使用<code>onDetachedFromWindow()</code>时应使用<code>onAttachedToWindow()</code>显示</li>
<li>使用<code>hide()</code>时应使用<code>show()</code>显示</li>
</ul>
<h2 id="RatingBar"><a href="#RatingBar" class="headerlink" title="RatingBar"></a>RatingBar</h2><h3 id="RatingBar常用属性"><a href="#RatingBar常用属性" class="headerlink" title="RatingBar常用属性"></a>RatingBar常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:numStars</td>
<td>setNumStars()</td>
<td>显示的星型数量，必须是一个整形值</td>
</tr>
<tr>
<td>android:rating</td>
<td>setRating()</td>
<td>默认的评分，必须是浮点类型</td>
</tr>
<tr>
<td>android:stepSize</td>
<td>setStepSize()</td>
<td>评分的步长</td>
</tr>
<tr>
<td>android:isIndicator</td>
<td>setIsIndicator()</td>
<td>是否是一个指示器，即用户是否可更改</td>
</tr>
<tr>
<td>android:progressTint</td>
<td>setProgressTintList()</td>
<td>设置进度条颜色</td>
</tr>
<tr>
<td>android:progressBackgroundTint</td>
<td>setProgressBackgroundTintList()</td>
<td>设置背景的颜色</td>
</tr>
<tr>
<td>android:secondaryProgressTint</td>
<td>setSecondaryProgressTintList()</td>
<td>设置二级进度条颜色</td>
</tr>
</tbody>
</table>
<h3 id="RatingBar注意事项"><a href="#RatingBar注意事项" class="headerlink" title="RatingBar注意事项"></a>RatingBar注意事项</h3><ul>
<li><code>android:isIndicator</code>为true表示不可更改</li>
<li>三种系统样式<ul>
<li><code>style=&quot;?android:attr/ratingBarStyleIndicator&quot;</code> 普通</li>
<li><code>style=&quot;?android:attr/ratingBarStyle&quot;</code> 大</li>
<li><code>style=&quot;?android:attr/ratingBarStyleSmall&quot;</code> 小</li>
</ul>
</li>
<li><p>设置监听<br>``` java<br>XXX.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener()<br>{<br>  /<em>*
   </em></p>
<ul>
<li>@param ratingBar 当前控件</li>
<li>@param rating 当前评分</li>
<li><p>@param fromUser 是否是用户操作<br>*/<br>@Override<br>public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser)<br>{</p>
<p>}<br>});</p>
</li>
</ul>
</li>
</ul>
<pre><code>- 如何自定义图片
``` xml

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;

    &lt;item
        android:id=&quot;@android:id/background&quot;
        android:drawable=&quot;@drawable/unselect&quot;&gt;
    &lt;/item&gt;
    &lt;item
        android:id=&quot;@android:id/secondaryProgress&quot;
        android:drawable=&quot;@drawable/unselect&quot;&gt;
    &lt;/item&gt;
    &lt;item
        android:id=&quot;@android:id/secondaryProgress&quot;
        android:drawable=&quot;@drawable/selected&quot;&gt;
    &lt;/item&gt;

&lt;/layer-list&gt;
</code></pre><h2 id="SeekBar"><a href="#SeekBar" class="headerlink" title="SeekBar"></a>SeekBar</h2><h3 id="SeekBar常用属性"><a href="#SeekBar常用属性" class="headerlink" title="SeekBar常用属性"></a>SeekBar常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:max</td>
<td>setMax()</td>
<td>设置进度可以达到的最大值</td>
</tr>
<tr>
<td>android:progress</td>
<td>setProgress()</td>
<td>设置该进度已完成的进度值</td>
</tr>
<tr>
<td>android:secondaryProgress</td>
<td>setSecondaryProgress()</td>
<td>设置二级进度已完成的进度值</td>
</tr>
<tr>
<td>android:progressDrawable</td>
<td>setProgressDrawable()</td>
<td>设置该进度条轨道对应的drawable对象</td>
</tr>
<tr>
<td>android:progressTint</td>
<td>setProgressTintList()</td>
<td>设置进度条颜色</td>
</tr>
<tr>
<td>android:thumb</td>
<td>setThumb()</td>
<td>设置滑块图片</td>
</tr>
<tr>
<td>android:thumbTint</td>
<td>setThumbTintList()</td>
<td>设置滑块颜色</td>
</tr>
<tr>
<td>android:thumbOffset</td>
<td>setThumbOffset()</td>
<td>设置滑块的偏移量</td>
</tr>
<tr>
<td>android:indeterminate</td>
<td>setIndeterminate()</td>
<td>该属性设置为true，表示不精确显示进度</td>
</tr>
<tr>
<td>android:indeterminateTint</td>
<td>setIndeterminateTintList()</td>
<td>设置不精确显示时的颜色</td>
</tr>
</tbody>
</table>
<h3 id="SeekBar注意事项"><a href="#SeekBar注意事项" class="headerlink" title="SeekBar注意事项"></a>SeekBar注意事项</h3><ul>
<li><p>设置监听</p>
<pre class=" language-java"><code class="language-java">XXX<span class="token punctuation">.</span><span class="token function">setOnSeekBarChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SeekBar<span class="token punctuation">.</span>OnSeekBarChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/**
   *滑动时触发
   * @param seekBar 当前控件
   * @param progress 当前进度值
   * @param fromUser 是否用户操作
   */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onProgressChanged</span><span class="token punctuation">(</span>SeekBar seekBar<span class="token punctuation">,</span> <span class="token keyword">int</span> progress<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fromUser<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * 开始滑动时触发
   * @param seekBar 当前控件
   */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartTrackingTouch</span><span class="token punctuation">(</span>SeekBar seekBar<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * 滑动结束时触发
   * @param seekBar 当前控件
   */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStopTrackingTouch</span><span class="token punctuation">(</span>SeekBar seekBar<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://my.oschina.net/amigos/blog/60060" target="_blank" rel="external">Android RatingBar自定义替换系统图片</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ProgressBar及其子类的类图&quot;&gt;&lt;a href=&quot;#ProgressBar及其子类的类图&quot; class=&quot;headerlink&quot; title=&quot;ProgressBar及其子类的类图&quot;&gt;&lt;/a&gt;ProgressBar及其子
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础控件" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Intent详解</title>
    <link href="https://luoweiguang.github.io/2016/07/29/Intent%E8%AF%A6%E8%A7%A3/"/>
    <id>https://luoweiguang.github.io/2016/07/29/Intent详解/</id>
    <published>2016-07-29T14:00:00.000Z</published>
    <updated>2017-11-14T18:18:13.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intent简介"><a href="#Intent简介" class="headerlink" title="Intent简介"></a>Intent简介</h2><ol>
<li><p>Intent为组件的启动提供了一致的编程模型. 无论想要启动的组件是Activity, Service, 还是BroadcastReceiver, 都可以使用Intent封装启动的意图.</p>
</li>
<li><p>如果应用程序只是想启动具有某种特征的组件，并不想和某个具体的组件耦合，则可以通过在intent-filter中配置相应的属性进行处理</p>
</li>
</ol>
<a id="more"></a>
<h2 id="Intent的七大属性"><a href="#Intent的七大属性" class="headerlink" title="Intent的七大属性"></a>Intent的七大属性</h2><ul>
<li>ComponentName</li>
<li>Action </li>
<li>Category</li>
<li>Data</li>
<li>Type</li>
<li>Extra</li>
<li>Flag</li>
</ul>
<h3 id="ComponentName"><a href="#ComponentName" class="headerlink" title="ComponentName"></a>ComponentName</h3><blockquote>
<p>ComponentName(组件名称)用于标识唯一的应用程序组件，即指明了期望的Intent组件，这种对象的名称是由目标组件的类名与目标组件的包名组合而成的。在Intent传递过程中，组件名称是一个可选项，当指定它时，便是显式的Intent消息，我们称为“显示意图”，当不指定它时，Android系统则会根据其他信息及IntentFilter的过滤条件选择相应的组件，我们称之为 “隐式意图”。</p>
</blockquote>
<p>ComponetName对象的三种构造方法。</p>
<ul>
<li>ComponentName(String pkg, String cls)</li>
<li>ComponentName(Context pkg, String cls)</li>
<li>ComponentName(Context pkg, Class&lt;?&gt; cls)</li>
</ul>
<p>构造方法其实实质是设置包名与类名，其中包名指的是后面类名所在的那个包，而不是当前应用的包名。<br><strong>如果调用的其他应用的组件，而那个组件必须在清单文件中设置android:exported=true，表示允许其他应用打开，否则会报“ java.lang.SecurityException: Permission Denial: starting Intent…”</strong></p>
<pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ComponentName componentName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">"luoweiguang.github.io.intentdemo2"</span><span class="token punctuation">,</span><span class="token string">"luoweiguang.github.io.intentdemo2.MainActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>componentName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>对于包含了过滤器的组件，意味着该组件可以提供给外部的其他应用来使用，它的exported属性默认为true，相反，如果一个组件不包含任何过滤器，那么意味着该组件只能通过指定明确的类名来调用，也就是说该组件只能在应用程序的内部使用，在这种情况下，exported属性的默认值是false。</p>
</blockquote>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote>
<p>Intent通过定义Action属性（其实就是一段自定义的字符串），这样就可以把Intent与具体的某个Activity分离，实现了解耦。否则，每次跳转，都要写成类似new<br>Intent(MainActivity.this,NextActivity.class)这样的形式，也就是说必须将要跳转的目标Activity的名字写出来，这样的编码其实是“硬编码”，并没有实现松耦合。调用Intent对象的setAction()方法实现页面跳转虽然略微复杂（需要在AndroidManifest.xml文件中配置），但是实现了解耦。</p>
</blockquote>
<p>Action 是一个用户定义的字符串，用于描述一个 Android 应用程序组件，一个 Intent Filter 可以包含多个 Action。</p>
<p>一条intent-filter元素至少应该包含一个action，否则任何Intent请求都不能和该intent-filter匹配</p>
<p>action区分大小写</p>
<h3 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h3><p>Intent中如果定义了category，那么不管有几个category，它都必须是Intent-filter中已定义的。</p>
<p><strong>隐式调用一个组件时，必须设置一个 android:name=”android.intent.category.DEFAULT”否则会报“android.content.ActivityNotFoundException: No Activity found to handle Intent”错误</strong></p>
<p>Intent隐形调用不能只设置Category，必须设置Action</p>
<h3 id="Data与Type"><a href="#Data与Type" class="headerlink" title="Data与Type"></a>Data与Type</h3><pre><code>&lt;data
    android:mimeType=&quot;String&quot;
    android:scheme=&quot;String&quot;
    android:ssp=&quot;String&quot;
    android:host=&quot;String&quot;
    android:port=&quot;int&quot;
    android:path=&quot;String&quot;
    android:pathPattern=&quot;String&quot;
    android:pathPrefix=&quot;String&quot;
    android:sspPattern=&quot;String&quot;
    android:sspPrefix=&quot;String&quot;/&gt;
</code></pre><p>data标签由minmeType和<a href="/2016/04/19/URI%E3%80%81URL/">URI</a>两部分组成</p>
<p>Type属性用于指定该Data所指定Uri对应的MIME类型，这种类型可以是任何自定义的MIME类型，只要符合abc/xyz格式的字符串即可</p>
<blockquote>
<p>如果要为Intent指定完整的data，必须要调用setDataAndType方法，不能用setData再调用setType，因为这两个方法彼此会清除对方的值</p>
</blockquote>
<p>当清单文件中设置了data时，intent必须要定义可匹配的data才行，清单文件中可定义多条data，当只要匹配其中一条即可</p>
<h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>以Key-value对的形式发送给处理这个Intent对象的组件的附加信息。<br>能够添加类型包括基本数据类型（含基本数据类型的数组）、String(包含数组)、Parcelable（包含数组）、Serializable、Bundle、CharSequence、Intent</p>
<pre><code>Intent  putExtra(String name, String[] value)
Intent  putExtra(String name, Parcelable value)
Intent  putExtra(String name, long value)
Intent  putExtra(String name, boolean value)
Intent  putExtra(String name, double value)
Intent  putExtra(String name, Parcelable[] value)
Intent  putExtra(String name, char value)
Intent  putExtra(String name, int[] value)
Intent  putExtra(String name, int value)
Intent  putExtra(String name, double[] value)               
Intent  putExtra(String name, short value)                  
Intent  putExtra(String name, long[] value)                     
Intent  putExtra(String name, boolean[] value)                  
Intent  putExtra(String name, short[] value)                    
Intent  putExtra(String name, String value)                     
Intent  putExtra(String name, Serializable value)               
Intent  putExtra(String name, float[] value)                    
Intent  putExtra(String name, Bundle value)                     
Intent  putExtra(String name, byte[] value)                     
Intent  putExtra(String name, CharSequence value)                  
Intent  putExtra(String name, char[] value)                     
Intent  putExtra(String name, byte value)                   
Intent  putExtras(Intent src)                   
Intent  putExtras(Bundle extras)
</code></pre><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p>flag属性是一个int值, 用于通知android系统如何启动目标activity, 或者启动目标activity之后应该采取怎样的后续操作. 所有的flag都在Intent类中定义，具体见<a href="/2016/07/12/Intent中关于Activity的Flag/">Intent中关于Activity的Flag</a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>当我们使用隐式调用时，应该判断以下是否有能匹配的，可以使用以下方法</p>
<ol>
<li>PackageManager的resolveActivity</li>
<li>Intent的resolveActivity</li>
<li>PackageManager的queryIntentActivities</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/u012702547/article/details/49557905" target="_blank" rel="external">关于ComponentName的使用</a><br><a href="https://liuzhichao.com/p/506.html" target="_blank" rel="external">Android开发教程：理解Intent和Intent Filter</a><br><a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">Android开发艺术探索</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Intent简介&quot;&gt;&lt;a href=&quot;#Intent简介&quot; class=&quot;headerlink&quot; title=&quot;Intent简介&quot;&gt;&lt;/a&gt;Intent简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Intent为组件的启动提供了一致的编程模型. 无论想要启动的组件是Activity, Service, 还是BroadcastReceiver, 都可以使用Intent封装启动的意图.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果应用程序只是想启动具有某种特征的组件，并不想和某个具体的组件耦合，则可以通过在intent-filter中配置相应的属性进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ImageView及其子类的使用</title>
    <link href="https://luoweiguang.github.io/2016/07/28/ImageView%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/07/28/ImageView及其子类的使用/</id>
    <published>2016-07-28T14:00:00.000Z</published>
    <updated>2017-11-14T18:22:13.534Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="ImageView及其子类的类图"><a href="#ImageView及其子类的类图" class="headerlink" title="ImageView及其子类的类图"></a>ImageView及其子类的类图</h2><p><img src="/img/20160728000001.png" alt=""></p>
<h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><h3 id="ImageView常用属性"><a href="#ImageView常用属性" class="headerlink" title="ImageView常用属性"></a>ImageView常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:adjustViewBounds</td>
<td>setAdjustViewBounds()</td>
<td>是否保持宽高比</td>
</tr>
<tr>
<td>android:cropToPadding</td>
<td>setCropToPadding()</td>
<td><code>android:scaleType=&quot;center&quot;</code>时是否占时padding属性无效</td>
</tr>
<tr>
<td>android:maxHeight</td>
<td>setMaxHeight()</td>
<td>设置最大高度</td>
</tr>
<tr>
<td>android:maxWidth</td>
<td>setMaxWidth()</td>
<td>设置最大宽度</td>
</tr>
<tr>
<td>android:scaleType</td>
<td>setScaleType()</td>
<td>设置图片的填充方式</td>
</tr>
<tr>
<td>android:src</td>
<td>setImageResource()</td>
<td>设置显示的Drawable对象</td>
</tr>
<tr>
<td>android:tint</td>
<td>setColorFilter()</td>
<td>将图片渲染成指定的颜色</td>
</tr>
</tbody>
</table>
<h3 id="ImageView注意事项"><a href="#ImageView注意事项" class="headerlink" title="ImageView注意事项"></a>ImageView注意事项</h3><ul>
<li>要使<code>android:maxHeight</code>和<code>android:maxWidth</code>属性生效，需设置<code>android:adjustViewBounds=&quot;true&quot;</code></li>
<li><code>android:src</code>能使用Drawable也能使用color，但使用color需要指定具体的大小</li>
<li>要使<code>android:src</code>指定的点九图生效，需设置<code>android:scaleType=&quot;fitXY&quot;</code></li>
<li>scaleType分类</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>matrix</td>
<td>用矩阵来绘图,通过setImageMatrix方法赋值</td>
</tr>
<tr>
<td>fitXY</td>
<td>拉伸图片（不按比例）以填充View的宽高</td>
</tr>
<tr>
<td>fitStart</td>
<td>按比例拉伸图片，拉伸后图片的高度为View的高度，且显示在View的左边</td>
</tr>
<tr>
<td>fitCenter</td>
<td>按比例拉伸图片，拉伸后图片的高度为View的高度，且显示在View的中间</td>
</tr>
<tr>
<td>fitEnd</td>
<td>按比例拉伸图片，拉伸后图片的高度为View的高度，且显示在View的右边</td>
</tr>
<tr>
<td>center</td>
<td>按原图大小显示图片，但图片宽高大于View的宽高时，截取图片中间部分显示</td>
</tr>
<tr>
<td>centerCrop</td>
<td>按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽)</td>
</tr>
<tr>
<td>centerInside</td>
<td>图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽</td>
</tr>
</tbody>
</table>
<h2 id="FloatingActionButton"><a href="#FloatingActionButton" class="headerlink" title="FloatingActionButton"></a>FloatingActionButton</h2><h3 id="FloatingActionButton常用属性"><a href="#FloatingActionButton常用属性" class="headerlink" title="FloatingActionButton常用属性"></a>FloatingActionButton常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:backgroundTint</td>
<td>setBackgroundTintList</td>
<td>设置FAB的背景颜色。</td>
</tr>
<tr>
<td>app:rippleColor</td>
<td>setRippleColor</td>
<td>设置FAB点击时的背景颜色。</td>
</tr>
<tr>
<td>app:borderWidth</td>
<td>-</td>
<td>该属性尤为重要</td>
</tr>
<tr>
<td>app:elevation</td>
<td>setElevation()</td>
<td>默认状态下FAB的阴影大小。</td>
</tr>
<tr>
<td>app:pressedTranslationZ</td>
<td>-</td>
<td>点击时候FAB的阴影大小。</td>
</tr>
<tr>
<td>app:fabSize</td>
<td>-</td>
<td>设置FAB的大小，该属性有两个值，分别为normal和mini，对应的FAB大小分别为56dp和40dp。</td>
</tr>
<tr>
<td>src</td>
<td>setImageResource</td>
<td>设置FAB的图标，Google建议符合Design设计的该图标大小为24dp。</td>
</tr>
<tr>
<td>app:layout_anchor</td>
<td>-</td>
<td>设置FAB的锚点，即以哪个控件为参照点设置位置。</td>
</tr>
<tr>
<td>app:layout_anchorGravity</td>
<td>-</td>
<td>设置FAB相对锚点的位置，值有 bottom、center、right、left、top等。</td>
</tr>
<tr>
<td>app:layout_behavior</td>
<td></td>
<td>设置behavior</td>
</tr>
</tbody>
</table>
<h3 id="FloatingActionButton注意事项"><a href="#FloatingActionButton注意事项" class="headerlink" title="FloatingActionButton注意事项"></a>FloatingActionButton注意事项</h3><ul>
<li><code>app:borderWidth</code>如果不设置0dp，那么在4.1的sdk上FAB会显示为正方形，而且在5.0以后的sdk没有阴影效果。所以设置为borderWidth=”0dp”</li>
<li>设置<code>app:layout_behavior</code>来协调控件动作</li>
</ul>
<h2 id="ImageButton"><a href="#ImageButton" class="headerlink" title="ImageButton"></a>ImageButton</h2><h3 id="ImageButton常用属性"><a href="#ImageButton常用属性" class="headerlink" title="ImageButton常用属性"></a>ImageButton常用属性</h3><ul>
<li>与<a href="#ImageView">ImageView</a>相同</li>
</ul>
<h3 id="ImageButton注意事项"><a href="#ImageButton注意事项" class="headerlink" title="ImageButton注意事项"></a>ImageButton注意事项</h3><ul>
<li>与<a href="#ImageView">ImageView</a>相同</li>
</ul>
<h2 id="ZoomButton"><a href="#ZoomButton" class="headerlink" title="ZoomButton"></a>ZoomButton</h2><h3 id="ZoomButton常用属性"><a href="#ZoomButton常用属性" class="headerlink" title="ZoomButton常用属性"></a>ZoomButton常用属性</h3><ul>
<li>与<a href="#ImageView">ImageView</a>相同</li>
</ul>
<h3 id="ZoomButton注意事项"><a href="#ZoomButton注意事项" class="headerlink" title="ZoomButton注意事项"></a>ZoomButton注意事项</h3><ul>
<li>通过<code>setZoomSpeed()</code>设置速度</li>
</ul>
<h2 id="QuickContactBadge"><a href="#QuickContactBadge" class="headerlink" title="QuickContactBadge"></a>QuickContactBadge</h2><h3 id="QuickContactBadge常用属性"><a href="#QuickContactBadge常用属性" class="headerlink" title="QuickContactBadge常用属性"></a>QuickContactBadge常用属性</h3><ul>
<li>与<a href="#ImageView">ImageView</a>相同</li>
</ul>
<h3 id="QuickContactBadge注意事项"><a href="#QuickContactBadge注意事项" class="headerlink" title="QuickContactBadge注意事项"></a>QuickContactBadge注意事项</h3><ul>
<li><code>assignContactFromPhone()</code>关联到指定电话号码对应的联系人</li>
<li><code>assignContactFromEmail()</code>关联到指定邮件对应的联系人</li>
<li><code>assignContactUri()</code>关联到指定Uri对应的联系人</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/xyz_lmn/article/details/48055919" target="_blank" rel="external">android CoordinatorLayout使用</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/45059587" target="_blank" rel="external">Android RecyclerView 使用完全解析 体验艺术般的控件</a><br><a href="http://www.open-open.com/lib/view/open1437207632162.html" target="_blank" rel="external">codepath教程：浮动操作按钮详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ImageView及其子类的类图&quot;&gt;&lt;a href=&quot;#ImageView及其子类的类图&quot; class=&quot;headerlink&quot; title=&quot;ImageView及其子类的类图&quot;&gt;&lt;/a&gt;ImageView及其子类的类图&lt;/h2
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础控件" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>TextView及其子类的使用</title>
    <link href="https://luoweiguang.github.io/2016/07/26/TextView%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/07/26/TextView及其子类的使用/</id>
    <published>2016-07-26T14:00:00.000Z</published>
    <updated>2017-11-15T05:17:23.539Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="TextView及其子类的类图"><a href="#TextView及其子类的类图" class="headerlink" title="TextView及其子类的类图"></a>TextView及其子类的类图</h2><p><img src="/img/20160726000001.png" alt=""></p>
<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><h3 id="TextView常用属性"><a href="#TextView常用属性" class="headerlink" title="TextView常用属性"></a>TextView常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:autoLink</td>
<td>setAutoLinkMask(int)</td>
<td>是否将符合指定格式的文本转换为可单击的超链接形式</td>
</tr>
<tr>
<td>android:drawableBottom</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的底部绘制指定图像</td>
</tr>
<tr>
<td>android:drawableLeft</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的左侧绘制指定图像</td>
</tr>
<tr>
<td>android:drawableRight</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的右侧绘制指定图像</td>
</tr>
<tr>
<td>android:drawableTop</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的顶部绘制指定图像</td>
</tr>
<tr>
<td>android:ellipsize</td>
<td>setEllipsize()</td>
<td>设置当显示的文本超过TextView的长度时如何处理</td>
</tr>
<tr>
<td>android:gravity</td>
<td>setGravity()</td>
<td>设置文本位置</td>
</tr>
<tr>
<td>android:lines</td>
<td>setLines()</td>
<td>设置文本的行数</td>
</tr>
<tr>
<td>android:marqueeRepeatLimit</td>
<td>setMarqueeRepeatLimit()</td>
<td>设置marquee动画重复的次数</td>
</tr>
<tr>
<td>android:maxLines</td>
<td>setMaxLines()</td>
<td>设置该最大行数</td>
</tr>
<tr>
<td>android:singleLine</td>
<td>setTransformationMethod()</td>
<td>设置该文本是否为单行模式</td>
</tr>
<tr>
<td>android:textColor</td>
<td>setTextColor()</td>
<td>设置文本颜色</td>
</tr>
<tr>
<td>android:textSize</td>
<td>setTextSize()</td>
<td>设置文本字体大小</td>
</tr>
<tr>
<td>android:textStyle</td>
<td>setTypeface()</td>
<td>设置文本框内字体风格，如粗体，斜体</td>
</tr>
</tbody>
</table>
<h3 id="TextView注意事项"><a href="#TextView注意事项" class="headerlink" title="TextView注意事项"></a>TextView注意事项</h3><ul>
<li>用Html类的fromHtml()方法格式化要放到TextView里的文字。（比如实现下划线）</li>
<li>用Spannable或实现它的类，如<code>·SpannableString</code>。</li>
<li>文本末尾显示省略号：<code>android:ellipsize=&quot;end&quot;</code></li>
<li>实现跑马灯效果<pre class=" language-xml"><code class="language-xml">android:singleLine="true"
android:focusableInTouchMode="true"
android:focusable="true"
android:marqueeRepeatLimit="marquee_forever"
</code></pre>
</li>
<li>让跑马灯再次获得焦点<code>android:clickable=&quot;true&quot;</code></li>
</ul>
<h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><h3 id="Button常用属性"><a href="#Button常用属性" class="headerlink" title="Button常用属性"></a>Button常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:clickable</td>
<td>setClickable()</td>
<td>控件能否点击</td>
</tr>
<tr>
<td>android:enabled</td>
<td>setEnabled()</td>
<td>控件能否活动</td>
</tr>
<tr>
<td>android:textAllCaps</td>
<td>setAllCaps()</td>
<td>文本是否大写</td>
</tr>
</tbody>
</table>
<h3 id="Button注意事项"><a href="#Button注意事项" class="headerlink" title="Button注意事项"></a>Button注意事项</h3><ul>
<li>Clickable为false无效 setOnClickListener事件会把setClickable设为true，所以要在setOnClickListener后调用才有效</li>
<li>默认高度问题 Button默认设置了最小高度，所以，在使用自定义backgroud属性时，当paddingTop和paddingBottom设置的值小于这个默认最小高度时，paddingTop和paddingBottom的设置是无效的，此时，解决办法如下，设置minHeight为0：<code>android:minHeight=&quot;0dp&quot;</code></li>
<li>系统自带阴影问题 在5.0及更高版本系统中，Button等部分控件会自带边界阴影效果，可通过如下属性设置取消默认样式：<code>style=&quot;?android:attr/borderlessButtonStyle&quot;</code></li>
<li>Android Studio下Button的android:textAllCaps默认为true，所以显示的字母为大写，设置为false即可</li>
</ul>
<h2 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h2><h3 id="CheckBox常用属性"><a href="#CheckBox常用属性" class="headerlink" title="CheckBox常用属性"></a>CheckBox常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:checked</td>
<td>setChecked()</td>
<td>设置是否选中状态</td>
</tr>
<tr>
<td>android:button</td>
<td>setButtonDrawable()</td>
<td>设置选中框图片</td>
</tr>
</tbody>
</table>
<h3 id="CheckBox注意事项"><a href="#CheckBox注意事项" class="headerlink" title="CheckBox注意事项"></a>CheckBox注意事项</h3><ul>
<li>去除选中框 <code>android:button=&quot;@null&quot;</code></li>
</ul>
<h2 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h2><h3 id="RadioButton常用属性"><a href="#RadioButton常用属性" class="headerlink" title="RadioButton常用属性"></a>RadioButton常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:checked</td>
<td>setChecked()</td>
<td>设置是否选中状态</td>
</tr>
<tr>
<td>android:button</td>
<td>setButtonDrawable()</td>
<td>设置选中框图片</td>
</tr>
</tbody>
</table>
<h3 id="RadioButton注意事项"><a href="#RadioButton注意事项" class="headerlink" title="RadioButton注意事项"></a>RadioButton注意事项</h3><ul>
<li>去除选中框 <code>android:button=&quot;@null&quot;</code></li>
<li>不是单选效果 造成原因是未给RadioButton设置id属性</li>
</ul>
<h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><h3 id="Switch常用属性"><a href="#Switch常用属性" class="headerlink" title="Switch常用属性"></a>Switch常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:checked</td>
<td>setChecked()</td>
<td>设置是否选中状态</td>
</tr>
<tr>
<td>android:thumb</td>
<td>setThumbResource()</td>
<td>设置滑块图片</td>
</tr>
<tr>
<td>android:track</td>
<td>setTrackResource()</td>
<td>设置背景图片</td>
</tr>
<tr>
<td>android:textOff</td>
<td>setTextOff()</td>
<td>当状态关闭时的文本</td>
</tr>
<tr>
<td>android:textOn</td>
<td>setTextOn()</td>
<td>当状态打开时的文本</td>
</tr>
<tr>
<td>android:switchMinWidth</td>
<td>setSwitchMinWidth()</td>
<td>设置最小宽度</td>
</tr>
</tbody>
</table>
<h2 id="ToggleButton"><a href="#ToggleButton" class="headerlink" title="ToggleButton"></a>ToggleButton</h2><h3 id="ToggleButton常用属性"><a href="#ToggleButton常用属性" class="headerlink" title="ToggleButton常用属性"></a>ToggleButton常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:checked</td>
<td>setChecked()</td>
<td>设置是否选中状态</td>
</tr>
<tr>
<td>android:textOff</td>
<td>setTextOff()</td>
<td>当状态关闭时的文本</td>
</tr>
<tr>
<td>android:textOn</td>
<td>setTextOn()</td>
<td>当状态打开时的文本</td>
</tr>
</tbody>
</table>
<h2 id="CheckedTextView"><a href="#CheckedTextView" class="headerlink" title="CheckedTextView"></a>CheckedTextView</h2><h3 id="CheckedTextView常用属性"><a href="#CheckedTextView常用属性" class="headerlink" title="CheckedTextView常用属性"></a>CheckedTextView常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:checked</td>
<td>setChecked()</td>
<td>设置是否选中状态</td>
</tr>
<tr>
<td>android:checkMark</td>
<td>setCheckMarkDrawable()</td>
<td>设置勾选图片</td>
</tr>
</tbody>
</table>
<h3 id="CheckedTextView注意事项"><a href="#CheckedTextView注意事项" class="headerlink" title="CheckedTextView注意事项"></a>CheckedTextView注意事项</h3><ul>
<li>设置系统的勾选图片为<code>android:checkMark=&quot;?android:attr/listChoiceIndicatorMultiple&quot;</code>不设置将不会显示勾选图片</li>
</ul>
<h2 id="Chronometer"><a href="#Chronometer" class="headerlink" title="Chronometer"></a>Chronometer</h2><h3 id="Chronometer常用属性"><a href="#Chronometer常用属性" class="headerlink" title="Chronometer常用属性"></a>Chronometer常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:format</td>
<td>setFormat()</td>
<td>设置格式化字符串</td>
</tr>
</tbody>
</table>
<h3 id="Chronometer常见方法"><a href="#Chronometer常见方法" class="headerlink" title="Chronometer常见方法"></a>Chronometer常见方法</h3><ul>
<li>getBase() 返回先前由setBase(long)设置的基准时间。</li>
<li>setBase (long base) 设置基准时间</li>
<li>start() 开始计时，只是视图上的改变，不会影响基准时间</li>
<li>stop() 停止计时，只是视图上的不变，不会调整基准时间</li>
</ul>
<h3 id="Chronometer注意事项"><a href="#Chronometer注意事项" class="headerlink" title="Chronometer注意事项"></a>Chronometer注意事项</h3><ul>
<li>Chronometer的时间为当前时间减去基准时间</li>
<li>设置<code>setBase(SystemClock.elapsedRealtime()</code>开始重新计时</li>
</ul>
<h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><h3 id="EditText常用属性"><a href="#EditText常用属性" class="headerlink" title="EditText常用属性"></a>EditText常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:cursorVisible</td>
<td>setCursorVisible()</td>
<td>设置光标是否可见</td>
</tr>
<tr>
<td>android:digits</td>
<td>setKeyListener()</td>
<td>限制使用什么字符</td>
</tr>
<tr>
<td>android:drawableBottom</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的底部绘制指定图像</td>
</tr>
<tr>
<td>android:drawableLeft</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的左侧绘制指定图像</td>
</tr>
<tr>
<td>android:drawableRight</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的右侧绘制指定图像</td>
</tr>
<tr>
<td>android:drawableTop</td>
<td>setCompoundDrawablesWithIntrinsicBounds()</td>
<td>在文本的顶部绘制指定图像</td>
</tr>
<tr>
<td>android:ellipsize</td>
<td>setEllipsize()</td>
<td>设置当显示的文本超过TextView的长度时如何处理</td>
</tr>
<tr>
<td>android:enabled</td>
<td>setEnabled()</td>
<td>设置是否可编辑</td>
</tr>
<tr>
<td>android:hint</td>
<td>setHint()</td>
<td>文本为空时的提示文本</td>
</tr>
<tr>
<td>android:imeOptions</td>
<td>setImeOptions()</td>
<td>设置软键盘回车键特殊功能</td>
</tr>
<tr>
<td>android:inputType</td>
<td>setRawInputType()</td>
<td>设置文本框类型</td>
</tr>
<tr>
<td>android:lines</td>
<td>setLines()</td>
<td>设置文本的行数</td>
</tr>
<tr>
<td>android:selectAllOnFocus</td>
<td>setSelectAllOnFocus</td>
<td>当获得焦点时自动选择全部文本</td>
</tr>
<tr>
<td>android:singleLine</td>
<td>setTransformationMethod()</td>
<td>设置该文本是否为单行模式</td>
</tr>
<tr>
<td>android:textCursorDrawable</td>
<td></td>
<td>修改光标图片</td>
</tr>
</tbody>
</table>
<h3 id="EditText注意事项"><a href="#EditText注意事项" class="headerlink" title="EditText注意事项"></a>EditText注意事项</h3><ul>
<li>当设置了某些文本框类型后会导致设置singleLine无效</li>
<li>修改光标位置 <code>setSelection()</code></li>
<li><code>android:textCursorDrawable</code>使用color无效</li>
</ul>
<h2 id="AutoCompleteTextView"><a href="#AutoCompleteTextView" class="headerlink" title="AutoCompleteTextView"></a>AutoCompleteTextView</h2><h3 id="AutoCompleteTextView常用属性"><a href="#AutoCompleteTextView常用属性" class="headerlink" title="AutoCompleteTextView常用属性"></a>AutoCompleteTextView常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:completionHint</td>
<td>setCompletionHint()</td>
<td>设置下拉菜单的提示标题</td>
</tr>
<tr>
<td>android:completionThreshold</td>
<td>setThreshold()</td>
<td>用户输入多少个字符时会提示</td>
</tr>
<tr>
<td>android:dropDownHeight</td>
<td>setDropDownHeight</td>
<td>设置下拉菜单高度</td>
</tr>
<tr>
<td>android:dropDownWidth</td>
<td>setDropDownWidth</td>
<td>设置下拉菜单宽度</td>
</tr>
</tbody>
</table>
<h2 id="MultiAutoCompleteTextView"><a href="#MultiAutoCompleteTextView" class="headerlink" title="MultiAutoCompleteTextView"></a>MultiAutoCompleteTextView</h2><h3 id="MultiAutoCompleteTextView常用属性"><a href="#MultiAutoCompleteTextView常用属性" class="headerlink" title="MultiAutoCompleteTextView常用属性"></a>MultiAutoCompleteTextView常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:completionHint</td>
<td>setCompletionHint()</td>
<td>设置下拉菜单的提示标题</td>
</tr>
<tr>
<td>android:completionThreshold</td>
<td>setThreshold()</td>
<td>用户输入多少个字符时会提示</td>
</tr>
<tr>
<td>android:dropDownHeight</td>
<td>setDropDownHeight</td>
<td>设置下拉菜单高度</td>
</tr>
<tr>
<td>android:dropDownWidth</td>
<td>setDropDownWidth</td>
<td>设置下拉菜单宽度</td>
</tr>
</tbody>
</table>
<h3 id="MultiAutoCompleteTextView注意事项"><a href="#MultiAutoCompleteTextView注意事项" class="headerlink" title="MultiAutoCompleteTextView注意事项"></a>MultiAutoCompleteTextView注意事项</h3><ul>
<li>使用<code>setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());</code>指定分隔符号，不指定分隔符号将不会有提示</li>
</ul>
<h2 id="TextClock"><a href="#TextClock" class="headerlink" title="TextClock"></a>TextClock</h2><h3 id="TextClock常用属性"><a href="#TextClock常用属性" class="headerlink" title="TextClock常用属性"></a>TextClock常用属性</h3><table>
<thead>
<tr>
<th>XML属性</th>
<th>相关方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:format12Hour</td>
<td>setFormat12Hour()</td>
<td>设置12时制格式</td>
</tr>
<tr>
<td>android:format24Hour</td>
<td>setFormat24Hour()</td>
<td>设置24时制格式</td>
</tr>
</tbody>
</table>
<h3 id="TextClock注意事项"><a href="#TextClock注意事项" class="headerlink" title="TextClock注意事项"></a>TextClock注意事项</h3><ul>
<li>yy用两位数表示年份，yyyy用四位数表示年份</li>
<li>MMM用英语月份的缩写表示，MMMM用英语月份的完整形式</li>
<li>EE为星期的缩写形式，EEEE为星期的完整形式</li>
<li>dd表示此月的第几天</li>
<li>aa表示上午还是下午</li>
<li>H表示24小时制的小时，h表示12时制的小时</li>
<li>MM或mm表示分钟</li>
<li>ss表示秒</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;TextView及其子类的类图&quot;&gt;&lt;a href=&quot;#TextView及其子类的类图&quot; class=&quot;headerlink&quot; title=&quot;TextView及其子类的类图&quot;&gt;&lt;/a&gt;TextView及其子类的类图&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础控件" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ADB命令总结</title>
    <link href="https://luoweiguang.github.io/2016/07/24/ADB%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://luoweiguang.github.io/2016/07/24/ADB命令总结/</id>
    <published>2016-07-24T14:00:00.000Z</published>
    <updated>2017-11-15T06:34:51.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="adb与shell命令来源"><a href="#adb与shell命令来源" class="headerlink" title="adb与shell命令来源"></a>adb与shell命令来源</h2><pre><code>/frameworks/base/cmds
</code></pre><pre><code>/system/core/toolbox
</code></pre><a id="more"></a>
<h2 id="adb简介"><a href="#adb简介" class="headerlink" title="adb简介"></a>adb简介</h2><p>adb 其实就是 Android Debug Bridge, Android 调试桥的缩写，adb 是一个 C/S 架构的命令行工具，主要由 3 部分组成：</p>
<ul>
<li>运行在 PC 端的 Client : 可以通过它对 Android 应用进行安装、卸载及调试</li>
<li>运行在 PC 端的 Service : 其管理客户端到 Android 设备上 adb 后台进程的连接adb 服务启动后，Windows 可以在任务管理器中找到 adb.exe 这个进程</li>
<li>运行在 Android 设备上的 adb 后台进程</li>
</ul>
<h2 id="adb命令"><a href="#adb命令" class="headerlink" title="adb命令"></a>adb命令</h2><h3 id="管理多台设备"><a href="#管理多台设备" class="headerlink" title="管理多台设备"></a>管理多台设备</h3><pre><code>adb [-e | -d | -s &lt;设备序列号&gt;] &lt;子命令&gt;
</code></pre><p>　　　　　　<br><code>-d</code> 发送命令给usb连接的设备<br><code>-e</code> 发送命令到模拟器设备<br><code>-s &lt;设备序列号&gt;</code> 发送命令到指定设备</p>
<h3 id="adb-常用命令"><a href="#adb-常用命令" class="headerlink" title="adb 常用命令"></a>adb 常用命令</h3><ul>
<li><figcaption>devices</code> , 获取设备列表及设备状态</p></figcaption><pre class=" language-adb"><code class="language-adb"><pre><code>H:\androidDemo\Test>adb devices
List of devices attached
192.168.56.101:5555     device
</code></pre></li>
<li><p><code>adb get-state</code> , 获取设备的状态</p>
<pre><code>H:\androidDemo\Test&gt;adb get-state
device
</code></pre><blockquote>
<p>设备的状态有 3 钟，device , offline , unknown</p>
</blockquote>
</li>
</ul>
<blockquote>
<ul>
<li>device：设备正常连接</li>
<li>offline：连接出现异常，设备无响应</li>
<li>unknown：没有连接设备</li>
</ul>
</blockquote>
<ul>
<li><code>adb kill-server</code> , 结束 adb 服务</li>
<li><code>adb start-server</code> , 启动 adb 服务</li>
<li><code>adb logcat</code> , 打印 Android 的系统日志</li>
<li><p><code>adb bugreport</code> 打印dumpsys、dumpstate、logcat的输出，也是用于分析错误</p>
<blockquote>
<p>输出比较多，建议重定向到一个文件中</p>
<pre><code>H:\androidDemo\Test&gt;adb bugreport &gt; E:\\a.txt
</code></pre></blockquote>
</li>
<li><p><code>adb install [-l   -r   -t   -s -d]&lt; file &gt;</code> , 安装应用</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>表示应用为受限应用</td>
</tr>
<tr>
<td>-r:</td>
<td>替换已经存在的应用</td>
</tr>
<tr>
<td>-t</td>
<td>运行安装测试包</td>
</tr>
<tr>
<td>-s</td>
<td>安装到SD卡中</td>
</tr>
<tr>
<td>-d</td>
<td>允许安装到sd卡中</td>
</tr>
</tbody>
</table>
<p>安装部分软件需要对应的CPU版本才行，不然会报错误。</p>
<ul>
<li><p><code>adb uninstall [-k]&lt; package &gt;</code> , 卸载应用</p>
<blockquote>
<p>-k:保持data和cache下的文件</p>
</blockquote>
</li>
<li><p><code>adb pull &lt;remote&gt; &lt;local&gt;</code> , 将 Android 设备上的文件或者文件夹复制到本地</p>
</li>
</ul>
<blockquote>
<p>注意权限，复制系统权限的目录下的文件，需要 root ，并且一般的 Android 机 root 之后并不能使用命令去复制，而需要在手机上使用类似于 RE 的文件浏览器，先对系统的文件系统进行挂载为可读写后，才能在手机上复制移动系统文件，这里推荐使用小米手机的开发版本，IUNI 也是不错滴</p>
</blockquote>
<ul>
<li><p><code>adb push &lt;local&gt; &lt;remote&gt;</code> , 推送本地文件至Android设备</p>
<blockquote>
<p>sdcard 后面的斜杠不能少</p>
</blockquote>
</li>
<li><p><code>adb root</code> , <code>adb remount</code>, 只针对类似小米开发版的手机有用，可以直接已这两个命令获取 root 权限，并挂载系统文件系统为可读写状态</p>
</li>
<li><p><code>adb reboot</code> , 重启 Android 设备</p>
<blockquote>
<p>bootloader , 重启设备，进入 fastboot 模式，同 adb reboot-bootloader 命令<br>recovery , 重启设备，进入 recovery 模式，经常刷机的同学比较熟悉这个模式</p>
</blockquote>
</li>
<li><p><code>adb forward</code> , 将 宿主机上的某个端口重定向到设备的某个端口</p>
<blockquote>
<p>adb forward tcp:1314 tcp :8888<br>执行该命令后所有发往宿主机 1314 端口的消息、数据都会转发到 Android 设备的 8888 端口上，因此可以通过远程的方式控制 Android 设备。</p>
</blockquote>
</li>
<li><p><code>adb connect</code> 远程连接 Android 设备</p>
<blockquote>
<p>手机、PC处于相同的网络下，手机 root ，安装应用 adbWireless ，启动应用后点击界面中间的按钮：接着运行 adb connect 192.168.1.102 , 即可通过无线的方式连接手机，缺点是速度比较慢</p>
</blockquote>
</li>
<li><p><code>adb get-serialno</code> 获取SN号</p>
</li>
<li><p><code>adb get-devpath</code> 获取device-path</p>
</li>
<li><p><code>adb backup</code></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>无</td>
<td>将应用的数据文件写入到指定的文件，在不指定-f输出目录的情况下，保持在当前目录的”backup.ab”</td>
</tr>
<tr>
<td><code>[-f &lt; file &gt;]</code></td>
<td>指定备份目录</td>
</tr>
<tr>
<td>``[-apk \</td>
<td>-noapk]``</td>
<td>是否备份apk文件，默认是noapk</td>
</tr>
<tr>
<td>``[-obb \</td>
<td>-noobb]``</td>
<td>是否备份obb数据包，默认是noobb</td>
</tr>
<tr>
<td>``[-shared \</td>
<td>-noshared]``</td>
<td>是否备份SD卡共享内容，默认是noshared</td>
</tr>
<tr>
<td><code>[-all]</code></td>
<td>备份所有已安装的应用</td>
</tr>
<tr>
<td>``[-system \</td>
<td>-nosystem]``</td>
<td>是否备份系统应用，-all默认是包括系统应用</td>
</tr>
<tr>
<td><code>&lt; packages... &gt;</code></td>
<td>备份指定的应用列表</td>
</tr>
</tbody>
</table>
<ul>
<li>adb restore <file> 将备份文件恢复到手机中</file></li>
</ul>
<h2 id="adb-shell-常用命令"><a href="#adb-shell-常用命令" class="headerlink" title="adb shell 常用命令"></a>adb shell 常用命令</h2><h3 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h3><ul>
<li><code>cd</code> 进入目录</li>
<li><code>cat [-beflnstuv] [-B bsize] [file...]</code> 查看文件内容</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>显示行号，但会忽略空行</td>
</tr>
<tr>
<td>-e</td>
<td>每一行后面加一个$符号</td>
</tr>
<tr>
<td>-n</td>
<td>显示行号</td>
</tr>
<tr>
<td>-s</td>
<td>显示行号，连续空行标记为一行</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<pre><code>H:\androidDemo\Test&gt;adb shell cat -e -B 1  /data/misc/wifi/*.conf
</code></pre><ul>
<li><code>df</code>    列出分区列表</li>
<li><code>du  [-H] [-L] [-P] [-a] [-d depth] [-s] [-cghikmnrx] [file...]</code>    查询文件或目录的磁盘使用空间</li>
<li><code>ls  [-a] [-i] [-l] [-n] [-s]</code>  列出目录内容<ul>
<li><code>-a</code>：列出所有文件，包括隐藏文件</li>
<li><code>-i</code>：输出文件的i节点的索引信息</li>
<li><code>-l</code> :列出文件的详细信息</li>
<li><code>-n</code>：用数字的GUID代替名称</li>
<li><code>-s</code>：输出该文件的大小</li>
</ul>
</li>
<li><code>grep [file...]</code> 指定文件中搜索特定的内容，并将含有这些内容的行标准输出(windows 请使用findstr替代grep)</li>
<li><code>mkdir   -p，-parents</code>   创建目录</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p，–parents</td>
<td>递归创建目录</td>
</tr>
</tbody>
</table>
<ul>
<li><code>touch   touch [-alm] [-t YYYYMMDD [.HHMMSS]] &lt; file &gt;</code> 创建文件</li>
<li><code>rm  [-f\|-i][-dPRrvWx]file</code>    删除文件</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>强制删除文件，系统不提示</td>
</tr>
<tr>
<td>-i</td>
<td>交互式删除，删除前提示</td>
</tr>
<tr>
<td>-d</td>
<td>改变硬连接数据删成0，删除该文件</td>
</tr>
<tr>
<td>-r</td>
<td>强制删除文件夹包括里面的文件</td>
</tr>
</tbody>
</table>
<ul>
<li><code>mv [-fiv]source target</code>    移动文件（相当于剪切）</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>强制移动，若文件已经存在目标则直接覆盖</td>
</tr>
<tr>
<td>-i</td>
<td>若目标文件已经存在，会询问是否覆盖</td>
</tr>
</tbody>
</table>
<ul>
<li><code>rmdir [-p] directory</code> 删除目录</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>递归删除目录，只能删除空目录</td>
</tr>
</tbody>
</table>
<ul>
<li><code>dd[operand...]</code></li>
<li><code>dd if =source of=targe</code> 复制文件</li>
</ul>
<h3 id="其他文件命令"><a href="#其他文件命令" class="headerlink" title="其他文件命令"></a>其他文件命令</h3><ul>
<li><p><code>chomd [OPTION] &lt;MODE&gt; &lt;FILE&gt;</code>  文件权限修改<br>|参数|说明|<br>|–|–|<br>|-R|递归改变文件和目录|<br>|-h|不遵循符号连接|</p>
</li>
<li><p><code>md5 file...</code>   查询文件的MD5值</p>
</li>
<li><code>mount [-r] [-w] [-o options] [-t type] device directory</code>   挂载设备信息</li>
<li><code>umount &lt;path&gt;</code> 卸载分区挂载</li>
<li><code>cmp[-b][-l][-n count] file1 file2</code> 要指出两个文件是否存在差异</li>
</ul>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul>
<li><code>wm size</code>   获取屏幕分辨率</li>
<li><code>dmesg</code> 输出内核信息</li>
<li><code>wipe wipe system | data | all</code> 擦除分区，恢复出厂设置</li>
<li><code>adb shell svc wifi [enable|disable]</code><br>|参数|说明|<br>|–|–|<br>|enable|打开wifi|<br>|disable|关闭wifi|</li>
</ul>
<ul>
<li><code>screenrecord &lt;文件保存路径&gt;</code> 屏幕录像(只支持android4.4以上的设备,)使用ctrl+c停止录像</li>
<li><p><code>screencap -p 文件保存路径</code>   屏幕截图</p>
</li>
<li><p><code>ping [option] ipv4</code> 因特网包探测器，用于测试网络连接量的程序</p>
</li>
</ul>
<h2 id="pm"><a href="#pm" class="headerlink" title="pm"></a>pm</h2><blockquote>
<p>Package Manager , 可以用获取到一些安装在 Android 设备上得应用信息,直接运行 adb shell pm 可以获取到该命令的帮助信息</p>
</blockquote>
<ul>
<li><code>pm list packages [参数] [过滤器]</code> 列出安装在设备上的应用</li>
</ul>
<blockquote>
<p>不带任何选项：列出所有的应用的包名（不知道怎么找应用的包名的同学看这里）<br>adb shell pm list package</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-s</td>
<td>列出系统应用</td>
</tr>
<tr>
<td>-3</td>
<td>列出第三方应用</td>
</tr>
<tr>
<td>-f</td>
<td>列出应用包名及对应的apk名及存放位置</td>
</tr>
<tr>
<td>-i</td>
<td>列出应用包名及其安装来源</td>
</tr>
<tr>
<td>-d</td>
<td>列出禁用的应用的包名</td>
</tr>
<tr>
<td>-e</td>
<td>列出可用的应用的包名</td>
</tr>
</tbody>
</table>
<blockquote>
<p>命令最后增加 FILTER：过滤关键字，可以很方便地查找自己想要的应用<br>参数组合使用，例如，查找三方应用中知乎的包名、apk存放位置、安装来源：<br>[xuxu:~]$ <code>adb shell pm list package -f -3 -i zhihu</code><br>package:/data/app/com.zhihu.android-1.apk=com.zhihu.android  installer=com.xiaomi.market</p>
</blockquote>
<ul>
<li><p><code>pm path</code> 列出对应包名的 .apk 位置</p>
<blockquote>
<p>[xuxu:~]$ <code>adb shell pm path com.tencent.mobileqq</code><br>package:/data/app/com.tencent.mobileqq-1.apk</p>
</blockquote>
</li>
<li><p>pm list instrumentation , 列出含有单元测试 case 的应用，后面可跟参数 -f （与 pm list package 中一样），以及 [TARGET-PACKAGE]</p>
</li>
<li><p>pm dump , 后跟包名，列出指定应用的 dump 信息，里面有各种信息</p>
<blockquote>
<p><code>adb shell pm dump com.tencent.mobileqq</code></pre>
</blockquote>
</li>
<li><p>pm install [-lrtsfd] [-i PACKAGE] [PATH] , 安装应用</p>
</li>
</ul>
<blockquote>
<p>目标 apk 存放于 PC 端，请用 adb install 安装<br>目标 apk 存放于 Android 设备上，请用 pm install 安装</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>锁定应用程序</td>
</tr>
<tr>
<td>-r</td>
<td>重新安装应用，且保留应用数据</td>
</tr>
<tr>
<td>-t</td>
<td>允许测试apk被安装</td>
</tr>
<tr>
<td><code>-i &lt;INSTALLER_PACKAGE_NAME&gt;</code></td>
<td>指定安装包的包名</td>
</tr>
<tr>
<td>-s</td>
<td>安装到sd卡</td>
</tr>
<tr>
<td>-f</td>
<td>安装到系统内置存储中（默认安装位置）</td>
</tr>
<tr>
<td>-d</td>
<td>允许降级安装（同一应用低级换高级）</td>
</tr>
<tr>
<td>-g</td>
<td>授予应用程序清单中列出的所有权限（只有6.0系统可用）</td>
</tr>
</tbody>
</table>
<ul>
<li>pm uninstall [options] &lt;包名&gt; , 卸载应用，同 adb uninstall</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-k</td>
<td>卸载应用且保留数据与缓存（如果不加-k则全部删除）</td>
</tr>
</tbody>
</table>
<ul>
<li>pm clear , 清除应用数据</li>
<li>pm set-install-location , pm get-install-location , 设置应用安装位置，获取应用安装位置</li>
</ul>
<blockquote>
<p>[0/auto]：默认为自动<br>[1/internal]：默认为安装在手机内部<br>[2/external]：默认安装在外部存储</p>
</blockquote>
<ul>
<li>pm list permission-groups 察看已知的权限组</li>
<li>pm list permissions [参数] [权限组]<br>察看所有已知的权限</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g</td>
<td>按组进行列出权限</td>
</tr>
<tr>
<td>-f</td>
<td>打印所有信息</td>
</tr>
<tr>
<td>-s</td>
<td>简短的摘要</td>
</tr>
<tr>
<td>-d</td>
<td>只有危险的权限列表</td>
</tr>
<tr>
<td>-u</td>
<td>只有权限的用户将看到列表，用户自定义权限</td>
</tr>
</tbody>
</table>
<ul>
<li>pm grant &lt;包名&gt; &lt;权限名&gt; 授予应用权限许可。必需android6.0（API级别23）以上的设备</li>
<li><p>pm revoke &lt;包名&gt; &lt;权限名&gt;  撤销应用权限。必需android6.0（API级别23）以上的设备</p>
</li>
<li><p>pm list features 列出所有硬件相关信息</p>
</li>
<li>pm list libraries ：当前设备支持的libs</li>
<li>pm list users ：系统上所有的users</li>
</ul>
<h2 id="am"><a href="#am" class="headerlink" title="am"></a>am</h2><ul>
<li><code>am start [参数] &lt;INTENT&gt;</code> , 启动一个 Activity，已启动系统相机应用为例</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-D</td>
<td>开启调试模式</td>
</tr>
<tr>
<td>-W</td>
<td>等待启动完成</td>
</tr>
<tr>
<td><code>--start-profile &lt;file&gt;</code></td>
<td>开始分析器和发送结果（文件）</td>
</tr>
<tr>
<td>–sampling INTERVAL</td>
<td>使用样本分析 间隔：微秒,样品（使用—start-profiler）之间</td>
</tr>
<tr>
<td><code>-P &lt;FILE&gt;</code></td>
<td>应用空闲下来后，停止profile</td>
</tr>
<tr>
<td>-R COUNT</td>
<td>重复活动推出&lt;统计&gt;次。每个重复之前，活动将会结束</td>
</tr>
<tr>
<td>-S</td>
<td>组织目标应用开始前的活动</td>
</tr>
<tr>
<td>–opengl-trace</td>
<td>启用跟踪OpenGL函数</td>
</tr>
<tr>
<td><code>[—user &lt;USER_ID&gt;</code></td>
<td>current]</td>
<td>指定哪些用户运行，如果不指定则使用当前用户</td>
</tr>
</tbody>
</table>
<ul>
<li><code>am instrument</code> , 启动一个 instrumentation , 单元测试或者 Robotium 会用到</li>
<li><code>am monitor</code> , 监控 crash 与 ANR</li>
</ul>
<blockquote>
<p>[xuxu:~]$ <code>adb shell am monitor</code><br>Monitoring activity manager…  available commands:<br>(q)uit: finish monitoring<br>** Activity starting: com.android.camera</p>
</blockquote>
<ul>
<li><code>am force-stop</code> , 后跟包名，结束应用</li>
<li><code>adb shell am kill [参数] &lt;process&gt;</code>,停止后台单个进程</li>
<li><code>adb shell am kill-all</code>,停止后台所进程</li>
<li><code>adb shell am startservice [参数] &lt;INTENT&gt;</code> , 启动一个服务</li>
<li><code>adb shell am stopservice [参数] &lt;INTENT&gt;</code>,停止一个服务</li>
<li><code>adb shell am broadcast [参数] &lt;INTENT&gt;</code> , 发送一个广播</li>
</ul>
<table>
<thead>
<tr>
<th>Intent</th>
<th>说明</th>
<th>Am参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>component</td>
<td>组件名称  格式为：包名/类名</td>
<td>-n</td>
</tr>
<tr>
<td>action</td>
<td>指定Intent的执行动作，比如调用拨打电话组件</td>
<td>-a</td>
</tr>
<tr>
<td>data_url</td>
<td>表示与动作要操纵的数据</td>
<td>-d</td>
</tr>
<tr>
<td>category</td>
<td>categary是一个字符串，提供了额外的信息，有关于能够处理这个Intent对象的组件种类</td>
<td>-c</td>
</tr>
<tr>
<td>extra</td>
<td>传递给Intent的额外数据，以Bundle的形式定义，就是一些键值对</td>
<td>-e</td>
</tr>
<tr>
<td>mime_type</td>
<td>MIME类型</td>
<td>-t</td>
</tr>
<tr>
<td>flags</td>
<td>各种类型的flag，很多是用来指定Android系统如何启动activity，还有启动了activity后如何对待他</td>
<td>-f</td>
</tr>
<tr>
<td>package</td>
<td>包名</td>
<td>-p</td>
</tr>
</tbody>
</table>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><ul>
<li><p><code>input text</code>, 发送文本内容，不能发送中文</p>
<pre><code>adb shell input text asd
</code></pre></li>
<li><p><code>input keyevent</code>, 发送按键事件</p>
<pre><code>adb shell input keyevent 3
</code></pre><p>常用的键<br>1 –&gt;  “KEYCODE_MENU”<br>3 –&gt;  “KEYCODE_HOME”<br>4 –&gt;  “KEYCODE_BACK”</p>
</li>
<li><p><code>input tap</code>, 对屏幕发送一个触摸事件 前一个为宽，后一个为高</p>
<pre><code>adb shell input tap 1000 800
</code></pre></li>
<li><p><code>input swipe</code>, 滑动事件</p>
<pre><code>adb shell input swipe 1000 800 100 800
</code></pre><p>如果版本不低于 4.4 , 可以模拟长按事件</p>
<pre><code>adb shell input tap 1000 800 1000 800 2000
</code></pre></li>
</ul>
<h2 id="dumpsys"><a href="#dumpsys" class="headerlink" title="dumpsys"></a>dumpsys</h2><blockquote>
<p>Dumpsys用户系统诊断，它运行在设备上，并提供系统服务状态信息</p>
</blockquote>
<ul>
<li><code>adb shell dumpsys [system serbices]</code></li>
</ul>
<h3 id="包信息查询"><a href="#包信息查询" class="headerlink" title="包信息查询"></a>包信息查询</h3><ul>
<li><code>adb shell dumpsys package [-h] [-f] [—checkin] [cmd]…</code></li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h</td>
<td>打印帮助信息</td>
</tr>
<tr>
<td>-f</td>
<td>打印intent filter的信息</td>
</tr>
<tr>
<td>–checkin</td>
<td>打印出已经登记的库、系统功能、安装包</td>
</tr>
<tr>
<td>cmd</td>
<td>子命令（可以在-h帮助文档中查看有哪些子命令）</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>cmd子命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>prov[iders]</td>
<td>获取content providers</td>
</tr>
<tr>
<td>p[ackages]</td>
<td>获取安装包基本信息</td>
</tr>
<tr>
<td>s[hared-user]</td>
<td>获取共享用户ID的应用</td>
</tr>
<tr>
<td>m[essages]</td>
<td>打印运行时收集的信息</td>
</tr>
<tr>
<td>v[erifiers]</td>
<td>打印包校验信息</td>
</tr>
<tr>
<td>version</td>
<td>打印数据库版本信息</td>
</tr>
<tr>
<td>write</td>
<td>写当前位置</td>
</tr>
<tr>
<td><code>&lt;package.name&gt;</code></td>
<td>输出给定包的信息</td>
</tr>
<tr>
<td>installs</td>
<td>安装会话的详细信息</td>
</tr>
<tr>
<td>l[ibraries]</td>
<td>列出已知的共享库</td>
</tr>
<tr>
<td>f[ibraries]</td>
<td>列出手机的功能</td>
</tr>
<tr>
<td>k[eysets]</td>
<td>列出各个包的Signing KeySets</td>
</tr>
<tr>
<td>r[esolvers]</td>
<td>获取intent filter</td>
</tr>
<tr>
<td>perm[issions]</td>
<td>获取权限</td>
</tr>
<tr>
<td>pref[erred]</td>
<td>打印包首选项</td>
</tr>
<tr>
<td>preferred-xml [—full]</td>
<td>打印包首选项，xml格式打印</td>
</tr>
</tbody>
</table>
<h3 id="activity信息查询"><a href="#activity信息查询" class="headerlink" title="activity信息查询"></a>activity信息查询</h3><ul>
<li><code>adb shell dumpsys activity [-a] [-c]…</code></li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>包括所有可用的服务器状态</td>
</tr>
<tr>
<td>-c</td>
<td>包括客户端状态</td>
</tr>
<tr>
<td>-p</td>
<td>限制输出为给定的包，例如： <code>adb shell dumpsys activity -p com.android.browser</code></td>
</tr>
<tr>
<td>-h</td>
<td>打印帮助信息</td>
</tr>
<tr>
<td>cmd</td>
<td>子命令</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>cmd子命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>a[ctivities]</td>
<td>activity堆栈状态</td>
</tr>
<tr>
<td>r[recents]</td>
<td>最近activity的状态</td>
</tr>
<tr>
<td>b[rodacasts] [package_name] [histpry [-s]]</td>
<td>广播状态</td>
</tr>
<tr>
<td>i[ntents] [package_name]</td>
<td>挂起的intent状态</td>
</tr>
<tr>
<td>p[rocesses] [package_name]</td>
<td>进程状态</td>
</tr>
<tr>
<td>o[om]</td>
<td>oom管理</td>
</tr>
<tr>
<td>perm[issions]</td>
<td>url权限授权状态</td>
</tr>
<tr>
<td>prov[iders] [comp_spec…]</td>
<td>content provider状态</td>
</tr>
<tr>
<td>provider [comp_spec]</td>
<td>provider客户端状态</td>
</tr>
<tr>
<td>s[ervices] [comp_spec…]</td>
<td>服务状态</td>
</tr>
<tr>
<td>as[sociations]</td>
<td>跟踪应用程序的关联</td>
</tr>
<tr>
<td>service [comp_spec]</td>
<td>服务客户端状态</td>
</tr>
<tr>
<td>package [package_name]</td>
<td>给的包的所有状态</td>
</tr>
<tr>
<td>all</td>
<td>转储所有的activityes</td>
</tr>
<tr>
<td>top</td>
<td>转储栈顶的activity</td>
</tr>
<tr>
<td>write</td>
<td>写入所有挂起状态存储</td>
</tr>
<tr>
<td>track-associations</td>
<td>允许会话跟踪</td>
</tr>
<tr>
<td>untrack-associations</td>
<td>禁用和明确会话跟踪，命令参数可能也是一个comp_spec 转储的activity</td>
</tr>
</tbody>
</table>
<h3 id="网络信息查询"><a href="#网络信息查询" class="headerlink" title="网络信息查询"></a>网络信息查询</h3><table>
<thead>
<tr>
<th>子命令</th>
<th>说明</th>
<th>命令格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>connectivity</td>
<td>网络连接</td>
<td>adb shell dumpsys connectivity</td>
</tr>
<tr>
<td>netpolicy</td>
<td>网络策略</td>
<td>adb shell dumpsys netpolicy</td>
</tr>
<tr>
<td>netstats</td>
<td>网络状态</td>
<td>adb shell dumpsys netstats</td>
</tr>
<tr>
<td>network_management</td>
<td>网络管理</td>
<td>adb shell dumpsys network_management</td>
</tr>
</tbody>
</table>
<h3 id="其他常用服务信息查询"><a href="#其他常用服务信息查询" class="headerlink" title="其他常用服务信息查询"></a>其他常用服务信息查询</h3><ul>
<li><code>adb shell dumpsys | findstr DUMP</code>列出所有服务</li>
<li><code>adb shell dumpsys window w | findstr \/ | findstr name=</code>获取当前应用的component</li>
</ul>
<table>
<thead>
<tr>
<th>子命令</th>
<th>说明</th>
<th>命令格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>meminfo</td>
<td>内存</td>
<td>adb shell dumpsys meminfo</td>
</tr>
<tr>
<td>cpuinfo</td>
<td>CPU</td>
<td>adb shell dumpsys cpuinfo</td>
</tr>
<tr>
<td>gfxinfo</td>
<td>帧率</td>
<td>adb shell dumpsys gfxinfo</td>
</tr>
<tr>
<td>display</td>
<td>显示</td>
<td>adb shell dumpsys display</td>
</tr>
<tr>
<td>power</td>
<td>电源</td>
<td>adb shell dumpsys power</td>
</tr>
<tr>
<td>batterystats</td>
<td>电池状态</td>
<td>adb shell dumpsys batterystats</td>
</tr>
<tr>
<td>battery</td>
<td>电池</td>
<td>adb shell dumpsys battery</td>
</tr>
<tr>
<td>alarm</td>
<td>闹钟</td>
<td>adb shell dumpsys alarm</td>
</tr>
<tr>
<td>location</td>
<td>位置</td>
<td>adb shell dumpsys location</td>
</tr>
<tr>
<td>telephony.registry</td>
<td>电话信息</td>
<td>adb shell dumpsys telephony.registry</td>
</tr>
<tr>
<td>wifi</td>
<td>wifi信息</td>
<td>adb shell dumpsys wifi</td>
</tr>
<tr>
<td>notification</td>
<td>通知信息</td>
<td>adb shell dumpsys notification</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/26599539/" target="_blank" rel="external">Android群英传</a><br><a href="http://blog.csdn.net/gb112211/article/details/45873727" target="_blank" rel="external">Android常用adb命令总结</a><br><a href="http://www.cnblogs.com/JianXu/category/782865.html" target="_blank" rel="external">Jian_Android命令篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;adb与shell命令来源&quot;&gt;&lt;a href=&quot;#adb与shell命令来源&quot; class=&quot;headerlink&quot; title=&quot;adb与shell命令来源&quot;&gt;&lt;/a&gt;adb与shell命令来源&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/frameworks/base/cmds
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/system/core/toolbox
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="ADB" scheme="https://luoweiguang.github.io/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>Android中的值文件</title>
    <link href="https://luoweiguang.github.io/2016/07/21/Android%E4%B8%AD%E7%9A%84%E5%80%BC%E6%96%87%E4%BB%B6/"/>
    <id>https://luoweiguang.github.io/2016/07/21/Android中的值文件/</id>
    <published>2016-07-21T14:00:00.000Z</published>
    <updated>2017-11-15T05:54:11.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="值文件标签汇总"><a href="#值文件标签汇总" class="headerlink" title="值文件标签汇总"></a>值文件标签汇总</h2><ul>
<li>string</li>
<li>string-array</li>
<li>bool</li>
<li>integer</li>
<li>integer-array</li>
<li>dimen</li>
<li>declare-styleable</li>
<li>eat-comment</li>
<li>attr</li>
<li>color</li>
<li>style</li>
<li>item</li>
<li>plurals</li>
<li>array</li>
<li>fraction</li>
<li>drawable</li>
</ul>
<a id="more"></a>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>字符串是最常见的资源文件,例如:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
</code></pre>
<p>如果该字符串资源不必本地化，这设置起<code>translatable=&quot;false&quot;</code>,例如:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">translatable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="string的特殊字符问题"><a href="#string的特殊字符问题" class="headerlink" title="string的特殊字符问题"></a>string的特殊字符问题</h3><blockquote>
<p>字符之间的空格用 Space 键是能显示出效果的的，但是字符后面如果需要添加空格，直接 Space 键是不管用的，此时 空格应该用 &#160;来表示</p>
</blockquote>
<pre><code>&quot;     (&amp;#34; 或 &amp;quot;) 
&#39;     (&amp;#39; 或 &amp;apos;) 
&amp;     (&amp;#38; 或 &amp;amp;) 
lt(&lt;) (&amp;#60; 或 &amp;lt;) 
gt(&gt;) (&amp;#62; 或 &amp;gt;)
</code></pre><p>输入<code>&quot;</code>应该是<code>\&quot;</code>或者<code>\&amp;quot;</code><br>输入<code>&#39;</code>应该是<code>\&#39;</code>或者<code>\&amp;apos;</code></p>
<table>
<thead>
<tr>
<th>实际值</th>
<th>转译字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>“</td>
<td>\”</td>
</tr>
<tr>
<td>‘</td>
<td>\’</td>
</tr>
<tr>
<td>@</td>
<td>\@</td>
</tr>
</tbody>
</table>
<h3 id="字符串资源的引用"><a href="#字符串资源的引用" class="headerlink" title="字符串资源的引用"></a>字符串资源的引用</h3><ul>
<li>xml中引用自定义字符串资源 <code>@string/...</code></li>
<li>java中引用自定义字符串资源<code>R.string.***</code></li>
<li>xml中引用框架层的字符串资源<code>@android:string/...</code></li>
<li>java中引用框架层的字符串资源<code>android.R.string.***</code></li>
</ul>
<h3 id="String通配符"><a href="#String通配符" class="headerlink" title="String通配符"></a>String通配符</h3><p>格式为%n$s表示字符串，其中n表示第n个要替换的数<br>%n$d表示整数，%n$f表示浮点数</p>
<p>例如：</p>
<ol>
<li><p>string定义</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wildcard_character<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>%1$s今年%2$d岁的概率为%3$f<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>代码中设置</p>
<pre class=" language-java"><code class="language-java">String values <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>wildcard_character<span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token number">99.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tvStringActivityWildcardCharacter<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>显示效果</p>
<pre><code>小明今年23岁的概率为99.990000
</code></pre></li>
</ol>
<h3 id="使用html标签"><a href="#使用html标签" class="headerlink" title="使用html标签"></a>使用html标签</h3><p>例如实现下划线可以用html的<code>&lt;u&gt;&lt;/u&gt;</code>标签</p>
<ol>
<li>xml中设置<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>underline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li>代码中设置<pre class=" language-java"><code class="language-java">tvStringActivityUnderline<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>Html<span class="token punctuation">.</span><span class="token function">fromHtml</span><span class="token punctuation">(</span><span class="token string">"代码设置"</span> <span class="token operator">+</span> <span class="token string">"&lt;u>"</span><span class="token operator">+</span> <span class="token string">"下划线"</span> <span class="token operator">+</span> <span class="token string">"&lt;/u>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h2 id="string-array"><a href="#string-array" class="headerlink" title="string-array"></a>string-array</h2><ol>
<li><p>xml中设置</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string_array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token punctuation">></span></span>"妙蛙种子"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token punctuation">></span></span>"小火龙"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token punctuation">></span></span>"杰尼龟"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string-array</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>代码中使用</p>
<pre class=" language-java"><code class="language-java">Resources res <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>string_array<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h2 id="integer-array"><a href="#integer-array" class="headerlink" title="integer-array"></a>integer-array</h2><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer_array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer-array</span><span class="token punctuation">></span></span>
</code></pre>
<p>代码中使用:</p>
<pre class=" language-java"><code class="language-java">Resources res <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getIntArray</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>integer_array<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="dimen"><a href="#dimen" class="headerlink" title="dimen"></a>dimen</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dimen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demen1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>18.2dp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dimen</span><span class="token punctuation">></span></span>
</code></pre>
<p>获取值的三种方法,以下三种返回的都是转换为px单位的数字</p>
<ul>
<li><p>返回”四舍五入”的int值</p>
<pre class=" language-java"><code class="language-java"><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>demen1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>返回舍去小数点后的int值.</p>
<pre class=" language-java"><code class="language-java"><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimensionPixelOffset</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>demen1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>返回浮点数</p>
<pre class=" language-java"><code class="language-java"><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimension</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>demen1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<h2 id="declare-styleable-eat-comment-attr"><a href="#declare-styleable-eat-comment-attr" class="headerlink" title="declare-styleable,eat-comment,attr"></a>declare-styleable,eat-comment,attr</h2><p><code>&lt;eat-comment/&gt;</code>去除标签</p>
<p><code>&lt;declare-styleable name=&quot;declare_styleable&quot;&gt;&lt;/declare-styleable&gt;</code>表示一个属性组</p>
<p><code>&lt;attr/&gt;</code>表示具体属性，其中<code>format</code>表示属性类型<br>属性类型包括:</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>布尔类型</td>
</tr>
<tr>
<td>color</td>
<td>颜色</td>
</tr>
<tr>
<td>dimension</td>
<td>尺寸</td>
</tr>
<tr>
<td>enum</td>
<td>枚举</td>
</tr>
<tr>
<td>flag</td>
<td>与</td>
</tr>
<tr>
<td>float</td>
<td>浮点型</td>
</tr>
<tr>
<td>fraction</td>
<td>百分比</td>
</tr>
<tr>
<td>integer</td>
<td>整形</td>
</tr>
<tr>
<td>reference</td>
<td>引用</td>
</tr>
<tr>
<td>string</td>
<td>字符串</td>
</tr>
</tbody>
</table>
<p>其中属性可以通过<code>|</code>表示多条属性。</p>
<p>例子</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- =============================================================== --></span>
<span class="token comment" spellcheck="true">&lt;!--                         去除掉注释                                --></span>
<span class="token comment" spellcheck="true">&lt;!-- =============================================================== --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>eat-comment</span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>declare_styleable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 名称 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reference|string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 性别 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 男性 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enum</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 女性 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enum</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attr</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 国家 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 中国 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flag</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 美国 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flag</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>America<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 日本 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flag</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Japan<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grow_up<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boolean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>salary<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fraction<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fraction<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span>
</code></pre>
<p>代码中使用</p>
<pre class=" language-java"><code class="language-java">TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable<span class="token punctuation">)</span><span class="token punctuation">;</span>
String name <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_age<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> country <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_country<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sex <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_sex<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> grow_up <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_grow_up<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> clothescolor <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_clothescolor<span class="token punctuation">,</span><span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> dimension <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getDimension</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_dimension<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> salary  <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_salary<span class="token punctuation">,</span><span class="token number">8888.88f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> fraction <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getFraction</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>declare_styleable_fraction<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0.25f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="color-bool-integer-drawable-fraction"><a href="#color-bool-integer-drawable-fraction" class="headerlink" title="color,bool,integer,drawable,fraction"></a>color,bool,integer,drawable,fraction</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBackground<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#262626<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>color</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>drawable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDrawable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@drawable/pikaqiu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>drawable</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>drawable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#ff0000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>drawable</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fraction</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFraction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>15%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fraction</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>style能够继承于已有的style，有两种继承方法</p>
<ul>
<li>name<br>设置name属性的名称为:继承的style名称+.+style名称</li>
</ul>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme.MyStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        &lt;item name=<span class="token string">"android:background"</span>>@color/myBackground&lt;/item>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<ul>
<li>parent<br>使用parent属性指定</li>
</ul>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyStyle<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        &lt;item name=<span class="token string">"android:background"</span>>@color/myBackground&lt;/item>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="item"><a href="#item" class="headerlink" title="item"></a>item</h2><p>type包括anim,animator,array,bool,color,declare-styleable,dimen,drawable,fraction,id,integer,interpolator,menu,mipmap,raw,layout,public,plurals,string,style,transition,xml</p>
<p>例子:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myItemString<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reference|string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自定义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myItemId<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reference|string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<p>使用:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/myItemString<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/myItemId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>相当于string-array和integer-array结合</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myArray<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="plurals"><a href="#plurals" class="headerlink" title="plurals"></a>plurals</h2><p><code>plurals</code>标签的作用是根据不同的数量返回不同的字符串结果</p>
<p>其中<code>quantity</code>定义数量，有以下几种zero，one，two，few，many，other等</p>
<p>例子：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plurals</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>numberOfEggs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>There is 1 egg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>There are %d eggs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plurals</span><span class="token punctuation">></span></span>
</code></pre>
<p>代码中使用</p>
<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQuantityString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>plurals<span class="token punctuation">.</span>numberOfEggs<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><code>`getQuantityString(@PluralsRes int id, int quantity, Object... formatArgs)</code>有三个参数，第一个为引用<code>plurals</code>，第二个为数量，即根据此参数返回不同的字符串，第三个参数即String的通配符替换，替换字符串中%d，%s,%f等</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://read.douban.com/ebook/15162348/" target="_blank" rel="external">深入Android应用开发：核心技术解析与最佳实践</a><br><a href="http://blog.csdn.net/jdsjlzx/article/details/9241173" target="_blank" rel="external">android string.xml 转译、特殊字符问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;值文件标签汇总&quot;&gt;&lt;a href=&quot;#值文件标签汇总&quot; class=&quot;headerlink&quot; title=&quot;值文件标签汇总&quot;&gt;&lt;/a&gt;值文件标签汇总&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;string-array&lt;/li&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;integer&lt;/li&gt;
&lt;li&gt;integer-array&lt;/li&gt;
&lt;li&gt;dimen&lt;/li&gt;
&lt;li&gt;declare-styleable&lt;/li&gt;
&lt;li&gt;eat-comment&lt;/li&gt;
&lt;li&gt;attr&lt;/li&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;li&gt;style&lt;/li&gt;
&lt;li&gt;item&lt;/li&gt;
&lt;li&gt;plurals&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;fraction&lt;/li&gt;
&lt;li&gt;drawable&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android的Drawable</title>
    <link href="https://luoweiguang.github.io/2016/07/19/Android%E7%9A%84Drawable/"/>
    <id>https://luoweiguang.github.io/2016/07/19/Android的Drawable/</id>
    <published>2016-07-19T14:00:00.000Z</published>
    <updated>2017-11-15T05:24:45.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Drawable汇总"><a href="#Drawable汇总" class="headerlink" title="Drawable汇总"></a>Drawable汇总</h2><ul>
<li>animated-rotate</li>
<li>animated-selector</li>
<li>animated-vector</li>
<li>animation-list</li>
<li>bitmap</li>
<li>clip</li>
<li>color</li>
<li>inset</li>
<li>layer-list</li>
<li>level-list</li>
<li>nine-patch</li>
<li>ripple</li>
<li>rotate</li>
<li>scale</li>
<li>selector</li>
<li>shape</li>
<li>transition</li>
<li>vector</li>
</ul>
<a id="more"></a>
<h2 id="animated-rotate"><a href="#animated-rotate" class="headerlink" title="animated-rotate"></a>animated-rotate</h2><p>rotate标签只是将原有的drawable转个角度变成另一个drawable，它是静态的。而animated-rotate则会让drawable不停地做旋转动画。</p>
<ul>
<li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li>
<li>android:pivotX 旋转中心的X坐标</li>
<li>android:pivotY 旋转中心的Y坐标</li>
<li>android:visible 设置初始的可见性状态，默认为false</li>
</ul>
<h2 id="animated-selector"><a href="#animated-selector" class="headerlink" title="animated-selector"></a>animated-selector</h2><ul>
<li>item<ul>
<li>android:id 设置状态id</li>
<li>其他请查看<a href="#selector">selector的状态属性</a></li>
</ul>
</li>
<li>transition<ul>
<li>android:fromId 设置起始状态id</li>
<li>android:toId 设置结束状态id</li>
</ul>
</li>
</ul>
<h2 id="animated-vector"><a href="#animated-vector" class="headerlink" title="animated-vector"></a>animated-vector</h2><ul>
<li>android:drawable 执行动画的vector图片</li>
<li>target<ul>
<li>android:animation 执行的动画</li>
<li>android:name 执行动画的部件，即vector中group的android:name属性</li>
</ul>
</li>
</ul>
<p>开始动画</p>
<pre class=" language-java"><code class="language-java"> <span class="token punctuation">(</span><span class="token punctuation">(</span>Animatable<span class="token punctuation">)</span> drawable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="animation-list"><a href="#animation-list" class="headerlink" title="animation-list"></a>animation-list</h2><blockquote>
<p>通过animation-list可以将一系列drawable构建成帧动画，就是将一个个drawable，一帧一帧的播放</p>
</blockquote>
<ul>
<li>android:oneshot属性设置是否循环播放，设为true时，只播放一轮就结束，设为false时，则会轮询播放。</li>
<li>android:duration属性设置该帧持续的时间，以毫秒数为单位。</li>
</ul>
<blockquote>
<p>animation-list对应的Drawable类为AnimationDrawable，要让动画运行起来，需要主动调用AnimationDrawable的start()方法。另外，如果在Activity的onCreate()方法里直接调用start()方法会没有效果，因为view还没有初始化完成是播放不了动画的。</p>
</blockquote>
<h2 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h2><blockquote>
<p>图片是最常用的drawable资源，格式包括：png(推荐)、jpg(可接受)、gif(不建议)。用图片资源需要根据不同屏幕密度提供多张不同尺寸的图片，它们的关系如下表：</p>
<table>
<thead>
<tr>
<th>密度分类</th>
<th>密度值范围</th>
<th>代表分辨率</th>
<th>图标尺寸</th>
<th>图片比例</th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi</td>
<td>120~160dpi</td>
<td>320x480px</td>
<td>48x48px</td>
<td>1</td>
</tr>
<tr>
<td>hdpi</td>
<td>160~240dpi</td>
<td>480x800px</td>
<td>72x72px</td>
<td>1.5</td>
</tr>
<tr>
<td>xhdpi</td>
<td>240~320dpi</td>
<td>720x1280px</td>
<td>96x96px</td>
<td>2</td>
</tr>
<tr>
<td>xxhdpi</td>
<td>320~480dpi</td>
<td>1080x1920px</td>
<td>144x144px</td>
<td>3</td>
</tr>
<tr>
<td>xxxhdpi</td>
<td>480~640dpi</td>
<td>1440x2560px</td>
<td>192x192px</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>本来还有一个ldpi的，但现在这种小屏幕的设备基本灭绝了，所以不需要再考虑适配。如上表所示，一套图片一般需要提供5张不同比例的图片。还好有切图工具，可以让切图变得简单，这里推荐两款：Cutterman和Cut&amp;Slice me，都是Photoshop下的插件，输出支持android、ios和web三种平台。<br>使用切图工具虽然方便了，但还是无法避免一套图片需要提供多张不同尺寸的图片，这会加大安装包的大小。另外，需要对图片做改动时，比如换个颜色，必须更换所有尺寸图片。所以，建议尽量减少引入图片，而通过使用shape、layer-list等自己画，易于修改和维护，也减少了安装包大小，适配性也更好。</p>
</blockquote>
<ul>
<li>android:src 图片资源id</li>
<li>android:alpha 设置图片的透明度，取值范围为0.0~1.0之间，0.0为全透明，1.0为全不透明，API Level最低要求是11，即Android 3.0</li>
<li>android:autoMirrored 图片是否需要镜像反转，当布局方向是RTL，即从右到左布局时才有用，API Level 19(Android 4.4)才添加的属性</li>
<li>android:antialias 是否开启抗锯齿.开启后会让图片变得平滑，同时也会在一定程度上降低图片的清晰度，但是这个降低的幅度较低以至于可以忽略，因此抗锯齿选项应该开启。</li>
<li>android:dither 是否开启抖动效果，当图片的像素配置和手机屏幕的像素配置不一致时，开启这个选项可以让高质量的图片在低质量的屏幕上还能保持较好的显示效果，一般情况下应该开启</li>
<li>android:filter 是否开启过滤效果，对图片尺寸被拉伸或者压缩时，开启过滤效果可以保持较好的显示效果</li>
<li>android:gravity 设置图片的对齐方式<br>|可选项|含义|<br>|–|–|<br>|top|图片放于容器顶部，不改变图片大小|<br>|bottom|图片放于容器底部，不改变图片大小|<br>|left|图片放于容器左边，不改变图片大小|<br>|right|图片放于容器右边，不改变图片大小|<br>|center|图片放于容器中心位置，包括水平和垂直方向，不改变图片大小|<br>|fill|拉伸整张图片以填满容器的整个高度和宽度，默认值|<br>|center_vertical|图片放于容器垂直方向的中心位置，不改变图片大小|<br>|center_horizontal|图片放于容器水平方向的中心位置，不改变图片大小|<br>|fill_vertical|在垂直方向上拉伸图片以填满容器的整个高度|<br>|fill_horizontal|在水平方向上拉伸图片以填满容器的整个宽度|<br>|clip_vertical|附加选项，裁剪基于垂直方向的gravity设置，设置top时会裁剪底部，设置bottom时会裁剪顶部，其他情况会同时裁剪顶部和底部|<br>|clip_horizontal |附加选项，裁剪基于水平方向的gravity设置，设置left时会裁剪右侧，设置right时会裁剪左侧，其他情况会同时裁剪左右两侧|</li>
</ul>
<ul>
<li>android:mipMap 一种图片相关的处理技术，也叫纹理映射，默认值为false，但API Level最低要求是17，即Android 4.2</li>
<li>android:tileMode 设置图片平铺的方式，取值为下面四种之一：</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>disable</td>
<td>不做任何平铺，默认设置</td>
</tr>
<tr>
<td>repeat</td>
<td>图片重复铺满</td>
</tr>
<tr>
<td>mirror</td>
<td>使用交替镜像的方式重复图片的绘制</td>
</tr>
<tr>
<td>clamp</td>
<td>复制图片边缘的颜色来填充容器剩下的空白部分，比如引入的图片如果是白色的边缘，那么图片所在的容器里除了图片，剩下的空间都会被填充成白色</td>
</tr>
</tbody>
</table>
<ul>
<li>android:tileModeX 和tileMode一样设置图片的平铺方式，只是这个属性只设置水平方向的平铺方式，这是API Level 21(Android 5.0)才添加的属性</li>
<li>android:tileModeY 和tileMode一样设置图片的平铺方式，只是这个属性只设置垂直方向的平铺方式，这是API Level 21(Android 5.0)才添加的属性</li>
<li>android:tintMode 着色模式，也是API Level 21(Android 5.0)才添加的属性</li>
</ul>
<h2 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h2><blockquote>
<p>使用clip标签可以对drawable进行裁剪，在做进度条时很有用。通过设置level值控制裁剪多少，level取值范围为0~10000，默认为0，表示完全裁剪，图片将不可见；10000则完全不裁剪，可见完整图片。</p>
</blockquote>
<ul>
<li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li>
<li>android:clipOrientation 设置裁剪的方向<br>|值|说明|<br>|–|–|<br>|horizontal|在水平方向上进行裁剪，条状的进度条就是水平方向的裁剪在垂直方向上进行裁剪|<br>|vertical|在垂直方向上进行裁剪|</li>
</ul>
<ul>
<li>android:gravity 设置裁剪的位置，可取值如下，多个取值用 | 分隔：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>top</td>
<td>图片放于容器顶部，不改变图片大小。当裁剪方向为vertical时，会裁掉图片底部</td>
</tr>
<tr>
<td>bottom</td>
<td>图片放于容器底部，不改变图片大小。当裁剪方向为vertical时，会裁掉图片顶部</td>
</tr>
<tr>
<td>left</td>
<td>图片放于容器左边，不改变图片大小，默认值。当裁剪方向为horizontal，会裁掉图片右边部分</td>
</tr>
<tr>
<td>right</td>
<td>图片放于容器右边，不改变图片大小。当裁剪方向为horizontal，会裁掉图片左边部分</td>
</tr>
<tr>
<td>center</td>
<td>图片放于容器中心位置，包括水平和垂直方向，不改变图片大小。当裁剪方向为horizontal时，会裁掉图片左右部分；当裁剪方向为vertical时，会裁掉图片上下部分</td>
</tr>
<tr>
<td>fill</td>
<td>拉伸整张图片以填满容器的整个高度和宽度。这时候图片不会被裁剪，除非level设为了0，此时图片不可见</td>
</tr>
<tr>
<td>center_vertical</td>
<td>图片放于容器垂直方向的中心位置，不改变图片大小。裁剪和center时一样</td>
</tr>
<tr>
<td>center_horizontal</td>
<td>图片放于容器水平方向的中心位置，不改变图片大小。裁剪和center时一样</td>
</tr>
<tr>
<td>fill_vertical</td>
<td>在垂直方向上拉伸图片以填满容器的整个高度。当裁剪方向为vertical时，图片不会被裁剪，除非level设为了0，此时图片不可见</td>
</tr>
<tr>
<td>fill_horizontal</td>
<td>在水平方向上拉伸图片以填满容器的整个宽度。当裁剪方向为horizontal时，图片不会被裁剪，除非level设为了0，此时图片不可见</td>
</tr>
<tr>
<td>clip_vertical</td>
<td>附加选项，裁剪基于垂直方向的gravity设置，设置top时会裁剪底部，设置bottom时会裁剪顶部，其他情况会同时裁剪顶部和底部</td>
</tr>
<tr>
<td>clip_horizontal</td>
<td>附加选项，裁剪基于水平方向的gravity设置，设置left时会裁剪右侧，设置right时会裁剪左侧，其他情况会同时裁剪左右两侧</td>
</tr>
</tbody>
</table>
<blockquote>
<p>设置level呢？android没有提供直接在xml里设置level的属性，这需要通过代码去设置。举例用法如下：</p>
<pre class=" language-java"><code class="language-java">ImageView img <span class="token operator">=</span>  <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//level范围值0~10000</span>
</code></pre>
</blockquote>
<h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><blockquote>
<p>color标签是drawable里最简单的标签了，只有一个属性：android:color，指定颜色值。这个标签一般很少用，因为基本都可以通过其他更方便的方式定义颜色。</p>
</blockquote>
<h2 id="inset"><a href="#inset" class="headerlink" title="inset"></a>inset</h2><blockquote>
<p>使用inset标签可以对drawable设置边距，其用法和View的padding类似，只不过padding是设置内容与边界的距离，而inset则可以设置背景drawable与View边界的距离。</p>
</blockquote>
<ul>
<li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li>
<li>android:visible 设置初始的可见性状态，默认为false</li>
<li>android:insetLeft 左边距</li>
<li>android:insetRight 右边距</li>
<li>android:insetTop 顶部边距</li>
<li>android:insetBottom 底部边距</li>
<li>android:inset 设置统一边距，会覆盖上面四个属性，但API Level要求为21，即Android 5.0</li>
</ul>
<h2 id="layer-list"><a href="#layer-list" class="headerlink" title="layer-list"></a>layer-list</h2><blockquote>
<p>layer-list可以将多个drawable按照顺序层叠在一起显示</p>
<p>layer-list可以作为根节点，也可以作为selector中item的子节点。layer-list可以添加多个item子节点，每个item子节点对应一个drawable资源，按照item从上到下的顺序叠加在一起，再通过设置每个item的偏移量就可以看到阴影等效果了。layer-list的item可以通过下面四个属性设置偏移量</p>
</blockquote>
<ul>
<li>android:top 顶部的偏移量</li>
<li>android:bottom 底部的偏移量</li>
<li>android:left 左边的偏移量</li>
<li>android:right 右边的偏移量</li>
</ul>
<h2 id="level-list"><a href="#level-list" class="headerlink" title="level-list"></a>level-list</h2><blockquote>
<p>当需要在一个View中显示不同图片的时候，比如手机剩余电量不同时显示的图片不同，level-list就可以派上用场了。level-list可以管理一组drawable，每个drawable设置一组level范围，最终会根据level值选取对应的drawable绘制出来。level-list通过添加item子标签来添加相应的drawable，其下的item只有三个属性：</p>
</blockquote>
<ul>
<li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li>
<li>android:minLevel 该item的最小level值</li>
<li>android:maxLevel 该item的最大level值</li>
</ul>
<blockquote>
<p>item的匹配规则是从上到下的，当设置的level值与前面的item的level范围匹配，则采用。一般item的添加按maxLevel从小到大排序下来，此时minLevel可以不用指定也能匹配到。</p>
</blockquote>
<p>设置切换</p>
<pre class=" language-java"><code class="language-java">ImageView img <span class="token operator">=</span>  <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//level范围值0~10000</span>
</code></pre>
<h2 id="nine-patch"><a href="#nine-patch" class="headerlink" title="nine-patch"></a>nine-patch</h2><blockquote>
<p>使用nine-patch标签可以对点九图片做一些设置处理</p>
</blockquote>
<ul>
<li>android:src 必填项，必须指定点九类型的图片</li>
<li>android:dither 设置是否抖动，图片与屏幕的像素配置不同时会用到，比如图片是ARGB 8888的，而屏幕是RGB565</li>
<li>android:tint 给图片着色，比如图片本来是黑色的，着色后可以变成白色</li>
<li>android:tintMode 着色模式，API Level 21(Android 5.0)才添加的属性</li>
<li>android:alpha 设置图片的透明度，取值范围为0.0~1.0之间，0.0为全透明，1.0为全不透明，API Level最低要求是11</li>
<li>android:autoMirrored 设置图片是否需要镜像反转，当布局方向是RTL，即从右到左布局时才有用，API Level 19(Android 4.4)才添加的属性</li>
</ul>
<h2 id="ripple"><a href="#ripple" class="headerlink" title="ripple"></a>ripple</h2><blockquote>
<p>波纹效果</p>
</blockquote>
<ul>
<li>android:color 更改默认的触摸反馈颜色</li>
</ul>
<h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h2><blockquote>
<p>使用rotate标签可以对一个drawable进行旋转操作</p>
</blockquote>
<ul>
<li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li>
<li>android:fromDegrees 起始的角度度数</li>
<li>android:toDegrees 结束的角度度数，正数表示顺时针，负数表示逆时针</li>
<li>android:pivotX 旋转中心的X坐标，浮点数或是百分比。浮点数表示相对于drawable的左边缘距离单位为px，如5; 百分比表示相对于drawable的左边缘距离按百分比计算，如5%; 另一种百分比表示相对于父容器的左边缘，如5%p; 一般设置为50%表示在drawable中心</li>
<li>android:pivotY 旋转中心的Y坐标</li>
<li>android:visible 设置初始的可见性状态，默认为false</li>
</ul>
<blockquote>
<p>要让它可以旋转，还需要设置level值。level取值范围为0~10000，应用到rotate，则与fromDegrees~toDegrees相对应，如上面例子的角度范围为0~180，那么，level取值0时，则旋转为0度；level为10000时，则旋转180度；level为5000时，则旋转90度。因为level默认值为0，所以图片没有转变。那么，我们想转180度，其实可以将fromDegrees设为180，而不设置toDegrees，这样，不用再在代码里设置level图片就可以旋转180了。</p>
</blockquote>
<h2 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h2><blockquote>
<p>使用scale标签可以对drawable进行缩放操作，和clip一样是通过设置level来控制缩放的比例。</p>
</blockquote>
<ul>
<li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li>
<li>android:scaleHeight 设置可缩放的高度，用百分比表示，格式为XX%，0%表示不做任何缩放，50%表示只能缩放一半</li>
<li>android:scaleWidth 设置可缩放的宽度，用百分比表示，格式为XX%，0%表示不做任何缩放，50%表示只能缩放一半</li>
<li>android:scaleGravity 设置drawable缩放后的位置，取值和bitmap标签的一样，就不一一列举说明了，不过默认值是left</li>
<li>android:useIntrinsicSizeAsMinimum 设置drawable原有尺寸作为最小尺寸，设为true时，缩放基本无效，API Level最低要求为11</li>
</ul>
<p>设置属性</p>
<pre class=" language-java"><code class="language-java">ImageView img <span class="token operator">=</span>  <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//level范围值0~10000</span>
</code></pre>
<h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><blockquote>
<p>selector标签，可以添加一个或多个item子标签，而相应的状态是在item标签中定义的。定义的xml文件可以作为两种资源使用：drawable和color。作为drawable资源使用时，一般和shape一样放于drawable目录下，item必须指定android:drawable属性；作为color资源使用时，则放于color目录下，item必须指定android:color属性</p>
</blockquote>
<ul>
<li>android:state_enabled: 设置触摸或点击事件是否可用状态，一般只在false时设置该属性，表示不可用状态</li>
<li>android:state_pressed: 设置是否按压状态，一般在true时设置该属性，表示已按压状态，默认为false</li>
<li>android:state_selected: 设置是否选中状态，true表示已选中，false表示未选中</li>
<li>android:state_checked: 设置是否勾选状态，主要用于CheckBox和RadioButton，true表示已被勾选，false表示未被勾选</li>
<li>android:state_checkable: 设置勾选是否可用状态，类似state_enabled，只是state_enabled会影响触摸或点击事件，而state_checkable影响勾选事件</li>
<li>android:state_focused: 设置是否获得焦点状态，true表示获得焦点，默认为false，表示未获得焦点</li>
<li>android:state_window_focused: 设置当前窗口是否获得焦点状态，true表示获得焦点，false表示未获得焦点，例如拉下通知栏或弹出对话框时，当前界面就会失去焦点；另外，ListView的ListItem获得焦点时也会触发true状态，可以理解为当前窗口就是ListItem本身</li>
<li>android:state_activated: 设置是否被激活状态，true表示被激活，false表示未激活，API Level 11及以上才支持，可通过代码调用控件的setActivated(boolean)方法设置是否激活该控件</li>
<li>android:state_hovered: 设置是否鼠标在上面滑动的状态，true表示鼠标在上面滑动，默认为false，API Level 14及以上才支持</li>
<li>android:enterFadeDuration 状态改变时，新状态展示时的淡入时间，以毫秒为单位，API Level 11及以上才支持</li>
<li>android:exitFadeDuration 状态改变时，旧状态消失时的淡出时间，以毫秒为单位，API Level 11及以上才支持</li>
</ul>
<blockquote>
<p>item是从上往下匹配的，如果匹配到一个item那它就将采用这个item，而不是采用最佳匹配的规则；所以设置默认的状态，一定要写在最后，如果写在前面，则后面所有的item都不会起作用了</p>
<p>关于ListView的ListItem样式，有两种设置方式，一种是在ListView标签里设置android:listSelector属性，另一种是在ListItem的布局layout里设置android:background。但是，这两种设置的结果却有着不同。同时，使用ListView时也有些其他需要注意的地方，总结如下：</p>
<p>android:listSelector设置的ListItem默认背景是透明的，不管你在selector里怎么设置都无法改变它的背景。所以，如果想改ListItem的默认背景，只能通过第二种方式，在ListItem的布局layout里设置android:background。<br>当触摸点击ListItem时，第一种设置方式下，state_pressed、state_focused和state_window_focused设为true时都会触发，而第二种设置方式下，只有state_pressed会触发。<br>当ListItem里有Button或CheckBox之类的控件时，会抢占ListItem本身的焦点，导致ListItem本身的触摸点击事件会无效。那么，要解决此问题，有三种解决方案：<br>将Button或CheckBox换成TextView或ImageView之类的控件<br>设置Button或CheckBox之类的控件设置focusable属性为false<br>设置ListItem的根布局属性android:descendantFocusability=”blocksDescendants”<br>第三种是最方便，也是推荐的方式，它会将ListItem根布局下的所有子控件都设置为不能获取焦点。android:descendantFocusability属性的值有三种，其中，ViewGroup是指设置该属性的View，本例中就是ListItem的根布局：</p>
<p>beforeDescendants：ViewGroup会优先其子类控件而获取到焦点<br>afterDescendants：ViewGroup只有当其子类控件不需要获取焦点时才获取焦点<br>blocksDescendants：ViewGroup会覆盖子类控件而直接获得焦点</p>
</blockquote>
<h2 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h2><blockquote>
<p>shape可以自定义形状，可以定义下面四种类型的形状，通过android:shape属性指定：</p>
</blockquote>
<ul>
<li>rectangle: 矩形，默认的形状，可以画出直角矩形、圆角矩形、弧形等</li>
<li>oval: 椭圆形，用得比较多的是画正圆</li>
<li>line: 线形，可以画实线和虚线</li>
<li>ring: 环形，可以画环形进度条</li>
</ul>
<h3 id="rectangle"><a href="#rectangle" class="headerlink" title="rectangle"></a>rectangle</h3><blockquote>
<p>rectangle是默认的形状，也是用得最多的形状，一些文字背景、按钮背景、控件或布局背景等</p>
</blockquote>
<ul>
<li>solid: 设置形状填充的颜色，只有android:color一个属性<ul>
<li>android:color 填充的颜色</li>
</ul>
</li>
<li>padding: 设置内容与形状边界的内间距，可分别设置左右上下的距离<ul>
<li>android:left 左内间距</li>
<li>android:right 右内间距</li>
<li>android:top 上内间距</li>
<li>android:bottom 下内间距</li>
</ul>
</li>
<li>gradient: 设置形状的渐变颜色，可以是线性渐变、辐射渐变、扫描性渐变<ul>
<li>android:type 渐变的类型<ul>
<li>linear 线性渐变，默认的渐变类型</li>
<li>radial 放射渐变，设置该项时，android:gradientRadius也必须设置</li>
<li>sweep 扫描性渐变</li>
</ul>
</li>
<li>android:startColor 渐变开始的颜色</li>
<li>android:endColor 渐变结束的颜色</li>
<li>android:centerColor 渐变中间的颜色</li>
<li>android:angle 渐变的角度，线性渐变时才有效，必须是45的倍数，0表示从左到右，90表示从下到上</li>
<li>android:centerX 渐变中心的相对X坐标，放射渐变时才有效，在0.0到1.0之间，默认为0.5，表示在正中间</li>
<li>android:centerY 渐变中心的相对X坐标，放射渐变时才有效，在0.0到1.0之间，默认为0.5，表示在正中间</li>
<li>android:gradientRadius 渐变的半径，只有渐变类型为radial时才使用</li>
<li>android:useLevel 如果为true，则可在LevelListDrawable中使用</li>
</ul>
</li>
<li>corners: 设置圆角，只适用于rectangle类型，可分别设置四个角不同半径的圆角，当设置的圆角半径很大时，比如200dp，就可变成弧形边了<ul>
<li>android:radius 圆角半径，会被下面每个特定的圆角属性重写</li>
<li>android:topLeftRadius 左上角的半径</li>
<li>android:topRightRadius 右上角的半径</li>
<li>android:bottomLeftRadius 左下角的半径</li>
<li>android:bottomRightRadius 右下角的半径</li>
</ul>
</li>
<li>stroke: 设置描边，可描成实线或虚线。<ul>
<li>android:color 描边的颜色</li>
<li>android:width 描边的宽度</li>
<li>android:dashWidth 设置虚线时的横线长度</li>
<li>android:dashGap 设置虚线时的横线之间的距离</li>
</ul>
</li>
</ul>
<h3 id="oval"><a href="#oval" class="headerlink" title="oval"></a>oval</h3><blockquote>
<p>oval用来画椭圆，而在实际应用中，更多是画正圆，比如消息提示，圆形按钮等</p>
</blockquote>
<ul>
<li>size: 设置形状默认的大小，可设置宽度和高度<ul>
<li>android:width 宽度</li>
<li>android:height 高度</li>
</ul>
</li>
</ul>
<h3 id="line"><a href="#line" class="headerlink" title="line"></a>line</h3><blockquote>
<p>line主要用于画分割线，是通过stroke和size特性组合来实现的</p>
<ol>
<li>只能画水平线，画不了竖线；</li>
<li>线的高度是通过stroke的android:width属性设置的；</li>
<li>size的android:height属性定义的是整个形状区域的高度；</li>
<li>size的height必须大于stroke的width，否则，线无法显示；</li>
<li>线在整个形状区域中是居中显示的；</li>
<li>线左右两边会留有空白间距，线越粗，空白越大；</li>
<li>引用虚线的view需要添加属性android:layerType，值设为”software”，否则显示不了虚线。</li>
</ol>
</blockquote>
<h3 id="ring"><a href="#ring" class="headerlink" title="ring"></a>ring</h3><blockquote>
<p>shape根元素有些属性只适用于ring类型</p>
</blockquote>
<ul>
<li>android:innerRadius 内环的半径</li>
<li>android:innerRadiusRatio 浮点型，以环的宽度比率来表示内环的半径，默认为3，表示内环半径为环的宽度除以3，该值会被android:innerRadius覆盖</li>
<li>android:thickness 环的厚度</li>
<li>android:thicknessRatio 浮点型，以环的宽度比率来表示环的厚度，默认为9，表示环的厚度为环的宽度除以9，该值会被android:thickness覆盖</li>
<li>android:useLevel 一般为false，否则可能环形无法显示，只有作为LevelListDrawable使用时才设为true</li>
</ul>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><blockquote>
<p>transition其实是继承自layer-list的，只是，transition只能管理两层drawable，另外提供了两层drawable之间切换的方法，切换时还会有淡入淡出的动画效果</p>
<p>transition标签生成的Drawable对应的类为TransitionDrawable，要切换时，需要主动调用TransitionDrawable的startTransition()方法，参数为动画的毫秒数，也可以调用reverseTransition()方法逆向切换。</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span>TransitionDrawable<span class="token punctuation">)</span>drawable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正向切换，即从第一个drawable切换到第二个</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span>TransitionDrawable<span class="token punctuation">)</span>drawable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverseTransition</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//逆向切换，即从第二个drawable切换回第一个</span>
</code></pre>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><ul>
<li><p>vector</p>
<ul>
<li>android:name 定义该drawable的名字</li>
<li>android:width 定义该 drawable 的内部(intrinsic)宽度,支持所有 Android 系统支持的尺寸，通常使用 dp</li>
<li>android:height 定义该 drawable 的内部(intrinsic)高度,支持所有 Android 系统支持的尺寸，通常使用 dp</li>
<li>android:viewportWidth 定义矢量图视图的宽度，视图就是矢量图 path 路径数据所绘制的虚拟画布</li>
<li>android:viewportHeight 定义矢量图视图的高度，视图就是矢量图 path 路径数据所绘制的虚拟画布</li>
<li>android:tint 定义该 drawable 的 tint 颜色。默认是没有 tint 颜色的</li>
<li>android:tintMode 定义 tint 颜色的 Porter-Duff blending 模式，默认值为 src_in</li>
<li>android:autoMirrored 设置当系统为 RTL (right-to-left) 布局的时候，是否自动镜像该图片。比如 阿拉伯语。</li>
<li>android:alpha 该图片的透明度属性</li>
</ul>
</li>
<li><p>group</p>
</li>
<li>android:name 定义 group 的名字</li>
<li>android:rotation 定义该 group 的路径旋转多少度</li>
<li>android:pivotX 定义缩放和旋转该 group 时候的 X 参考点。该值相对于 - vector 的 viewport 值来指定的。</li>
<li>android:pivotY 定义缩放和旋转该 group 时候的 Y 参考点。该值相对于 - vector 的 viewport 值来指定的。</li>
<li>android:scaleX 定义 X 轴的缩放倍数</li>
<li>android:scaleY 定义 Y 轴的缩放倍数</li>
<li>android:translateX 定义移动 X 轴的位移。相对于 vector 的 viewport 值来指定的。</li>
<li>android:translateY 定义移动 Y 轴的位移。相对于 vector 的 viewport 值来指定的。</li>
</ul>
<ul>
<li>path <ul>
<li>android:name 定义该 path 的名字，这样在其他地方可以通过名字来引用这个路径</li>
<li>android:pathData 和 SVG 中 d 元素一样的路径信息。</li>
<li>android:fillColor 定义填充路径的颜色，如果没有定义则不填充路径</li>
<li>android:strokeColor 定义如何绘制路径边框，如果没有定义则不显示边框</li>
<li>android:strokeWidth 定义路径边框的粗细尺寸</li>
<li>android:strokeAlpha 定义路径边框的透明度</li>
<li>android:fillAlpha 定义填充路径颜色的透明度</li>
<li>android:trimPathStart 从路径起始位置截断路径的比率，取值范围从 0 到1</li>
<li>android:trimPathEnd 从路径结束位置截断路径的比率，取值范围从 0 到1</li>
<li>android:trimPathOffset 设置路径截取的范围</li>
<li>android:strokeLineCap 设置路径线帽的形状，取值为 butt, round, square.</li>
<li>android:strokeLineJoin 设置路径交界处的连接方式，取值为 miter,round,bevel.</li>
<li>android:strokeMiterLimit 设置斜角的上限注：当strokeLineJoin设置为 “miter” 的时候， 绘制两条线段以锐角相交的时候，所得的斜面可能相当长。当斜面太长，就会变得不协调。strokeMiterLimit 属性为斜面的长度设置一个上限。这个属性表示斜面长度和线条长度的比值。默认是 10，意味着一个斜面的长度不应该超过线条宽度的 10 倍。如果斜面达到这个长度，它就变成斜角了。当 strokeLineJoin 为 “round” 或 “bevel” 的时候，这个属性无效。</li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://keeganlee.me/post/android/20150916" target="_blank" rel="external">Android样式的开发</a><br><a href="http://blog.chengyunfeng.com/?p=834#ixzz4Er9ciF4x]" target="_blank" rel="external">VectorDrawable 详解</a><br><a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">Android开发艺术探索</a><br><a href="https://book.douban.com/subject/26599539/" target="_blank" rel="external">Android群英传</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Drawable汇总&quot;&gt;&lt;a href=&quot;#Drawable汇总&quot; class=&quot;headerlink&quot; title=&quot;Drawable汇总&quot;&gt;&lt;/a&gt;Drawable汇总&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;animated-rotate&lt;/li&gt;
&lt;li&gt;animated-selector&lt;/li&gt;
&lt;li&gt;animated-vector&lt;/li&gt;
&lt;li&gt;animation-list&lt;/li&gt;
&lt;li&gt;bitmap&lt;/li&gt;
&lt;li&gt;clip&lt;/li&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;li&gt;inset&lt;/li&gt;
&lt;li&gt;layer-list&lt;/li&gt;
&lt;li&gt;level-list&lt;/li&gt;
&lt;li&gt;nine-patch&lt;/li&gt;
&lt;li&gt;ripple&lt;/li&gt;
&lt;li&gt;rotate&lt;/li&gt;
&lt;li&gt;scale&lt;/li&gt;
&lt;li&gt;selector&lt;/li&gt;
&lt;li&gt;shape&lt;/li&gt;
&lt;li&gt;transition&lt;/li&gt;
&lt;li&gt;vector&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>AndroidManifest.xml文件详解</title>
    <link href="https://luoweiguang.github.io/2016/07/16/AndroidManifest.xml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://luoweiguang.github.io/2016/07/16/AndroidManifest.xml文件详解/</id>
    <published>2016-07-16T14:00:00.000Z</published>
    <updated>2017-11-15T06:23:06.938Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="AndroidManifest-xml结构"><a href="#AndroidManifest-xml结构" class="headerlink" title="AndroidManifest.xml结构"></a>AndroidManifest.xml结构</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xmlversion="1.0"encoding="utf-8"?></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity-alias</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity-alias</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span><span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grant-uri-permission</span><span class="token punctuation">/></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path-permission</span><span class="token punctuation">/></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-library</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compatible-screens</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>instrumentation</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>original-package</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package-verifier</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission-tree</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission-group</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protected-broadcast</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource-overlay</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>supports-screens</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>supports-gl-texture</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-sdk</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-configuration</span><span class="token punctuation">/></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-feature</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission-sdk-23</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>upgrade-key-set</span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h2><pre class=" language-xml"><code class="language-xml">&lt;manifest  
        xmlns:android="http://schemas.android.com/apk/res/android"
        package=""
        android:sharedUserId="string"
        android:sharedUserLabel="string resource"
        android:versionCode="integer"
        android:versionName="string"
        android:installLocation=["auto" | "internalOnly" | "preferExternal"] 
        android:revisionCode="integer">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素是AndroidManifest.xml文件的根元素。它必须包含一个<application>元素，并且必须要指定xmlns:android和package属性</application></p>
</blockquote>
<h3 id="xmlns-android"><a href="#xmlns-android" class="headerlink" title="xmlns:android"></a>xmlns:android</h3><blockquote>
<p>定义android命名空间，一般为<code>http://schemas.android.com/apk/res/android</code>，这样使得Android中各种标准属性能在文件中使用，提供了大部分元素中的数据。</p>
</blockquote>
<h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><blockquote>
<p>这个属性给应用程序定义了一个完整的Java样式的包名。这个名称应该是唯一的。名称中可以包含大写或小写字母、数字以及下划线（‘_’）。但是包名的每段都只能用字母开始。</p>
<p>应该使用所拥有的互联网域名作为基本的包名，以避免与其他开发者的冲突。例如，由Google发布的应用程序的包名都用com.google开始。在发布应用程序时永远不要使用com.example命名空间。</p>
<p>包名用于唯一的标识应用程序。它还是应用程序进程的默认名称（看<application>元素的process属性）和Activity的默认亲缘任务（请看<code>&lt;activity&gt;</code>元素的taskAffinity属性）。</application></p>
<p>警告：应用程序一旦发布，就不能够改变它的包名称了。包名定义了应用程序的标识，因此如果改变它，那么它就会被认为是不同的应用程序，并且之前版本的用户就不能够把应用升级到新版本。</p>
</blockquote>
<h3 id="sharedUserId"><a href="#sharedUserId" class="headerlink" title="sharedUserId"></a>sharedUserId</h3><blockquote>
<p>这个属性定义了一个Linux用户ID的名称，这个名称能够跟其他应用程序共享。默认情况下，Android会给它的每个应用程序都分配一个唯一的用户ID。但是，如果有两个或更多的应用程序把这个属性都设置了相同的值，那么它们将共享这个相同的ID—具有相同的数字签名。拥有相同用户ID的应用程序能够访问彼此的数据，并且如果期望，它们也可运行在相同的进程中。</p>
</blockquote>
<p>详见：<a href="http://blog.csdn.net/wirelessqa/article/details/8581652" target="_blank" rel="external">【AndroidManifest.xml详解】Manifest属性之sharedUserId、sharedUserLabel </a></p>
<h3 id="sharedUserLabel"><a href="#sharedUserLabel" class="headerlink" title="sharedUserLabel"></a>sharedUserLabel</h3><blockquote>
<p>这个属性给共享的用户ID定义了一个用户可读的标签。这个标签必须用字符串资源来设置，不能使用原生的字符串。</p>
<p>只有在sharedUserId属性被设置，这个属性才有意义。</p>
</blockquote>
<h3 id="versionCode"><a href="#versionCode" class="headerlink" title="versionCode"></a>versionCode</h3><blockquote>
<p>这个属性定义一个内部版本号，它仅用于判断一个版本是否比另一个版本新，数字越大表明版本越新。这个版本号不显示给用户，显示给用户的版本号要用versionName属性设置。</p>
<p>它的属性值必须是一个整数，如100。你可以按照自己的想法来定义它，只要保持后续版本号的数字更大。例如，它可以是一个版本号；也可以把x.y格式中的版本数字转换成一个由x和y分别编码的16位整数，x在低8位，y在高8位；也可以在每次发布版本时简单的增加数字的大小。</p>
</blockquote>
<h3 id="versionName"><a href="#versionName" class="headerlink" title="versionName"></a>versionName</h3><blockquote>
<p>这个属性用于设置一个显示给永的版本号。属性值可以是原生的字符串，也可以引用一个字符串资源。这个字符串除了显示给用户之外，没有其他用途。而versionCode属性却拥有内部使用的版本号。</p>
</blockquote>
<h3 id="installLocation"><a href="#installLocation" class="headerlink" title="installLocation"></a>installLocation</h3><blockquote>
<p>这个属性用于设置应用程序默认的安装位置。</p>
<p>用下表中的关键词来设置属性值。</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>internalOnly</td>
<td>应用程序必须只被安装在内部设备存储器上。如果设置这个值，应用程序永远不会被安装在外部存储器上。如果内部存储空间不足，那么系统不会安装这个应用程序。如果没有定义android:installLocation属性，就会使用这个值作为默认值。</td>
</tr>
<tr>
<td>auto</td>
<td>应用程序可以安装在外部存储器上，但是，默认情况下，系统会把应用程序安装在内部存储器上。如果内部存储空间不足，那么系统会把应用程序安装在外部存储器上。一旦安装，用户能够通过系统设置在内外存储器之间来移动应用程序。</td>
</tr>
<tr>
<td>preferExternal</td>
<td>应用程序偏好安装在外部存储器上（SD卡）。系统并不保证恪守这一个规则。如果外部存储器不可用或空间不足，或者应用程序使用了forward-locking机制（这种机制不支持外部存储），那么应用程序就可以安装在内部存储器上。一旦安装，用户能够通过系统设置在内外存储器之间移动应用程序。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>警告：如果应用程序使用的Google Play的复制保护功能，那么它就不能被安装在设备的SD卡上。但是，如果使用Google Play的应用程序许可，那么它就能够被安装在内部或外部存储器上，包括SD卡。</p>
<p>注意：默认情况下，应用程序会被安装在内部存储器上，除非把这个属性值定义为auto或preferExternal，应用程序才能够被安装在外部存储器上。<br>当应用程序被安装在外部存储器上的时候：</p>
<ol>
<li><p>.apk文件被保存在外部存储器上，但是任何应用程序数据（如数据库）依然被保存在内部设备存储器上；</p>
</li>
<li><p>用一个key把存储器中保存的.apk文件加密，只允许应用程序在安装它的设备上运行。用户不能把安装在SD卡上应用程序转移到另一个设备的SD卡上，虽然在一个设备上能够使用多个SD卡。</p>
</li>
<li><p>在用户要求的时候，应用程序能够被转移到内部存储器上。</p>
</li>
</ol>
<p>用户也可以要求把应用程序从内部存储器移动到外部存储器上。但是，如果这个属性被设置为internalOnly，那么系统不允许用户把应用程序转移到外部存储器上。</p>
<p>这个属性在API Level 8中被引入。</p>
</blockquote>
<h3 id="revisionCode"><a href="#revisionCode" class="headerlink" title="revisionCode"></a>revisionCode</h3><blockquote>
<p>android:revisionCode表示该软件的修改版本号，对用户是可见的，它必须是一个int型的整数，它的大小代表该软件版本升级过多少次，因此每次发布新版本该值都会+1，如Android:versionCode = ”5″ ,代表此软件已经发布过5次了。</p>
</blockquote>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><pre class=" language-xml"><code class="language-xml">&lt;application  
    android:allowClearUserData=["true" | "false"]
    android:allowTaskReparenting=["true" | "false"]
    android:banner="drawable resource"
    android:backupAgent="string"
    android:debuggable=["true" | "false"]
    android:description="string resource"
    android:enabled=["true" | "false"]
    android:hasCode=["true" | "false"]
    android:hardwareAccelerated=["true" | "false"]
    android:icon="drawable resource"
    android:isGame=["true" | "false"]
    android:killAfterRestore=["true" | "false"]
    android:largeHeap=["true" | "false"]
    android:label="string resource"
    android:logo="drawable resource"
    android:manageSpaceActivity="string"
    android:name="string"
    android:permission="string"
    android:persistent=["true" | "false"]
    android:process="string"
    android:restoreAnyVersion=["true" | "false"]
    android:requiredAccountType="string"
    android:restrictedAccountType="string"
    android:supportsRtl=["true" | "false"]
    android:taskAffinity="string"
    android:testOnly=["true" | "false"]
    android:theme="resource or theme"
    android:uiOptions=["none" | "splitActionBarWhenNarrow"]
    android:usesCleartextTraffic=["true" | "false"]
    android:vmSafeMode=["true" | "false"]>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素用于应用程序的声明。它包含了每个应用程序组件所声明的子元素，并且还有能够影响所有组件的属性。其中的很多属性（如icon、label、permission、process、taskAffinity和allowTaskReparenting）会给组件元素中对应的属性设置默认值。其他的给是应用程序整体设置的值（如debuggable、enabled、description、allowClearUserData），并且这些属性值不能被组件的属性所覆盖。</p>
</blockquote>
<h3 id="android-allowTaskReparenting"><a href="#android-allowTaskReparenting" class="headerlink" title="android:allowTaskReparenting"></a>android:allowTaskReparenting</h3><blockquote>
<p>当一个与当前任务有亲缘关系的任务被带到前台时，用这个属性来指定应用程序中定义的Activity能否从他们当前的任务中转移到这个有亲缘关系的任务中。如果设置为true，则能够转移，如果设置为false，则应用程序中的Activity必须保留在它们所在的任务中。默认值是false。<br><code>&lt;activity&gt;</code>元素有它们自己的allowTaskReparenting属性，它能够覆盖<code>&lt;application&gt;</code>元素中的设置。</p>
</blockquote>
<h3 id="android-allowBackup"><a href="#android-allowBackup" class="headerlink" title="android:allowBackup"></a>android:allowBackup</h3><blockquote>
<p>当 allowBackup 标志为 true 时，用户即可通过 adb backup 和 adb restore 来进行对应用数据的备份和恢复,此属性的默认值是true。</p>
</blockquote>
<h3 id="android-backupAgent"><a href="#android-backupAgent" class="headerlink" title="android:backupAgent"></a>android:backupAgent</h3><blockquote>
<p>这个属性用于定义应用程序备份代理的实现类的名称，这个类是BackupAgent类的一个子类。它的属性值应该是完整的Java类的名称（如，com.example.project.MyBackupAgent）。但是，也可以使用用”.”符号开头的简称（如，.MyBackupAgent），系统会把<code>&lt;manifest&gt;</code>元素中指定的包名追加到”.”符号的前面。</p>
</blockquote>
<h3 id="android-debuggable"><a href="#android-debuggable" class="headerlink" title="android:debuggable"></a>android:debuggable</h3><blockquote>
<p>这个属性用于指定应用程序是否能够被调试，即使是以用户模式运行在设备上的时候。如果设置为true，则能够被调试，否则不能调试，默认值是false。</p>
</blockquote>
<h3 id="android-description"><a href="#android-description" class="headerlink" title="android:description"></a>android:description</h3><blockquote>
<p>这个属性用于定义应用程序相关的用户可读文本，它要比应用程序标签更长、更详细。它的的值必须被设置成一个字符串资源的引用。跟label属性不一样，label属性可以使用原生的字符串。这个属性没有默认值。</p>
</blockquote>
<h3 id="android-enabled"><a href="#android-enabled" class="headerlink" title="android:enabled"></a>android:enabled</h3><blockquote>
<p>这个属性用于指定Android系统能否实例化应用程序组件。如果设置为true，这个可以实例化其组件，否则不能够实例化。如果这个属性被设置为true，那么就会使用每个组件自己enabled属性的设置来判断其是否能够被实例化。如果这个属性被设置为false，它会覆盖其所有组件自己指定的值，应用程序中的所有组件都会被禁用。</p>
<p>默认值是true。</p>
</blockquote>
<h3 id="android-hasCode"><a href="#android-hasCode" class="headerlink" title="android:hasCode"></a>android:hasCode</h3><blockquote>
<p>这个属性用于设置应用程序是否包含了代码，如果设置为true，则包含代码，否则不包含任何代码。在这个属性被设置为false的时候，系统在加载组件的时候不会试图加载任何应用程序的代码。默认值是true。</p>
<p>如果应用程序没有使用任何应用内置组件类以外的组件，那么这个应用程序就不会有任何自己的代码，像使用AliasActivity类的Activity，是很少发生的。</p>
</blockquote>
<h3 id="android-hardwareAccelerated"><a href="#android-hardwareAccelerated" class="headerlink" title="android:hardwareAccelerated"></a>android:hardwareAccelerated</h3><blockquote>
<p>这个属性用于设置能够给应用程序中的所有Activity和View对象启用硬件加速渲染。如果设置为true，则应该启用，如果设置为false，则不会启用。默认值是false。</p>
<p>从Android3.0开始，应用程序可以使用硬件加速的OpenGL渲染器，来改善很多共同的2D图形操作的性能。当硬件加速渲染被启动的时候，在Canvas、Paint、Xfermode、ColorFilter、Shader和Camera中的大多数操作都会被加速。这样会使动画、滚动更加平滑，并且会改善整体的响应效果，即使应用程序没有明确的使用框架的OpenGL类库。</p>
<p>要注意的是，不是所有的OpenGL 2D操作都会被加速。如果启用了硬件加速渲染器，就要对应用程序进行测试，以确保使用渲染器时不发生错误。</p>
</blockquote>
<h3 id="android-icon"><a href="#android-icon" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>这个属性用于设置应用程序的整个图标，以及每个应用组件的默认图标。对于<code>&lt;activity&gt;</code>、<code>&lt;activity-alias&gt;</code>、<code>&lt;service&gt;</code>、<code>&lt;service&gt;</code>、<code>&lt;receiver&gt;</code>和<code>&lt;provider&gt;</code>元素，请看它们各自的icon属性。</p>
<p>设置这个属性时，必须要引用一个包含图片的可绘制资源（例如，“@drawable/icon”）。没有默认的图标。</p>
</blockquote>
<h3 id="android-isGame"><a href="#android-isGame" class="headerlink" title="android:isGame"></a>android:isGame</h3><blockquote>
<p>该应用程序是否是一个游戏，默认为false</p>
</blockquote>
<h3 id="android-killAfterRestore"><a href="#android-killAfterRestore" class="headerlink" title="android:killAfterRestore"></a>android:killAfterRestore</h3><blockquote>
<p>这个属性用于指定在全系统的恢复操作期间，应用的设置被恢复以后，对应的问题程序是否应该被终止。单包恢复操作不会导致应用程序被关掉。全系统的复原操作通常只会发生一次，就是在电话被首次建立的时候。第三方应用程序通常不需要使用这个属性。</p>
<p>默认值是true，这意味着在全系统复原期间，应用程序完成数据处理之后，会被终止。</p>
</blockquote>
<h3 id="android-label"><a href="#android-label" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性用于设置应用程序整体的用户可读的标签，并也是每个应用程序组件的默认标签。对于<code>&lt;activity&gt;</code>、<code>&lt;activity-alias&gt;</code>、<code>&lt;service&gt;</code>、<code>&lt;receiver&gt;</code>和<provider>元素，请看它们各自的label属性。</provider></p>
<p>设置这个属性值时，应该引用一个字符串资源。以便它能够跟用户界面中的其他字符串一样能够被本地化。但是为了应用程序开发的便利，也能够用原生的字符串来设置。</p>
</blockquote>
<h3 id="android-logo"><a href="#android-logo" class="headerlink" title="android:logo"></a>android:logo</h3><blockquote>
<p>这个属性用于给整个应用程序设置一个Logo，而且它也是所有Activity的默认Logo。</p>
<p>设置这个属性时，必须要引用一个包含图片的可绘制资源（如：“@drawable/logo”）。没有默认的Logo。</p>
</blockquote>
<h3 id="android-manageSpaceActivity"><a href="#android-manageSpaceActivity" class="headerlink" title="android:manageSpaceActivity"></a>android:manageSpaceActivity</h3><blockquote>
<p>这个属性定义了一个完整的Activity子类的名字，系统能够把这个名字加载到由用户管理被应用程序所占用的设备上的内存。这个Activity也应该用<code>&lt;activity&gt;</code>元素来声明。</p>
</blockquote>
<h3 id="android-name"><a href="#android-name" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这整个属性用完整的Java类名，给应用程序定义了一个Application子类的实现。当应用程序进程被启动时，这个类在其他任何应用程序组件被实例化之前实例化。</p>
<p>这个子类实现是可选的，大多数应用程序不需要一个子类的实现。如果没有实现自己的子类，Android系统会使用基本的Application类的一个实例。</p>
</blockquote>
<h3 id="android-permission"><a href="#android-permission" class="headerlink" title="android:permission"></a>android:permission</h3><blockquote>
<p>这个属性定义了一个权限，为了跟应用程序进行交互，客户端必须要有这个权限。这个属性是为给所有的应用程序组件设置权限提供了便利的方法。它能够被独立组件所设置的permission属性所覆盖。</p>
</blockquote>
<h3 id="android-persistent"><a href="#android-persistent" class="headerlink" title="android:persistent"></a>android:persistent</h3><blockquote>
<p>这个属性用户设置应用程序是否应该时刻保持运行状态，如果设置为true，那么就保持，否则不保持。默认值是false。普通的应用程序不应该设置这个属性，持久运行模式仅用于某些系统级的应用程序。</p>
</blockquote>
<h3 id="android-process"><a href="#android-process" class="headerlink" title="android:process"></a>android:process</h3><blockquote>
<p>这个属性用于定义一个进程名称，应用程序的所有组件都应该运行在这个进程中。每个组件都能够用它自己process属性的设置来覆盖这个<application>元素中的设置。</application></p>
<p>默认情况下，当应用程序的第一个组件需要运行时，Android系统就会给这个应用程序创建一个进程。然后，应用中的所有组件都运行在这个进程中。默认的进程名是跟<manifest>元素中设置的包名进行匹配的。</manifest></p>
<p>通过设置这个属性，能够跟另外一个应用程序共享一个进程名，能够把这两个应用程序中的组件都安排到同一个进程中运行—但是仅限于这两个应用程序共享一个用户ID，并且带有相同的数字证书。</p>
<p>如果这个进程名称用“：”开头，那么在需要的时候，就会给应用程序创建一个新的、私有的进程。如果进程名用小写字符开头，就会用这个名字创建一个全局的进程，这个全局的进程能够被其他应用程序共享，从而减少资源的使用。</p>
</blockquote>
<h3 id="android-restoreAnyVersion"><a href="#android-restoreAnyVersion" class="headerlink" title="android:restoreAnyVersion"></a>android:restoreAnyVersion</h3><blockquote>
<p>设置这个属性表示应用程序准备尝试恢复任何备份的数据集，即使备份比设备上当前安装的应用程序的版本要新。这个属性设置为true，即使是在版本不匹配而产生数据兼容性提示的时候，也会允许备份管理来恢复备份的数据，所以要谨慎使用。</p>
<p>这个属性的默认值是false。</p>
</blockquote>
<h3 id="android-taskAffinity"><a href="#android-taskAffinity" class="headerlink" title="android:taskAffinity"></a>android:taskAffinity</h3><blockquote>
<p>这个属性给应用的所有的Activity设置了一个亲缘关系名，除了那些用它们自己的taskAffinity属性设置不同亲缘关系的组件。</p>
<p>默认情况下，应用程序中的所有Activity都会共享相同的亲缘关系，亲缘关系的名称跟由<code>&lt;manifest&gt;</code>元素设置的包名相同。</p>
</blockquote>
<h3 id="android-theme"><a href="#android-theme" class="headerlink" title="android:theme"></a>android:theme</h3><blockquote>
<p>这个属性给应用程序中所有的Activity设置默认的主题，属性值要引用一个样式资源。每个独立的Activity的主题会被它们自己的theme属性所覆盖。</p>
</blockquote>
<h3 id="android-uiOptions"><a href="#android-uiOptions" class="headerlink" title="android:uiOptions"></a>android:uiOptions</h3><blockquote>
<p>这个属性设置了Activity的UI的额外选项。它必须是下表中的一个值：</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>默认设置，没有额外的UI选项。</td>
</tr>
<tr>
<td>splitActionBarWhenNarrow</td>
<td>在水平空间受到限制的时候，会在屏幕的底部添加一个用于显示ActionBar中操作项的栏，例如：在纵向的手持设备上。而不是在屏幕顶部的操作栏中显示少量的操作项。它会把操作栏分成上下两部分，顶部用于导航选择，底部用于操作项目。这样就会确保可用的合理空间不仅只是针对操作项目，而且还会在顶部给导航和标题留有空间。菜单项目不能被分开到两个栏中，它们要显示在一起。</td>
</tr>
</tbody>
</table>
<h2 id="intent-filter"><a href="#intent-filter" class="headerlink" title="intent-filter"></a>intent-filter</h2><pre><code>&lt;intent-filter
    android:icon=&quot;drawable resource&quot;
    android:label=&quot;string resource&quot;
    android:priority=&quot;integer&quot;&gt;
    . . .
&lt;/intent-filter&gt;
</code></pre><blockquote>
<p>这个元素用于指定Activity、Service或Broadcast Receiver能够响应的Intent对象的类型。Intent过滤器声明了它的父组件的能力—Activity或Service所能做的事情和Broadcast Receiver所能够处理的广播类型。它会打开组件来接收它所声明类型的Intent对象，过滤掉那些对组件没有意义的Intent对象请求。</p>
<p>过滤器的大多数内容是通过<code>&lt;action&gt;</code>、<code>&lt;category&gt;</code>和<code>&lt;data&gt;</code>子元素来描述的。</p>
</blockquote>
<h3 id="android-icon-1"><a href="#android-icon-1" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>当组件要把过滤器所具有的能力展示给用户时，会使用这个属性所设置的图标来表示它的父组件（Activity、Service或Broadcast Receiver）。</p>
<p>这个属性必须要引用一个包含图片定义的可绘制资源。默认值是由父组件的icon属性设置的。如果父组件没有指定一个图标，那么默认值就会使用<code>&lt;application&gt;</code>元素所设置的icon。</p>
</blockquote>
<h3 id="android-label-1"><a href="#android-label-1" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性用于给其父组件设置一个用户可读的标签。这个标签不是有其父组件设置的那个，在组件要把过滤器所具有的能力展示给用户的时候，要使用这个属性值。</p>
<p>这个属性值应该引用一个字符串资源，以便它能够像用户界面中的其他字符串一样，能够被本地化。但是，为了开发应用程序的便利，也可以使用原生的字符串。</p>
<p>这个属性的默认值是有它的父组件提供的。如果父组件没有指定一个标签，那么默认值就会使用由<application>元素的所设置的标签。</application></p>
</blockquote>
<h3 id="android-priority"><a href="#android-priority" class="headerlink" title="android:priority"></a>android:priority</h3><blockquote>
<p>这个属性用于给过滤器设置一个优先级。其父组件能够通过优先级来依次处理过滤器所描述类型的Intent对象。这个属性对Activity和Broadcast Receiver对象有意义：</p>
<ol>
<li><p>它提供了Activity能够如何响应跟过滤器匹配的Intent对象请求的信息（相对与其他的也能响应这个Intent请求的Activity）。当一个Intent对象请求能够被多个带有不同优先级的Activity处理时，Android系统只考虑把高优先级的Intent过滤器作为潜在的Intent对象请求目标。</p>
</li>
<li><p>它控制了Broadcast Receiver执行接收广播消息的顺序。高优先级的过滤器会优先调用。（这个顺序只应用与同步消息，对于异步消息会忽略优先级的设置。）</p>
</li>
</ol>
<p>只有真正想要给接收广播消息的过滤器施加一个特定顺序，或者要强制Android来应用另外一个Activity，才会使用这个属性。</p>
<p>这个属性值必须是一个整数，如：100，数字越大，优先级越高。</p>
</blockquote>
<h2 id="meta-data"><a href="#meta-data" class="headerlink" title="meta-data"></a>meta-data</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>
    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resource specification<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>这个元素用name-value对的格式给其父组件提供任意可选的数据。一个组件元素能够包含任意多个<code>&lt;meta-data&gt;</code>子元素，所有这些元素中定义的值会被收集到一个Bundle对象中，并且提供给组件的PackageItemInfo.metaData属性字段。</p>
<p>通常值是通过其value属性来指定的。但是，也可以使用resource属性来代替，把一个资源ID跟值进行关联。</p>
<p>例如，下面的代码就是把存储在@string/kangaroo资源中的值跟”zoo”名称进行关联：</p>
<figcaption>android:name=&quot;zoo&quot; android:value=&quot;@string/kangaroo&quot; /&gt;</code></p></figcaption><pre class=" language-&lt;meta-data"><code class="language-&lt;meta-data"><p>另一个方面，使用resource属性会给zoo分配一个数字资源ID，而不是保存在资源中的值。例如：</p>
<p><code><meta-data android:name="zoo" android:resource="@string/kangaroo" /></code></p>
<p>要避免使用多个独立的<code><meta-data></code>实体来提供相关的数据。相反如果有复杂的数据要跟组件关联，那么把数据作为资源来保存，并使用resource属性，把相关的资源ID通知给组件。</p>
</blockquote>
<h3 id="android-name-1"><a href="#android-name-1" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>针对项目的一个唯一名称。使用Java样式的命名规则，可以确保名称的唯一性，例如：</p>
<p><code>com.example.project.activity.fred。</code></p>
</blockquote>
<h3 id="android-resource"><a href="#android-resource" class="headerlink" title="android:resource"></a>android:resource</h3><blockquote>
<p>这个属性定义了一个要引用的资源。资源的ID会跟这个项目进行关联。通过Bundle.getInt()方法能够从meta-data的Bundle对象中获取这个ID。</p>
</blockquote>
<h3 id="android-value"><a href="#android-value" class="headerlink" title="android:value"></a>android:value</h3><blockquote>
<p>这个属性会给这个项目分配一个值。下表列出了可能分配的数据的数据类型，以及获取这些数据的方法：</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>Bundle对象方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符串。对于一个Unicode字符，要使用双斜线（\）来进行转义，如\n和\uxxxx</td>
<td>getString()</td>
</tr>
<tr>
<td>整数值，如100</td>
<td>getInt()</td>
</tr>
<tr>
<td>布尔值，true或false</td>
<td>getBoolean()</td>
</tr>
<tr>
<td>颜色值，如#rgb、#argb、#rrggbb、#aarrggbb</td>
<td>getString()</td>
</tr>
<tr>
<td>浮点值，如1.23</td>
<td>getFloat()</td>
</tr>
</tbody>
</table>
<h2 id="uses-library"><a href="#uses-library" class="headerlink" title="uses-library"></a>uses-library</h2><pre><code class="xml"><uses-library
    android:name="string"
    android:required=["true" | "false"] />
</code></pre>
<blockquote>
<p>这个元素用于指定该应用程序必须链接的共享类库。这个元素告诉系统该应用程序包的类装载器中所包含的类库代码。</p>
<p>Android的所有包（如andorid.app，android.content，android.view和android.widget等）都在应用程序自动链接的默认类库中。但是，有些包是在于独立的类库中，它们不能被自动的链接到应用程序包中，要查看这些包的文档，以确定要把哪些类库包含到包的代码中。</p>
<p>这个元素也会影响该应用程序在特殊设备上的安装，以及应用程序在Google Play上的可用性。</p>
<p>安装（Installation）</p>
<p>如果在该应用的清单中出现这个元素，并且它的android:required属性被设置为true，那么除非该类库在用户的设备上存在，否则PackageManager框架不会让用户安装这个应用程序。</p>
<p>Google Play</p>
<p>Google Play会基于要安装在用户设备上的类库来过滤应用程序。有关过滤的更多信息，请看Filters on Google Play（<a href="http://developer.android.com/guide/appendix/market-filters.html）" target="_blank" rel="external">http://developer.android.com/guide/appendix/market-filters.html）</a></p>
</blockquote>
<h3 id="android-name-2"><a href="#android-name-2" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用于指定类库的名称。这个名称是在对应的类库文档中提供的。例如：android.test.runner库就是包含Android测试类的一个程序包。</p>
</blockquote>
<h3 id="android-required"><a href="#android-required" class="headerlink" title="android:required"></a>android:required</h3><blockquote>
<p>这个属性用于指定应用程序是否需要有android:name属性所指定的类库：</p>
<p>true：没有这个库应用程序无法工作。如果用户设备设备上没有这个类库，系统不允许该应用程序安装在这个设备上。</p>
<p>false：如果该类库存在，则应用程序能够使用这个类库，但是如果有必要，也可以设计成没有该类库，应用程序也能够工作。系统会允许应用程序安装，即使该类库不存在。如果使用false，就要在运行时对类库的有效性进行必要的检查。</p>
<p>对于类库的检查，可以使用反射机制来判断一个具体的类是否有效。</p>
<p>默认值是true。</p>
<p>这个属性在API Level 7中被引入。</p>
</blockquote>
<h2 id="activity"><a href="#activity" class="headerlink" title="activity"></a>activity</h2><pre class=" language-xml"><code class="language-xml">&lt;activity
    android:allowTaskReparenting=["true" | "false"]
    android:alwaysRetainTaskState=["true" | "false"]
    android:clearTaskOnLaunch=["true" | "false"]
    android:configChanges=["mcc", "mnc", "locale","touchscreen", "keyboard", "keyboardHidden","navigation", "screenLayout", "fontScale", "uiMode","orientation", "screenSize","smallestScreenSize"]
    android:enabled=["true" | "false"]
    android:excludeFromRecents=["true" | "false"]
    android:exported=["true" | "false"]
    android:finishOnTaskLaunch=["true" | "false"]
    android:hardwareAccelerated=["true" | "false"]
    android:icon="drawable resource"
    android:label="string resource"
    android:launchMode=["multiple" | "singleTop" |"singleTask" | "singleInstance"]
    android:multiprocess=["true" | "false"]
    android:name="string"
    android:noHistory=["true" | "false"]  
    android:permission="string"
    android:process="string"
    android:screenOrientation=["unspecified" | "user" | "behind" |"landscape" | "portrait" |"reverseLandscape" | "reversePortrait" |"sensorLandscape" | "sensorPortrait" |"sensor" | "fullSensor" | "nosensor"]
    android:stateNotNeeded=["true" | "false"]
    android:taskAffinity="string"
    android:theme="resource or theme"
    android:uiOptions=["none" | "splitActionBarWhenNarrow"]
    android:windowSoftInputMode=["stateUnspecified","stateUnchanged", "stateHidden","stateAlwaysHidden", "stateVisible","stateAlwaysVisible", "adjustUnspecified","adjustResize", "adjustPan"] >   
    . . .
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素声明了一个Activity（或Activity的子类），Activity实现了应用程序的可视化用户界面部分。应用程序中所有的Activity都必须在清单文件中用<code>&lt;activity&gt;</code>元素来声明，没有在清单文件中声明的Activity，系统不会看到，也不会运行它。</p>
</blockquote>
<h3 id="android-allowTaskReparenting-1"><a href="#android-allowTaskReparenting-1" class="headerlink" title="android:allowTaskReparenting"></a>android:allowTaskReparenting</h3><blockquote>
<p>这个属性用于设定Activity能够从启动它的任务中转移到另一个与启动它的任务有亲缘关系的任务中，转移时机是在这个有亲缘关系的任务被带到前台的时候。如果设置了true，则能够转移，如果设置了false，则这个Activity必须要保留在启动它的那个任务中。</p>
<p>如果这个属性没有设置，那么其对应的<code>&lt;application&gt;</code>元素的allowTaskReparenting属性值就会应用到这个Activity上。它的默认值是false。</p>
<p>通常，当Activity被启动时，它会跟启动它的任务关联，并它的整个生命周期都会保持在那个任务中。但是当Activity的当前任务不在显示时，可以使用这个属性来强制Activity转移到与当前任务有亲缘关系的任务中。这种情况的典型应用是把应用程序的Activity转移到与这个应用程序相关联的主任务中。</p>
<p>例如，如果一个电子邮件消息中包含了一个网页的链接，点击这个链接会启动一个显示这个网页的Activity。但是，由e-mail任务部分启动的这个Activity是由浏览器应用程序定义的。如果把它放到浏览器的任务中，那么在浏览器下次启动到前台时，这个网页会被显示，并且在e-mail任务再次显示时，这个Activity有会消失。</p>
<p>Activity的亲缘关系是由taskAffinity属性定义的。通过读取任务的根Activity的亲缘关系来判断任务的亲缘关系。因此，通过定义，任务中的根Activity与任务有着相同的亲缘关系。因此带有singleTask或singleInstance启动模式的Activity只能是任务的根节点，Activity的任务归属受限于standard和singleTop模式。</p>
</blockquote>
<h3 id="android-alwaysRetainTaskState"><a href="#android-alwaysRetainTaskState" class="headerlink" title="android:alwaysRetainTaskState"></a>android:alwaysRetainTaskState</h3><blockquote>
<p>这个属性用于设置Activity所属的任务状态是否始终由系统来维护。如果设置为true，则由系统来维护状态，设置为false，那么在某些情况下，系统会允许重设任务的初始状态。默认值是false。这个属性只对任务根节点的Activity有意义，其他所有的Activity都会被忽略。</p>
<p>通常，在某些情况中，当用户从主屏中重新启动一个任务时，系统会先清除任务（从堆栈中删除根节点Activity之上的所有Activity）。</p>
<p>但是，当这个属性被设置为true时，用户会始终返回到这个任务的最后状态，而不管中间经历了哪些操作。这样做是有好处的，例如，Web浏览器的应用就会保留很多用户不想丢失的状态，如多个被打开的标签页。</p>
</blockquote>
<h3 id="android-clearTaskOnLaunch"><a href="#android-clearTaskOnLaunch" class="headerlink" title="android:clearTaskOnLaunch"></a>android:clearTaskOnLaunch</h3><blockquote>
<p>这个属性用于设定在从主屏中重启任务时，处理根节点的Activity以外，任务中的其他所有的Activity是否要被删除。如果设置为true，那么任务根节点的Activity之上的所有Activity都要被清除，如果设置了false，就不会被清除。默认设置时false。这个属性只对启动新任务（或根Activity）的那些Activity有意义，任务中其他所有的Activity都会被忽略。</p>
<p>当这个属性值被设置为true，用户再次启动任务时，任务根节点的Activity就会被显示，而不管在任务的最后做了什么，也不管任务使用Back按钮，还是使用Home离开的。当这个属性被设置为false时，在某些情况中这个任务的Activity可以被清除，但不总是这样的。</p>
<p>例如，假设某人从主屏中启动了Activity P，并且又从P中启动了Activity Q。接下来用户按下了Home按钮，然后由返回到Activity P。通常用户会看到Activity Q，因为这是在P的任务中所做的最后的事情。但是，如果P把这个属性设置为true，那么在用户按下Home按钮，任务被挂起时，Activity P之上的所有Activity（本例中是Activity Q）都会被删除。因此当用户再次返回到本任务时，用户只能看到Activity P。</p>
<p>如果这个属性和allowTaskReparenting属性都被设置为true，那些被设置了亲缘关系的Activity会被转移到它们共享的亲缘任务中，然后把剩下的Activity都给删除。</p>
</blockquote>
<h3 id="android-configChanges"><a href="#android-configChanges" class="headerlink" title="android:configChanges"></a>android:configChanges</h3><p>这个属性列出了那些需要Activity进行自我处理的配置变化。当在运行时配置变化发生的时候，默认情况下，这个Activity会被关掉并重启，但是用这个属性声明一个配置，就会阻止Activity被重启。相反，这个Activity会保持运行，并且它的onConfigurationChanged()方法会被调用。</p>
<p>注意：应该避免使用这个属性，并且只把它作为最后的手段来使用。有关如何正确处理配置改变期间的重启，请阅读“处理运行是变化”<br>(<a href="http://blog.csdn.net/fireofstar/article/details/7456363" target="_blank" rel="external">http://blog.csdn.net/fireofstar/article/details/7456363</a>)</p>
<p>下表中列出了这个属性的有效值，要设置多个值的时候，用“|”符号连接，例如：“locale|navigation|orientation”</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mcc</td>
<td>IMSI移动国家编码改变时要进行自我处理—系统发现了一个新的SIM卡，并且更新了MCC。</td>
</tr>
<tr>
<td>mnc</td>
<td>IMSI移动网络编码改变时要进行自我处理—系统发现了一个新的SIM卡，并且更新了MNC</td>
</tr>
<tr>
<td>locale</td>
<td>语言环境发生变化时要进行自我处理—用户选择了一种用于显示文本的新语言。</td>
</tr>
<tr>
<td>touchscreen</td>
<td>触屏发生变化时要进行自我处理。（这种情况通常不会发生）</td>
</tr>
<tr>
<td>keyboard</td>
<td>键盘类型发生变化时，要进行自我处理。例如用户插入了一个外部键盘</td>
</tr>
<tr>
<td>keyboardHidden</td>
<td>键盘的可用性发生变化时，要进行自我处理。例如用户启用了硬件键盘。</td>
</tr>
<tr>
<td>navigation</td>
<td>导航类型（轨迹球/方向板）发生变化时，要进行自我处理。这种情况通常不会发生。</td>
</tr>
<tr>
<td>screenLayout</td>
<td>屏幕布局发生变化时，要进行自我处理。这可能是由被激活的不同的显示方式所导致的变化。</td>
</tr>
<tr>
<td>fontScale</td>
<td>字体的缩放因子发生变化时，要进行自我处理。如用户选择了一个新的全局字体尺寸。</td>
</tr>
<tr>
<td>uiMode</td>
<td>用户界面发生变化时，要进行自我处理。在把设备放入桌面/轿车内或夜间模式变化时，会导致这种情况发生。它在API级别8中被引入。</td>
</tr>
<tr>
<td>orientation</td>
<td>屏幕的方向发生变化时，要进行自我处理。用户旋转设备时会发生这种变化。注意：如果应用程序的目标API级别是13或更高的版本，那么还应该声明screenSize配置，因为设备在横向和纵向之间切换时，对应的尺寸也会发生变化。</td>
</tr>
<tr>
<td>screenSize</td>
<td>当前有效的屏幕尺寸发生变化时，要进行自我处理。这种变化意味着当前可用的相对长、宽比的尺寸发生了变化，因此当用户在横向和纵向之间切换时，就会产生屏幕可用尺寸的变化。但是，如果应用程序是在API级别12或更低的版本上编译的，那么Activity就要始终自己来处理这种变化（这个配置的变化不会重启Activity，即使是运行在Android3.2或更高版本的设备上）。这个设置在API级别13中被引入。</td>
</tr>
<tr>
<td>smallestScreenSize</td>
<td>物理尺寸发生变化时，要进行自我处理。这种变化不关注屏幕方向的变化，只在实际的物理屏幕尺寸发生变化时才会发生，如切换到另一个显示器上的时候。这个变化对应smallestWidth属性的配置来进行改变。如果应用程序是在API级别12或更低的版本上编译的，那么Activity就要始终自己来处理这种变化（这个配置的变化不会重启Activity，即使是运行在Android3.2或更高版本的设备上）。这个设置在API级别13中被引入。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>所有这些配置的改变都会影响到应用中所能看到的资源值。因此，当onConfigurationChanged()方法被调用时，通常需要重新获取所有的资源（包括布局资源、可绘制资源等等），以便能够正确的处理这些改变。</p>
</blockquote>
<h3 id="android-enabled-1"><a href="#android-enabled-1" class="headerlink" title="android:enabled"></a>android:enabled</h3><blockquote>
<p>这个属性用于设置Activity是否能够被系统实例化。如果设置为true，则可以被实例化，如果设置为false，则不能被实例化。默认值是true。</p>
<p><code>&lt;application&gt;</code>元素有它自己的enabled属性，它的这个属性设置会用于应用程序中的所有组件，包括Activity。<code>&lt;application&gt;</code>和<code>&lt;activity&gt;</code>元素的这个属性必须要设置为true（默认情况下都是true），以便系统能够实例化Activity。否则Activity不能被实例化。</p>
</blockquote>
<h3 id="android-excledeFromRecents"><a href="#android-excledeFromRecents" class="headerlink" title="android:excledeFromRecents"></a>android:excledeFromRecents</h3><blockquote>
<p>这属性用于设置由该Activity所启动的任务是否应该被排除在最近使用的应用程序列表之外。也就是说，当这个Activity是一个新任务的根节点时，这个属性决定了这个任务适应要显示在用户最近使用的应用程序列表中。如果设置为true，则这个任务会被排除在列表之外，如何设置为false，则应该包含在最近使用的应用列表中。默认值是false。</p>
</blockquote>
<h3 id="android-exported"><a href="#android-exported" class="headerlink" title="android:exported"></a>android:exported</h3><blockquote>
<p>这个属性用于设置该Activity能否由另一个应用程序的组件来启动，如果设置为true，则可以启动，否则不能启动。如果设置为false，那么该Activity只能被同一个应用程序中的组件或带有相同用户ID的应用程序来启动。</p>
<p>它的默认值要依赖与该Activity是否包含了Intent过滤器。如果没有任何过滤器，则意味着该Activity只能通过明确的类名来调用，这样就暗示者该Activity只能在应用程序内部使用（因为其他用户不会知道它的类名），因此在这种情况下，默认值是false。在另一方面，至少存在一个过滤器，则暗示着该Activity可被外部使用，因此默认值是true。</p>
<p>这个属性不是限制Activity暴露给其他应用程序的唯一方法。还可以使用权限来限制外部实体对该Activity的调用。</p>
</blockquote>
<h3 id="android-finishOnTaskLaunch"><a href="#android-finishOnTaskLaunch" class="headerlink" title="android:finishOnTaskLaunch"></a>android:finishOnTaskLaunch</h3><blockquote>
<p>这个属性用于设置既存的Activity实例，在用户再次启动（在主屏上选择这个任务）它所属的任务时，是否应该被关闭。设置为true，则要关闭，否则不关闭，默认值是false。</p>
<p>如果这个属性和allowTaskReparenting属性都被设置为true，那么这个属性要优于其他属性，Activity的亲缘关系会被忽略。该Activity不会被转移父任务，而是被销毁。</p>
</blockquote>
<h3 id="android-hardwareAccelerated-1"><a href="#android-hardwareAccelerated-1" class="headerlink" title="android:hardwareAccelerated"></a>android:hardwareAccelerated</h3><blockquote>
<p>这个属性用于设置该Activity是否应该启用硬件加速渲染。如果设置为true，则启用硬件加速，否则不启用。默认设置是false。</p>
<p>从Android3.0开始，硬件加速的OpenGL渲染器对应用程序可用，以便改善许多共同的2D图形操作的性能。当硬件加速渲染器被启用时，在Canva、Paint、Xfermode、ColorFilter、Shader和Camera中大多数操作都会被加速。这样会使动画、滚动更平滑，并改善整体的响应效果，即使应用程序没有明确要使用框架的OpenGL类库。因为启用硬件加速会增加系统的资源需求，所以应用程序会占用更多的内存。</p>
<p>要注意的是，不是所有的OpenGL 2D操作都会被加速。如果启用了硬件加速渲染，就要对应用程序进行充分测试，以确保所使用的渲染没有错误。</p>
</blockquote>
<h3 id="android-icon-2"><a href="#android-icon-2" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>这属性定义了代表Activity的一个图标。当Activity被要求显示到屏幕上时，这个图标会被显示给用户。例如，这个图标会显示在Launcher的窗口中，用于启动任务。这个图标经常会和label属性组合使用。</p>
<p>这个属性必须被设置为一个包含图片定义的可绘制资源。如果没有设置，就会使用给应用程序设置的图标来代替。</p>
<p>Activity的图标（或者是<code>&lt;application&gt;</code>元素设置的图标）也是所有的Activity的Intent过滤器的默认图标。</p>
</blockquote>
<h3 id="android-label-2"><a href="#android-label-2" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性给Activity设置了一个可读的标签。当Activity要展现给用户的时候，这个标签会显示在屏幕上，它经常会跟Activity的图标一起来显示。</p>
<p>如果这个属性没有被设置，就会使用给应用程序设置的标签来代替。</p>
<p>Activity的标签（或者是<code>&lt;application&gt;</code>元素设置的标签）也是所有Activity的Intent过滤器的默认标签。</p>
<p>这个属性应该用一个字符串资源来设置。以便它能够在用户界面中用其他的语言来本地化。但是为了开发应用程序的便利，也可以用原始的字符串来设置。</p>
</blockquote>
<h3 id="android-launchMode"><a href="#android-launchMode" class="headerlink" title="android:launchMode"></a>android:launchMode</h3><p>详见<a href="/2016/07/10/Activity的启动模式/">Activity的启动模式</a></p>
<h3 id="android-multiprocess"><a href="#android-multiprocess" class="headerlink" title="android:multiprocess"></a>android:multiprocess</h3><blockquote>
<p>这个属性用于设置Activity的实例能否被加载到与启动它的那个组件所在的进程中，如果设置为true，则可以，否则不可以。默认值是false。</p>
<p>通常，一个新的Activity实例会被加载到定义它的应用程序的进程中，以便应用程序的所有Activity都运行在同一个进程中。但是，如果这个属性被设置为true，那么这个Activity的实例就可以运行在多个进程中，允许系统在使用它们的进程中来创建实例（权限许可的情况下），这几乎是从来都不需要的事情。</p>
</blockquote>
<h3 id="android-name-3"><a href="#android-name-3" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用于设置Activity的实现类（Activity的子类）的名字。这个属性值应该是完整的Java类名，如：com.example.project.ExtracurricularActivity。但是，可以用简写的方式，名字第一个字符用“.”符号，如：.ExtracurricularActivity。它对应的包名是在<code>&lt;manifest&gt;</code>元素中指定的。</p>
<p>一旦发布了应用程序，就不应该改变这个名称了（除非设置了android:exported=”false”）。</p>
<p>这个属性没有默认值，名称必须被指定。</p>
</blockquote>
<h3 id="android-noHistory"><a href="#android-noHistory" class="headerlink" title="android:noHistory"></a>android:noHistory</h3><blockquote>
<p>这个属性用于设置在用户离开该Activity，并且它在屏幕上不再可见的时候，它是否应该从Activity的堆栈被删除。如果设置了true，则要删除，否则不删除。默认值是false。</p>
<p>如果设置为true，则意味着Activity不会保留历史轨迹。也就是说，它不会保留在任务的Activity堆栈中，因此用户不能够在返回到这个Activity。</p>
<p>这个属性在API Level 3中被引入。</p>
</blockquote>
<h3 id="android-permission-1"><a href="#android-permission-1" class="headerlink" title="android:permission"></a>android:permission</h3><blockquote>
<p>这个属性用于设定启动Activity的客户端或者是响应一个Intent对象的请求所必须要有的权限。如果startActivity()方法或startActivityForResult()方法的调用者没有被授予指定的权限，那么它的Intent对象就不会发送给对应的Activity。</p>
<p>如果这个属性没有设置，那么<code>&lt;application&gt;</code>元素中的permission属性的设置就应用到Activity元素上。如果<code>&lt;application&gt;</code>元素也没有设置，那么这个Activity就不会受到权限的保护。</p>
</blockquote>
<h3 id="android-process-1"><a href="#android-process-1" class="headerlink" title="android:process"></a>android:process</h3><blockquote>
<p>这个属性用于设置Activity应该运行的那个进程的名字。通常，应用程序的所有组件都运行在为这个程序所创建的一个默认的进程中。它跟应用程序的包有相同的名字。<code>&lt;application&gt;</code>元素的process属性能够给所有的组件设置一个不同的默认值。但是每个组件都能够覆盖这个默认设置，允许把应用程序分离到多个进程中。</p>
<p>如果这个属性名的值是用“:”开始，那么在需要的时候，就会创建一个应用程序私有的新的进程，这个Activity就会运行在这个进程中。如果进程名使用小写字母开头，那么在权限许可的情况下，该Activity会运行在用它命名的全局进程中。这样就运行不同应用程序的组件能够共享一个进程，从而减少资源的使用。</p>
</blockquote>
<h3 id="android-screenOrientation"><a href="#android-screenOrientation" class="headerlink" title="android:screenOrientation"></a>android:screenOrientation</h3><blockquote>
<p>这个属性用于设置Activity在设备上显示的方向。</p>
<p>属性值可以是下表中列出的一个值：</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>unspecified</td>
<td>默认值，由系统来选择方向。它的使用策略，以及由于选择时特定的上下文环境，可能会因为设备的差异而不同。</td>
</tr>
<tr>
<td>user</td>
<td>使用用户当前首选的方向。</td>
</tr>
<tr>
<td>behind</td>
<td>使用Activity堆栈中与该Activity之下的那个Activity的相同的方向。</td>
</tr>
<tr>
<td>landscape</td>
<td>横向显示（宽度比高度要大）</td>
</tr>
<tr>
<td>portrait</td>
<td>纵向显示（高度比宽度要大）</td>
</tr>
<tr>
<td>reverseLandscape</td>
<td>与正常的横向方向相反显示，在API Level 9中被引入。</td>
</tr>
<tr>
<td>reversePortrait</td>
<td>与正常的纵向方向相反显示，在API Level 9中被引入。</td>
</tr>
<tr>
<td>sensorLandscape</td>
<td>横向显示，但是基于设备传感器，既可以是按正常方向显示，也可以反向显示，在API Level 9中被引入。</td>
</tr>
<tr>
<td>sensorPortrait</td>
<td>纵向显示，但是基于设备传感器，既可以是按正常方向显示，也可以反向显示，在API Level 9中被引入。</td>
</tr>
<tr>
<td>sensor</td>
<td>显示的方向是由设备的方向传感器来决定的。显示方向依赖与用户怎样持有设备；当用户旋转设备时，显示的方向会改变。但是，默认情况下，有些设备不会在所有的四个方向上都旋转，因此要允许在所有的四个方向上都能旋转，就要使用fullSensor属性值。</td>
</tr>
<tr>
<td>fullSensor</td>
<td>显示的方向（4个方向）是由设备的方向传感器来决定的，除了它允许屏幕有4个显示方向之外，其他与设置为“sensor”时情况类似，不管什么样的设备，通常都会这么做。例如，某些设备通常不使用纵向倒转或横向反转，但是使用这个设置，还是会发生这样的反转。这个值在API Level 9中引入。</td>
</tr>
<tr>
<td>nosensor</td>
<td>屏幕的显示方向不会参照物理方向传感器。传感器会被忽略，所以显示不会因用户移动设备而旋转。除了这个差别之外，系统会使用与“unspecified”设置相同的策略来旋转屏幕的方向。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：在给这个属性设置的值是“landscape”或portrait的时候，要考虑硬件对Activity运行的方向要求。正因如此，这些声明的值能够被诸如Google Play这样的服务所过滤，以便应用程序只能适用于那些支持Activity所要求的方向的设备。例如，如果声明了“landscape”、“reverseLandscape”、或“sensorLandscape”，那么应用程序就只能适用于那些支持横向显示的设备。但是，还应该使用<uses-feature>元素来明确的声明应用程序所有的屏幕方向是纵向的还是横行的。例如：<uses-feature android:name="”android.hardware.screen.portrait”/">。这个设置由Google Play提供的纯粹的过滤行为，并且在设备仅支持某个特定的方向时，平台本身并不控制应用程序是否能够被按照。</uses-feature></uses-feature></p>
</blockquote>
<h3 id="android-stateNotNeeded"><a href="#android-stateNotNeeded" class="headerlink" title="android:stateNotNeeded"></a>android:stateNotNeeded</h3><blockquote>
<p>这个属性用于设置在没有保存Activity状态的情况下，它能否被销毁且成功的重启。如果设置为true，则不引用Activity之前的状态就能够被重启，如果设置为false，重启Activity时，则需要它之前的状态。默认值是false。</p>
<p>通常，Activity在最终被关掉之前，会调用onSaveInstanceState()方法来保存资源。这个方法会用一个Bundle对象来保存Activity的当前状态，然后在这个Activity被重启时，再把这个Bundle对象传递给onCreate()方法。如果这个属性设置为true，onSaveInstanceState()方法就可以不被调用，并且调用onCreate()方法时，会用null来代替Bundle对象，就像Activity被第一次重启一样。</p>
<p>设置为true，会确保Activity在缺省状态下能够被重启。例如，在主屏显示的Activity如果使用这个设置，即使由于某些原因导致Activity崩溃，也会确保它不会被删除。</p>
</blockquote>
<h3 id="android-taskAffinity-1"><a href="#android-taskAffinity-1" class="headerlink" title="android:taskAffinity"></a>android:taskAffinity</h3><blockquote>
<p>这个属性用于跟Activity有亲缘关系的任务。带有相同亲缘关系的Activity，在概念上是属于相同任务的（从用户的角度看，它们是属于同一应用程序的）。任务的亲缘关系是通过它的根节点的Activity的亲缘关系来判定的。</p>
<p>亲缘关系决定了两件事情：1.Activity能否重新设定父任务（看allowTaskReparenting属性）；2.这个任务能够包含用FLAG_ACTIVITY_NEW_TASK标记启动的Activity。</p>
<p>默认情况下，在一个应用程序中的所有Activity都有相同的亲缘关系。能够通过设置这个属性把Activity分到不同的组中。甚至能够把定义在不同应用程序中的Activity放到同一个任务中。要指定一个跟任何任务没有亲缘关系的Activity，就要把这个属性设置为空字符串。</p>
<p>如果这个属性没有设置，那么这个Activity会继承应用程序的亲缘关系（看<code>&lt;application&gt;</code>元素的taskAffinity属性）。应用程序默认的亲缘关系名称是由<manifest>元素的package属性设定包名。</manifest></p>
</blockquote>
<h3 id="android-theme-1"><a href="#android-theme-1" class="headerlink" title="android:theme"></a>android:theme</h3><blockquote>
<p>这个属性用于设定Activity整体主题，它会应用一个样式资源。系统会使用这个主题来自动的设置Activity的内容。</p>
<p>如果这个属性没有设置，Activity会继承应用程序的主题（<application>元素的theme属性）做它的整体样式。如果这个属性也没有设置，那么默认使用系统的主题。</application></p>
</blockquote>
<h3 id="android-uiOptions-1"><a href="#android-uiOptions-1" class="headerlink" title="android:uiOptions"></a>android:uiOptions</h3><blockquote>
<p>这个属性用于设置Activity的UI的额外选项，它必须是下表中的一个值。</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>默认设置，没有额外的UI选项。</td>
</tr>
<tr>
<td>splitActionBarWhenNarrow</td>
<td>在水平空间受到限制的时候，会在屏幕的底部添加一个用于显示ActionBar中操作项的栏，例如：在纵向的手持设备上。而不是在屏幕顶部的操作栏中显示少量的操作项。它会把操作栏分成上下两部分，顶部用于导航选择，底部用于操作项目。这样就会确保可用的合理空间不仅只是针对操作项目，而且还会在顶部给导航和标题留有空间。菜单项目不能被分开到两个栏中，它们要显示在一起。</td>
</tr>
</tbody>
</table>
<h3 id="android-windowSoftInputMode"><a href="#android-windowSoftInputMode" class="headerlink" title="android:windowSoftInputMode"></a>android:windowSoftInputMode</h3><blockquote>
<p>这个属性用于设定Activity的主窗口与软件键盘的窗口如何交互。设置这个属性会影响以下两件事情：</p>
<ol>
<li><p>软键盘的状态—在Activity获取输入焦点时，软键盘是隐藏还是显示。</p>
</li>
<li><p>调整Activity的主窗口—是调整Activity主窗口的大小，以便给软键盘腾出显示空间；还是在Activity窗口中的输入焦点被软键盘覆盖时，让Activity窗口中的内容平移，以便输入焦点能够显示给用户。</p>
</li>
</ol>
<p>这个属性必须用下表中的一个值来设定，或者是一个state…的值和一个adjust…的值的组合。如：</p>
<p><code>&lt;activityandroid:windowSoftInputMode=&quot;stateVisible|adjustResize&quot; . . . &gt;</code></pre>
<p>这个属性设置的值会覆盖主题中设置的值。</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>stateUnspecified</td>
<td>它不指定软键盘的状态（显示或隐藏）。系统会选择合适的状态，或者依赖主题中的设置。它是软键盘行为的默认设置。</td>
</tr>
<tr>
<td>stateUnchanged</td>
<td>当Activity显示在前台时，软键盘会保持它最后的状态（显示或隐藏）</td>
</tr>
<tr>
<td>stateHidden</td>
<td>当用户选择这个Activity时，软键盘会隐藏。也就是说，当用户确认向前浏览到这个Activity的时候，而不是因为离开另一个Activity而返回这个Activity的时候。</td>
</tr>
<tr>
<td>stateAlwaysHidden</td>
<td>当Activity的主窗口有输入焦点时，软键盘会始终隐藏</td>
</tr>
<tr>
<td>stateVisible</td>
<td>在适当的时候（通常是用户浏览到这个Activity的主窗口），软键盘是可见的。</td>
</tr>
<tr>
<td>stateAlwaysVisible</td>
<td>当用户选择了这个Activity时，软键盘变的可见，也就是说，当用户确认向前浏览到这个Activity的时候，而不是因为离开另一个Activity而返回这个Activity的时候。</td>
</tr>
<tr>
<td>adjustUnspecified</td>
<td>这个值并不指定Activity的主窗口会软键盘的显示而进行大小的调整，也不会指定Activity的主窗口是否会平移，以便把因软键盘所遮挡的输入焦点显示给用户。系统会依赖内容窗口中的内容是否能够滚动，来自动的选择这两种模式。如果Activity窗口中有一个能够滚动的布局，那么这个窗口就会被调整大小，并假设通过滚动能够在一个较小的区域内来浏览窗口中所有的内容。</td>
</tr>
<tr>
<td>adjustResize</td>
<td>为适应软键盘的显示，Activity的主窗口始终要调整大小。</td>
</tr>
<tr>
<td>adjustPan</td>
<td>Activity的主窗口不会因软键盘的显示而调整大小，相反，窗口中的内容会被自动的平移，以便输入焦点不会被软键盘所遮挡，并且用户能够看到他们所输入的内容。通常很少使用这种模式，因为用户可能需要关闭软键盘，以便能够跟软键盘所遮挡进行交互。</td>
</tr>
</tbody>
</table>
<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><pre class=" language-xml"><code class="language-xml">&lt;service
    android:enabled=["true" | "false"]
    android:exported=["true" | "false"]
    android:icon="drawable resource"
    android:label="string resource"
    android:name="string"
    android:permission="string"
    android:process="string">
    . . .
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素用于声明一个服务（Service类的子类）作为应用程序的组件之一。跟Activity不一样，服务没有可见的用户界面。它们被用于实现长时的后台操作，或提供能够被其他应用程序调用的通信API。</p>
<p>所有的服务都必须用清单文件中的<code>&lt;service&gt;</code>元素来代表。任何没有在清单中声明的服务都不能被系统看到，也不会被运行。</p>
</blockquote>
<h3 id="android-enabled-2"><a href="#android-enabled-2" class="headerlink" title="android:enabled"></a>android:enabled</h3><blockquote>
<p>这个属性用于指示该服务是否能够被实例化。如果设置为true，则能够被实例化，否则不能被实例化。默认值是true。</p>
<p><code>&lt;application&gt;</code>元素有它自己的enabled属性，它的这个属性适用于应用中所有的组件，包括service组件。对于被启用的服务，<code>&lt;application&gt;</code>和<code>&lt;service&gt;</code>元素的enabled属性都必须是true（默认值都是true）。如果有一个元素的enabled属性被设置为false，该服务就会被禁用，而不能被实例化。</p>
</blockquote>
<h3 id="android-exported-1"><a href="#android-exported-1" class="headerlink" title="android:exported"></a>android:exported</h3><blockquote>
<p>这个属性用于指示该服务是否能够被其他应用程序组件调用或跟它交互。如果设置为true，则能够被调用或交互，否则不能。设置为false时，只有同一个应用程序的组件或带有相同用户ID的应用程序才能启动或绑定该服务。</p>
<p>它的默认值依赖与该服务所包含的过滤器。没有过滤器则意味着该服务只能通过指定明确的类名来调用，这样就是说该服务只能在应用程序的内部使用（因为其他外部使用者不会知道该服务的类名），因此这种情况下，这个属性的默认值是false。另一方面，如果至少包含了一个过滤器，则意味着该服务可以给外部的其他应用提供服务，因此默认值是true。</p>
<p>这个属性不是限制把服务暴露给其他应用程序的唯一方法。还可以使用权限来限制能够跟该服务交互的外部实体。</p>
</blockquote>
<h3 id="android-icon-3"><a href="#android-icon-3" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>这个属性定义了一个代表服务的图标，它必须要引用一个包含图片定义的可绘制资源。如果这个属性没有设置，则会使用<code>&lt;application&gt;</code>元素的icon属性所设定的图标来代替。</p>
<p>无论是<code>&lt;application&gt;</code>元素设置的图标，还是<code>&lt;service&gt;</code>元素所设置的图标，它们都是该服务所有的Intent过滤器的默认图标。</p>
</blockquote>
<h3 id="android-label-3"><a href="#android-label-3" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性用于设定一个要显示给用户的服务的名称。如果没有设置这个属性，则会使用<code>&lt;application&gt;</code>元素的label属性值来代替。</p>
<p>无论是<code>&lt;service&gt;</code>设定的标签，还是<code>&lt;application&gt;</code>元素设定的标签，它们都是该服务所有的Intent过滤器的默认标签。</p>
<p>这个标签应用引用一个字符串资源，以便它能够像用户界面中的字符串一样能够被本地化。但是，为了开发应用程序方便，也可以使用原生字符串来设置这个属性。</p>
</blockquote>
<h3 id="android-name-4"><a href="#android-name-4" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用于指定实现该服务的Service子类的类名。它应该是完整的Java类名（如：com.example.project.RoomService）。但是，也可以使用简写（如：.RoomService），系统会把<code>&lt;manifest&gt;</code>元素中package属性所设定的值添加到简写名称的前面。</p>
<p>一旦发布了应用程序，就不应该改变这个名称（除非android:exported=”false”）。</p>
<p>这个属性没有默认值，名称必须要指定。</p>
</blockquote>
<h3 id="android-permission-2"><a href="#android-permission-2" class="headerlink" title="android:permission"></a>android:permission</h3><blockquote>
<p>这个属性定义了要启动或绑定服务的实体必须要有的权限。如果调用者的startService()、bindService()和stopService()方法没有被授予这个权限，那么这些方法就不会工作，并且Intent对象也不会发送给改服务。</p>
<p>如果这个属性没被设置，那么通过<code>&lt;appliction&gt;</code>元素的permission属性所设定的权限就会适用于该服务。如果<code>&lt;application&gt;</code>元素也没有设置权限，则该服务不受权限保护。</p>
</blockquote>
<h3 id="android-process-2"><a href="#android-process-2" class="headerlink" title="android:process"></a>android:process</h3><blockquote>
<p>这个属性用于设定服务所运行的进程名称。通常，应用程序的所有组件都运行在给应用程序创建的进程中，进程名与应用程序的包名相同。<code>&lt;application&gt;</code>元素的process属性能够给应用程序的所有组件设置一个不同的默认名称。但是每个组件自己的process属性都能够覆盖这个默认值，这样允许把应用程序分离到不同的多个进程中。</p>
<p>如果这个属性值用“:”开头，则在需要的时候系统会创建一个新的，应用程序私有的进程，并且该服务也会运行在这个进程中。如果这个属性值用小写字母开头，那该服务就会运行在以这个属性值命名的全局进程中，它提供了使其工作的权限。这样就允许不同的应用程序组件来共享这个进程，从而降低资源的使用。</p>
</blockquote>
<h2 id="activity-alias"><a href="#activity-alias" class="headerlink" title="activity-alias"></a>activity-alias</h2><pre class=" language-xml"><code class="language-xml">&lt;activity-alias
    android:enabled=["true" | "false"]
    android:exported=["true" | "false"]
    android:icon="drawable resource"
    android:label="string resource"
    android:name="string"
    android:permission="string"
    android:targetActivity="string">
    . . .
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity-alias</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素用于给targetActivity属性所指定Activity设定一个别名，目标Activity必须跟别名Activity在同一个应用程序中，并且这个Activity必须在别名之前被声明。</p>
<p>别名会作为一个独立的实体来代表目标Activity。它能够有自己的Intent过滤器设置，而不是目标Activity自己的Intent过滤器，通过别名和系统处理别名的方式来判断哪个Intent对象能够激活目标。例如：别名中的Intent过滤器可以指定“android.intent.action.MAIN”和“android.intent.category.LAUNCHER”标记，这样即使在目标Activity的过滤器上没有指定这些标记，也会让它在应用的启动器窗口中表示。</p>
<p>除了targetActivity属性以外，<code>&lt;activity-alias&gt;</code>的其他属性是<code>&lt;activity&gt;</code>属性的一个子集。对于子集中的属性，不会把目标Activity中所设置的任何值转交给别名Activity。但是，对于子集中所没有的属性，则给目标Activity所设置的值也会应用到别名Activity。</p>
</blockquote>
<h3 id="android-enabled-3"><a href="#android-enabled-3" class="headerlink" title="android:enabled"></a>android:enabled</h3><blockquote>
<p>这个属性用于设定系统能否通过这个别名来实例化目标Activity，如果设置为true，则可以实例化，否则不能实例化。默认值是true。</p>
<p><code>&lt;application&gt;</code>元素有它自己的enabled属性，这个属性会应用给所有的应用程序组件，包括Activity别名。<code>&lt;application&gt;</code>和<code>&lt;activity-alias&gt;</code>属性都必须是true，这样系统才能够通过别名来实例化目标Activity。如果其中之一是false，那么别名就不会起作用。</p>
</blockquote>
<h3 id="android-exported-2"><a href="#android-exported-2" class="headerlink" title="android:exported"></a>android:exported</h3><blockquote>
<p>这个属性用于设定其他的应用程序组件能否通过这个别名来启动目标Activity，如果设置为true，则能够启动，否则不能启动。如果设定为false，则目标Activity只能由与别名相同的应用程序组件或具有相同用户ID的应用程序通过别名来启动。</p>
<p>它的默认值依赖与别名是否包含了Intent过滤器，如果没有过滤器，则意味着这个Activity只能通过确切的别名名称来调用别名Activity，隐含的意思是这个别名只能在应用程序的内部使用（因为其他人不知道它的名称）—因此默认值是false。在另外一方面，如果至少有一个过滤器，则意味着这个别名可以在外部使用—因此默认值是true。</p>
</blockquote>
<h3 id="android-icon-4"><a href="#android-icon-4" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>当通过别名把目标Activity展示给用户时，使用这个属性给目标Activity设置一个图标。</p>
</blockquote>
<h3 id="android-label-4"><a href="#android-label-4" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>当通过别名把目标Activity展示给用户时，使用这个属性给目标Activity设置一个可读的标签。</p>
</blockquote>
<h3 id="android-name-5"><a href="#android-name-5" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>给别名设置一个唯一的名字。这个名字应该像一个完全限定的类名，但是不想目标Activity的名字那样，别名的名称是任意的，它不对应一个实际的类名。</p>
</blockquote>
<h3 id="android-permission-3"><a href="#android-permission-3" class="headerlink" title="android:permission"></a>android:permission</h3><blockquote>
<p>设定权限的名称，客户端必须有这个权限才能启动目标Activity或通过别名来获取目标Activity以便做某些事情。如果startActivity()或startActivityForResult()方法的调用者没有被授予指定的权限，那么目标Activity就不会被激活。</p>
<p>这个属性值会取代目标Activity自己所设置的任何权限。如果它没有设置，那么不需要权限就可以通过别名来激活目标Activity。</p>
</blockquote>
<h3 id="android-targetActivity"><a href="#android-targetActivity" class="headerlink" title="android:targetActivity"></a>android:targetActivity</h3><blockquote>
<p>这个属性用于设置通过别名所能够激活的那个Activity的名字。这个名字必须跟它前面的<activity>元素的name属性匹配。</activity></p>
</blockquote>
<h2 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h2><pre class=" language-xml"><code class="language-xml">&lt;receiver
    android:enabled=["true" | "false"]
    android:exported=["true" | "false"]
    android:icon="drawable resource"
    android:label="string resource"
    android:name="string"
    android:permission="string"
    android:process="string">
    . . .
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素用于声明一个广播接收器（一个BroadcastReceiver 子类），作为应用程序的组件之一。广播接收器能够让应用程序接收那些由系统或其他应用程序发出的广播Intent对象，即使是在该应用程序的其他组件没有运行的时候，也能够接收来自系统或其他应用程序的广播消息。</p>
<p>有两种方式让系统知道本应用程序用户一个广播接收器：</p>
<ol>
<li><p>在应用程序的清单文件中，使用本元素来声明注册一个广播接收器；</p>
</li>
<li><p>在代码中动态的创建一个广播接收器，并使用Context.registerReceiver()方法来注册它。有关更多动态创建接收器的方法，请看BoradcastReceiver类说明。</p>
</li>
</ol>
</blockquote>
<h3 id="android-enabled-4"><a href="#android-enabled-4" class="headerlink" title="android:enabled"></a>android:enabled</h3><blockquote>
<p>这个属性用于定义系统是否能够实例化这个广播接收器，如果设置为true，则能够实例化，如果设置为false，则不能被实例化。默认值是true。</p>
<p><code>&lt;application&gt;</code>元素有它自己的enabled属性，这个属性会应用给应用程序的所有组件，包括广播接收器。<application>和<receiver>元素的这个属性都必须是true，这个广播接收器才能够被启用。如果有一个被设置为false，该广播接收器会被禁止实例化。</receiver></application></p>
</blockquote>
<h3 id="android-exported-3"><a href="#android-exported-3" class="headerlink" title="android:exported"></a>android:exported</h3><blockquote>
<p>这个属性用于指示该广播接收器是否能够接收来自应用程序外部的消息，如果设置true，则能够接收，如果设置为false，则不能够接收。如果设置为false，这该接收只能接收那些由相同应用程序组件或带有相同用户ID的应用程序所发出的消息。</p>
<p>它的默认值依赖它所包含的Intent过滤器。如果不包含过滤器，则接收器只能由指定了明确类名的Intent对象来调用，这就意味着该接收器只能在应用程序内部使用（因为通常在应用程序外部是不会知道这个类名的）。这种情况下默认值就是false。另一方面，如果接受器至少包含了一个过滤器，那么就意味着这个接收器能够接收来自系统或其他应用程序的Intent对象，因此默认值是true。</p>
<p>这个属性不是唯一的限制广播接收外部调用的方法，还能够通过全限来限制能够给它发送消息的外部实体。</p>
</blockquote>
<h3 id="android-icon-5"><a href="#android-icon-5" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>这个属性定义了一个代表广播接收器的图标，这个属性必须用包含图片定义的可绘制资源来设定。如果没有设置这个属性，会是应用<application>元素的icon属性值来代替。</application></p>
<p>无论是这个属性还是<code>&lt;application&gt;</code>元素的icon属性，它们设置的图标也是所有的接收器的Intent过滤器的默认图标。</p>
</blockquote>
<h3 id="android-label-5"><a href="#android-label-5" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性给广播接收器设定一个用户可读的懂的文本标签。如果这个属性没有设置，那么就会使用<code>&lt;application&gt;</code>元素的label属性值来代替。</p>
<p>无论是这个属性还是<code>&lt;application&gt;</code>元素的label属性，它们设置的标签也是所有的接收器的Intent过滤器的默认标签。</p>
<p>应该使用一个字符串资源来设置这个属性，以便它能够像用户界面中的其他字符串一样能够被本地化。但是，为了应用开发的便利，也能够使用原生的字符串来设置。</p>
</blockquote>
<h3 id="android-name-6"><a href="#android-name-6" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性值要用广播接收器的实现类的类名来设置，它是BroadcastReceiver类的一个子类。通常要使用类的全名来设置（如：com.example.project.ReportReceiver）。但是，也可以使用简写（如：.ReportReceiver）。系统会自动的把<code>&lt;manifest&gt;</code>元素中的package属性所设定的包名添加到这个简写的名称上。</p>
<p>一旦发布了应用程序，就不应该在改变这个名字了（除非android:exported=”false”）。</p>
<p>这个属性没有默认值，这个名字必须被指定。</p>
</blockquote>
<h3 id="android-permission-4"><a href="#android-permission-4" class="headerlink" title="android:permission"></a>android:permission</h3><blockquote>
<p>这个属性用于定义把消息发送给该广播接收器的广播器所必须要有的权限。如果没有设置这个属性，那么<code>&lt;application&gt;</code>元素的permission属性所设置的权限就适用于这个广播接收器。如果<code>&lt;application&gt;</code>元素也没有设置权限，那么该接收器就不受权限的保护。</p>
</blockquote>
<h3 id="android-process-3"><a href="#android-process-3" class="headerlink" title="android:process"></a>android:process</h3><blockquote>
<p>这个属性用于设置该广播接收器应该运行在那个进程中的进程名。通常，应用程序的所有组件都在给应用程序创建的默认进程中运行，它有与应用程序包名相同的名称。<code>&lt;application&gt;</code>元素的process属性能够给它的所有组件设置一个不同的默认进程，但是它的每个组件自己的process属性能够覆盖这个默认设置，这样就允许把一个应用程序分离到多个进程中。</p>
<p>如果这个属性值用“:”开头，则在需要的时候系统会创建一个新的，应用程序私有的进程，并且该广播接收器也会运行在这个进程中。如果这个属性值用小写字母开头，那么接收器就会运行在以这个属性值命名的全局进程中，它提供使其工作的权限。这样就允许不同的应用程序组件来共享这个进程。</p>
</blockquote>
<h2 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h2><pre class=" language-xml"><code class="language-xml">&lt;provider
    android:authorities="list"
    android:enabled=["true" | "false"]
    android:exported=["true" | "false"]
    android:grantUriPermissions=["true" | "false"]
    android:icon="drawable resource"
    android:initOrder="integer"
    android:label="string resource"
    android:multiprocess=["true" | "false"]
    android:name="string"
    android:permission="string"
    android:process="string"
    android:readPermission="string"
    android:syncable=["true" | "false"]
    android:writePermission="string">
    . . .
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素用于声明一个内容提供器，它对应一个ContentProvider类的子类。它提供了对由应用程序管理的数据的结构化的访问。应用程序使用的所有的内容提供器都必须在其清单文件中由<provider>元素来声明。对于那些没有在清单中声明的内容提供器，系统看不到，也不会运行。（只需要声明那些作为该应用程序一部分的来开发的那些内容提供器，而不是那些由应用程序使用的由其他人开发本应用之外的那些内容提供器）。</provider></p>
<p>Android系统通过content:URI的授权部分来识别内容提供器。例如，假设下列的URI要传递给ContentResolver.query()方法：</p>
<p>content://com.example.project.healthcareprovider/nurses/rn</p>
<p>content:表示数据是属于内容提供器的，授权（com.example.project.healthcareprovider）：标识着一个具体的提供器。因此授权必须唯一的。通常，就像这个例子一样，授权是一个完整的ContentProvider子类的名称。URI的路径部分被内容提供器用来标识具体的数据子集，但是那些路径没有被声明在清单文件中。</p>
<p>关于使用可开发内容提供器的更多信息，请看内容提供的文档（）。</p>
<p><a href="http://blog.csdn.net/fireofstar/article/details/7307402" target="_blank" rel="external">http://blog.csdn.net/fireofstar/article/details/7307402</a></p>
</blockquote>
<h3 id="android-authorities"><a href="#android-authorities" class="headerlink" title="android:authorities"></a>android:authorities</h3><blockquote>
<p>标识内容提供器范围内的数据URI的授权列表，有多个授权时，要用分号来分离每个授权。为了避免冲突，授权名应该使用Java样式的命名规则（如：com.example.provider.cartoonprovider）。通常，用ContentProvider子类名称来设定这个属性。</p>
<p>这个属性没有默认值，至少要指定一个授权。</p>
</blockquote>
<h3 id="android-enabled-5"><a href="#android-enabled-5" class="headerlink" title="android:enabled"></a>android:enabled</h3><blockquote>
<p>这个属性用于指定这个内容提供器是否能够被系统安装。设置为true，则可以安装；否则不能安装。默认值是true。</p>
<p><code>&lt;application&gt;</code>元素有它自己的enabled属性，这个属性会应用给所有的应用程序组件，包括内容提供器。<code>&lt;application&gt;</code>和<code>&lt;provider&gt;</code>的enabled属性都必须设置为true（它们的默认值都是true）。如果有一个设置为false，那么提供器就被禁止安装。</p>
</blockquote>
<h3 id="android-exported-4"><a href="#android-exported-4" class="headerlink" title="android:exported"></a>android:exported</h3><blockquote>
<p>这个属性用于指定该内容提供器是否能够被其他的应用程序组件使用。如果设置为true，则可以被使用，否则不能被使用。如果设置为false，该提供器只对同名的应用程序或有相同用户ID的应用程序有效。默认值是true。</p>
<p>虽然能够使用这个属性来公开内容提供器，但是依然还要用permission属性来限制对它的访问。</p>
</blockquote>
<h3 id="android-grantUriPermission"><a href="#android-grantUriPermission" class="headerlink" title="android:grantUriPermission"></a>android:grantUriPermission</h3><blockquote>
<p>这个属性用于设定那些对内容提供的数据没有访问权限的访问者，是否能够被授予访问的权限，这个权限是临时性的，它会克服由readPermission、writePermission和permission属性的设置限制。如果这个属性设置为true，那么权限就可以授予访问者，否则不会授予没有访问权限的访问者。如果设置为true，则权限可以临时被授予内容提供器的任何数据。如果设置为false，则权限只能被授予<code>&lt;gran-uri-permission&gt;</code>子元素中所列出的数据子集。默认值是false。</p>
<p>这种授权是应用程序提供了一种一次性访问被权限所保护的数据的方法。例如，当一个e-mail包含了一个附件时，mail应用程序就可以调用适当的浏览器来打开附件，即使这个浏览器没有查看所有内容提供器数据的权限。</p>
<p>在这样的场景中，权限是通过激活组件的Intent对象中的FLAG_GRANT_READ_URI_PERMISSION和FLAG_GRANT_WRITE_URI_PERMISSION标记来授予的。例如，mail应用程序可以把FLAG_GRANT_READ_URI_PERMISSION标记放到传递给Context.startActivity()方法的Intent参数中。这样权限就被授予了Intent对象中所指定的URI。</p>
<p>如果要启用这个功能，既可以通过把这个属性设置为true来完成，也可以通过定义<code>&lt;grant-uri-permission&gt;</code>子元素来实现，在切换RUI时，必须调用Context.revokeUriPermission()方法从提供器把权限删除。<br> android:icon</p>
<p>这个属性用于定义一个代表内容提供器的图标。它必须要引用一个包含图片定义的可绘制资源。如果这个属性没有设置，那么就会使用应用程序的<code>&lt;application&gt;</code>元素的icon属性值来代替。</p>
</blockquote>
<h3 id="android-initOrder"><a href="#android-initOrder" class="headerlink" title="android:initOrder"></a>android:initOrder</h3><blockquote>
<p>这个属性用于定义内容提供器应该被实例化的顺序，这个顺序是相对与相同进程所拥有的其他内容提供器的。当内容提供器间有相互的依赖时，就需要设置这个属性，以确保它们能够按照其依赖的顺序被创建。这个属性值是一个简单的整数，大的数字要被优先初始化。</p>
</blockquote>
<h3 id="android-label-6"><a href="#android-label-6" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性用于给内容提供器定义一个用户可读的标签。如果这个属性没有设置，那么它会使用<code>&lt;application&gt;</code>元素的label属性值来代替。</p>
<p>这个标签应该引用一个字符串资源来设置，以便它能够像其他的用户界面中的字符串一样被本地化。但是为了方便应用程序的开发，也能够使用原生的字符串来设置这个属性，但正式发布时一定要引用字符串资源。</p>
</blockquote>
<h3 id="android-multiprocess-1"><a href="#android-multiprocess-1" class="headerlink" title="android:multiprocess"></a>android:multiprocess</h3><blockquote>
<p>这个属性用于设定是否能够在每个使用该内容提供器的客户端进程中都创建一个内容提供器的实例，如果设置为true，这个能够在其每个客户端进程中创建一个实例，否则不可以。默认值是false。</p>
<p>通常，内容提供器是在定义它的应用程序的进程中被实例化的。但是，如果这个属性被设置为true，系统就能够在每个要与该内容提供器进行交互的客户端进程中创建一个内容提供器的实例，这样就避免了进程间通信的开销。</p>
</blockquote>
<h3 id="android-name-7"><a href="#android-name-7" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用于定义内容提供器的实现类的名称，它是ContentProvider类的一个子类。这个属性应该使用完整的Java类名来设定（如：com.example.project.TransportationProvider）。但是也可以使用简写（如：.TransporttationProvider），这时系统会使用<manifest>元素中指定的包名跟这个简写名称的组合来识别内容提供器。</manifest></p>
<p>这个属性没有默认值，必须要给这个属性设定一个名称。</p>
</blockquote>
<h3 id="android-permission-5"><a href="#android-permission-5" class="headerlink" title="android:permission"></a>android:permission</h3><blockquote>
<p>这个属性用于设定客户端在读写内容提供器的数据时必须要有的权限的名称。这个属性为同时设置读写权限提供了一种便利的方法。但是readPermission和writePermission属性的优先级要比这个属性高。如果readPermission属性也被设置了，那么它就会控制对内容提供器的查询访问。如果writePermission属性被设置，它就会控制对内容提供器数据的修改访问。</p>
</blockquote>
<h3 id="android-process-4"><a href="#android-process-4" class="headerlink" title="android:process"></a>android:process</h3><blockquote>
<p>这个属性用于定义内容提供器应该运行在那个进程中的进程名称。通常，应用程序的所有组件都运行在给应用程序创建的默认进程中。它有与应用程序包相同的名称。<code>&lt;application&gt;</code>元素的process属性能够给其所有的组件设置一个不同的默认进程。但是每个组件都能够用它们自己的process属性来覆盖这个默认设置，从而允许把应用程序分离到不同的多个进程中。</p>
<p>如果这个属性值是用“:”开头的，那么在需要这个提供器的时候，系统就会给这个应用程序创建一个新的私有进程，并且对应的Activity也要运行在那个私有进程中。如果用小写字母开头，那么Activity则会运行在一个用这个属性值命名的全局进程中，它提供了对内容提供器的访问权限。这样就允许不同应用程序的组件能够共享这个进程，从而减少对系统资源的使用。</p>
</blockquote>
<h3 id="android-readPermission"><a href="#android-readPermission" class="headerlink" title="android:readPermission"></a>android:readPermission</h3><blockquote>
<p>这个属性用于设置查询内容提供器的数据时，客户端所必须要有的权限。</p>
</blockquote>
<h3 id="android-syncable"><a href="#android-syncable" class="headerlink" title="android:syncable"></a>android:syncable</h3><blockquote>
<p>这个属性用于设定内容提供器控制下的数据是否要与服务器上的数据进行同步，如果设置为true，则要同步，否则不需要同步。</p>
</blockquote>
<h3 id="android-writePermission"><a href="#android-writePermission" class="headerlink" title="android:writePermission"></a>android:writePermission</h3><blockquote>
<p>这个属性用于设置修改内容提供器的数据时，客户端所必须要有的权限。</p>
</blockquote>
<h2 id="path-permission"><a href="#path-permission" class="headerlink" title="path-permission"></a>path-permission</h2><pre><code>&lt;path-permission
    android:path=&quot;string&quot;
    android:pathPrefix=&quot;string&quot;
    android:pathPattern=&quot;string&quot;
    android:permission=&quot;string&quot;
    android:readPermission=&quot;string&quot;
    android:writePermission=&quot;string&quot;/&gt;
</code></pre><blockquote>
<p>这个元素用于定义内容提供器中的具体的数据子集的路径以及必要的权限。这个元素能够多次使用，以便提供多个路径。</p>
</blockquote>
<h3 id="android-path"><a href="#android-path" class="headerlink" title="android:path"></a>android:path</h3><blockquote>
<p>给内容提供器的数据定义一个完整的URI（数据资源标识）路径。权限只能被授予这个路径所标识的具体数据。</p>
</blockquote>
<h3 id="android-pathPrefix"><a href="#android-pathPrefix" class="headerlink" title="android:pathPrefix"></a>android:pathPrefix</h3><blockquote>
<p>这个属性定义了内容提供器的数据子集的URI的初始部分。权限能够被授予所有那些共享这个URI初始部分的数据子集。</p>
</blockquote>
<h3 id="android-pathPattern"><a href="#android-pathPattern" class="headerlink" title="android:pathPattern"></a>android:pathPattern</h3><blockquote>
<p>这个属性给内容提供器数据子集定义了一个完整的URI路径，但是URI中能够使用下列之一的通配符：</p>
<ol>
<li><p>星号（<em>）通配符，路径中的</em>星号代表任意多个星号之前的那个字符，如a*，可跟a、aa、aaa、aaaa、…字符串匹配。</p>
</li>
<li><p>点跟星号的组合(.<em>)通配符，它可以跟任意字符串进行匹配，如.</em>html，可以跟abchhtml、chtml、html、dssf.html、…等字符串匹配。</p>
</li>
</ol>
<p>因为系统读取XML中的字符串时，会把’\’符号作为强制转义字符，因此就需要两次转义。例如，符号”<em>”要被写成”\</em>”，符号’\’要被写成”\\”。这与Java代码中的写法基本相同。</p>
<p>有关这些模式类型的更多信息，请看PatternMatcher类中的PATTERN_LITERAL、PATTERN_PREFIX、PATTERN_SIMPLE_GLOB的说明。</p>
<p><a href="http://developer.android.com/reference/android/os/PatternMatcher.html" target="_blank" rel="external">http://developer.android.com/reference/android/os/PatternMatcher.html</a></p>
</blockquote>
<h3 id="android-permission-6"><a href="#android-permission-6" class="headerlink" title="android:permission"></a>android:permission</h3><blockquote>
<p>这个属性定义了一个权限名称，为了读写内容提供器中的数，客户端必须要有这个权限。这个属性是给数据设置读写权限的便利的方法，但是readPermission和writePermission属性比这个属性的优先级要高。</p>
</blockquote>
<h3 id="android-readPermission-1"><a href="#android-readPermission-1" class="headerlink" title="android:readPermission"></a>android:readPermission</h3><blockquote>
<p>为了读取查询内容提供器中的数据，客户端必须要这个权限。</p>
</blockquote>
<h3 id="android-writePermission-1"><a href="#android-writePermission-1" class="headerlink" title="android:writePermission"></a>android:writePermission</h3><blockquote>
<p>为了能够改变由内容提供器所控制的数据，客户端必须要有这个权限。</p>
</blockquote>
<h2 id="grant-uri-permission"><a href="#grant-uri-permission" class="headerlink" title="grant-uri-permission"></a>grant-uri-permission</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grant-uri-permission</span>
    <span class="token attr-name"><span class="token namespace">android:</span>path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>pathPattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>pathPrefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>这个元素用于给内容提供器的数据子集授权。数据子集是由content:URI的路径部分来标识的。授权是提供器给客户端提供的一种能力，这样客户就可以访问通常没有权限访问的数据，从而克服基于单次访问的限制。</p>
<p>如果内容提供器的grantUriPermissions属性被设置为true，那么权限能够被授予内容提供器范围内的任何数据。但是，如果grantUriPermission属性被设置为false，那么权限就只能授予这个元素所指定的数据子集。一个内容提供器能够包含任意多个个<code>&lt;grant-uri-permission&gt;</code>元素。每个都只能指定一个路径（三个可能属性中的一个）。</p>
<p>有关如何授权的更多信息，请看<intet-filter>``元素的grantUriPermissions属性。</intet-filter></p>
</blockquote>
<h3 id="android-path-1"><a href="#android-path-1" class="headerlink" title="android:path"></a>android:path</h3><h3 id="android-pathprefix"><a href="#android-pathprefix" class="headerlink" title="android:pathprefix"></a>android:pathprefix</h3><h3 id="android-pathPattern-1"><a href="#android-pathPattern-1" class="headerlink" title="android:pathPattern"></a>android:pathPattern</h3><blockquote>
<p>一个路径标识了能够被授权的一个或多个数据子集。path属性指定了一个完整的路径，权限只能被授予这个路径所标识的具体的数据子集。pathPrefix属性指定了路径的初始部分，权限能够被授予共享这个初始路径的所有数据子集。pathPattern属性指定了一个完整的路径，但是这个路径中包含了通配符：</p>
<ol>
<li>星号（<em>）通配符，路径中的</em>星号代表任意多个星号之前的那个字符，如a*，可跟a、aa、aaa、aaaa、…字符串匹配。</li>
</ol>
</blockquote>
<ol>
<li>点跟星号的组合(.<em>)通配符，它可以跟任意字符串进行匹配，如.</em>html，可以跟abchhtml、chtml、html、dssf.html、…等字符串匹配。</li>
</ol>
<p>因为系统读取XML中的字符串时，会把’\’符号作为强制转义字符，因此就需要两次转义。例如，符号”<em>”要被写成”\</em>”，符号’\’要被写成”\\”。这与Java代码中的写法基本相同。</p>
<p>有关这三种模式的更多信息，请看PatternMatcher类中的PATTERN_LITERAL、PATTERN_PREFIX、PATTERN_SIMPLE_GLOB的说明。</p>
<p><a href="http://developer.android.com/reference/android/os/PatternMatcher.html" target="_blank" rel="external">http://developer.android.com/reference/android/os/PatternMatcher.html</a></p>
<h2 id="compatible-screen"><a href="#compatible-screen" class="headerlink" title="compatible-screen"></a>compatible-screen</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compatible-screens</span><span class="token punctuation">></span></span>
    &lt;screen
        android:screenSize=["small" | "normal" | "large" | "xlarge"]
        android:screenDensity=["ldpi" | "mdpi" | "hdpi" | "xhdpi"] />
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compatible-screens</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这个元素用于指定那些屏幕配置跟应用程序是兼容的。在应用的清单中只允许有一个<code>&lt;compatible-screent&gt;</code>元素的实例，但是它能够包含多个<code>&lt;screen&gt;</code>元素。每个<code>&lt;screen&gt;</code>元素指定一个特定的跟应用程序兼容的尺寸—密度组合。</p>
<p>Android系统不会读取<compatible-screen>清单元素（无论是在安装的时候，还是在运行的时候）。这个元素的信息只能被外部服务使用（如Google Play），以便使其能够更好的理解应用程序跟指定屏幕配置的兼容性。任何没有在这个元素中声明的屏幕配置，都是跟应用程序不兼容的屏幕。这样，外部服务（如Google Play）就不应该把应用程序提供给带有这样屏幕的设备。</compatible-screen></p>
<p>警告：通常不应该使用这个清单元素。因为使用这个元素会显著的降低应用程序潜在的用户群。如果设备带有一个应用程序清单中没有列出屏幕配置，那么就不会允许用户安装这个应用程序。在肯定应用程序在所有的屏幕配置上都不会工作时，最后才使用这个方法。相反为了给多个屏幕提供完全的支持，应该按照“支持屏幕多种配置”指南<code>http://developer.android.com/guide/practices/screens_support.html</code>来给不同的屏幕尺寸和密度来添加可选的资源。</p>
<p>如果只想给应用程序设置一个最小的屏幕尺寸，那么就应该使用<code>&lt;supports-screens&gt;</code>元素。例如，如果要让应用程序只对大屏幕（large）或超大屏幕（xlarge）的设备有效，那么<code>&lt;supports-screen&gt;</code>元素就要声明应用程序不支持小屏幕（small）和普通屏幕（normal）的设备。外部服务（如Google Play）根据<code>&lt;supports-screen&gt;</code>的设置来过滤应用程序。还能够使用<code>&lt;supports-screens&gt;</code>元素来声明系统是否应该调整应用程序，以便适应不同的屏幕尺寸。</p>
</blockquote>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><blockquote>
<p>这个元素指定一个跟应用程序兼容的屏幕配置。</p>
<p>在<code>&lt;compatible-screens&gt;</code>元素内部，至少要有一个这个元素的实例。这个元素必须同时包含android:screenSize和android:screenDensity属性，如果没有同时声明，那么这个元素就会被忽略。</p>
</blockquote>
<h3 id="android-screenSize"><a href="#android-screenSize" class="headerlink" title="android:screenSize"></a>android:screenSize</h3><blockquote>
<p>指定跟应用程序兼容的屏幕配置的屏幕尺寸。可以是以下的值：</p>
<p>·  small<br>·  normal<br>·  large<br>·  xlarge</p>
</blockquote>
<h3 id="android-screenDensity"><a href="#android-screenDensity" class="headerlink" title="android:screenDensity"></a>android:screenDensity</h3><blockquote>
<p>指定跟应用程序兼容的屏幕配置的屏幕密度，可以是以下值：</p>
<p>·  ldpi<br>·  mdpi<br>·  hdpi<br>·  xhdpi</p>
<p>例子（EXAMPLE）：</p>
<p>如果应用程序仅跟小屏和普通屏幕的设备兼容，而不管屏幕的密度，那么必须要指定八个不同的<screen>元素，因为每个屏幕尺寸都有四种不同密度的配置。必须对这些配置逐一声明；任何没有指定的尺寸和密度的组合，都会被认为这个屏幕配置跟应用程序不兼容。如果应用程序只跟小屏幕和普通屏幕兼容，那么清单配置如下：</screen></p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name">...</span> <span class="token punctuation">></span></span>
    ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compatible-screens</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- all small size screens --></span>
        &lt;screenandroid:screenSize="small"android:screenDensity="ldpi"/>
        &lt;screenandroid:screenSize="small"android:screenDensity="mdpi"/>
        &lt;screenandroid:screenSize="small"android:screenDensity="hdpi"/>
        &lt;screenandroid:screenSize="small"android:screenDensity="xhdpi"/>
        <span class="token comment" spellcheck="true">&lt;!-- all normal size screens --></span>
        &lt;screenandroid:screenSize="normal"android:screenDensity="ldpi"/>
        &lt;screenandroid:screenSize="normal"android:screenDensity="mdpi"/>
        &lt;screenandroid:screenSize="normal"android:screenDensity="hdpi"/>
        &lt;screenandroid:screenSize="normal"android:screenDensity="xhdpi"/>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compatible-screens</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">...</span> <span class="token punctuation">></span></span>
        ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="instrumentation"><a href="#instrumentation" class="headerlink" title="instrumentation"></a>instrumentation</h2><pre class=" language-xml"><code class="language-xml">&lt;instrumentation
    android:functionalTest=["true" | "false"]
    android:handleProfiling=["true" | "false"]
    android:icon="drawable resource"
    android:label="string resource"
    android:name="string"
    android:targetPackage="string"/>
</code></pre>
<blockquote>
<p>这个元素声明了一个Instrumentation类，这个类能够监视应用程序跟系统的交互。Instrumentation对象会在应用的其他所有组件被实例化之前实例化。</p>
</blockquote>
<h3 id="android-functionalTest"><a href="#android-functionalTest" class="headerlink" title="android:functionalTest"></a>android:functionalTest</h3><blockquote>
<p>这个属性用于指定Instrumentation类是否应该作为一个功能性的测试来运行，如果设置为true，这要运行，否则不应该运行。默认值是false。</p>
</blockquote>
<h3 id="android-handleProfiling"><a href="#android-handleProfiling" class="headerlink" title="android:handleProfiling"></a>android:handleProfiling</h3><blockquote>
<p>这个属性用于指定Instrumentation对象是否会开启和关闭分析功能。如果设置为true，那么由Instrumentation对象来决定分析功能的启动和终止时机，如果设置为false，则分析功能会持续到Instrumentation对象整个运行周期。如果设置为true，会使Instrumentation对象针对一组特定的操作来进行分析。默认值是false。</p>
</blockquote>
<h3 id="android-icon-6"><a href="#android-icon-6" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>这个属性用于给Instrumentation类设置一个图标。它必须要应用一个可绘制的资源。</p>
</blockquote>
<h3 id="android-label-7"><a href="#android-label-7" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性用于给Instrumentation类设置一个用户可读的标签。这个标签可用原生字符串，也可以引用一个字符串资源。</p>
</blockquote>
<h3 id="android-name-8"><a href="#android-name-8" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用于设定Instrumentation子类的名称。应该是完整的Java类名（如：com.example.project.StringInstrumentation）。但是，也可以用简写方式(如：.StringInstrumentation)，它的包名会使用<manifest>元素的package属性中指定的包名。</manifest></p>
<p>它没有默认值，必须被指定。</p>
</blockquote>
<h3 id="android-targetPackage"><a href="#android-targetPackage" class="headerlink" title="android:targetPackage"></a>android:targetPackage</h3><blockquote>
<p>这个属性用于指定Instrumenttation对象所监视的应用程序。由包名所标识的应用程序会跟清单的<manifest>元素的package属性值相关联。</manifest></p>
</blockquote>
<h2 id="permission"><a href="#permission" class="headerlink" title="permission"></a>permission</h2><pre class=" language-xml"><code class="language-xml">
&lt;permission
    android:description="string resource"
    android:icon="drawable resource"
    android:label="string resource"
    android:name="string"
    android:permissionGroup="string"
    android:protectionLevel=["normal" | "dangerous" | "signature"|"signatureOrSystem"] />
</code></pre>
<p>这个元素用于声明一个安全权限，以便限制对具体的组件、或组件功能、或其他的应用的访问</p>
<h3 id="android-description-1"><a href="#android-description-1" class="headerlink" title="android:description"></a>android:description</h3><blockquote>
<p>这个属性用于给权限定义一个用户可读的懂的描述，它要比标签更长更详细。它可以显示给用户，以便向用户解释权限的含义—例如，当询问用户是否要给另一个应用程序授予对应的权限的时候，就会把这个属性所定义的说明显示给用户。</p>
</blockquote>
<h3 id="android-icon-7"><a href="#android-icon-7" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>这个属性要引用一个可绘制的图标资源，用于代表这个权限。</p>
</blockquote>
<h3 id="android-label-8"><a href="#android-label-8" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性定义了一个能够显示给用户的权限名称。</p>
<p>为了方便，在开发应用程序时，这个标签能够直接使用原生的字符串。但是当应用程序要正式发布时，它应用使用一个字符串资源来设置，以便它能够跟用户界面中的其他字符串一样被本地化。</p>
</blockquote>
<h3 id="android-name-9"><a href="#android-name-9" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性定义了权限的名称。它是在程序代码中引用的权限的名称—例如，在一个<uses-permission>元素中和应用程序组件中的permission属性。</uses-permission></p>
<p>这个名称必须是唯一的，因此要使用Java样式的命名规则—例如：com.example.project.PERMITTED_ACTION</p>
</blockquote>
<h3 id="android-permissionGroup"><a href="#android-permissionGroup" class="headerlink" title="android:permissionGroup"></a>android:permissionGroup</h3><p>这个属性用于把这个权限分配到一个权限组中。这个属性的值是一个权限组的名称，它必须是在本应用程序或另一个应用中用<permission-group>元素声明的权限组。如果这个属性没有被设置，那么这个权限不属于任何权限分组。</permission-group></p>
<h3 id="android-protectionLevel"><a href="#android-protectionLevel" class="headerlink" title="android:protectionLevel"></a>android:protectionLevel</h3><blockquote>
<p>特权就意味着潜在的风险，因此在判定是否要把权限授予请求的应用程序时，使用这个属性定义来指示系统应该遵循的过程。它可能是表中的值之一。</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>默认值。这是让请求的应用程序访问独立的应用程序级功能的一个较低风险的权限，它会给另一个应用程序、系统、或用户带来最小化的风险。系统在安装应用程序时会自动的把这种类型的权限授予请求的应用程序，而不需要用户明确的批准（虽然在安装应用程序之前，用户始终可以有选择的查看这些权限）。</td>
</tr>
<tr>
<td>dangerous</td>
<td>这个是一个较高风险的授权，它会让请求该权限的应用程序访问私有的用户数据，或者控制用户设备，从而给用户带来负面影响。因为这种权限会引入潜在的风险，因此系统不会自动把这种权限授予请求这个权限的应用程序。例如，应用程序所请求的这些dangerous类型的权限，在确认处理之前，可以显示给用户，或者采用一些其他的方法，以避免用户自动把权限授予所请求的应用程序。</td>
</tr>
<tr>
<td>signature</td>
<td>系统只会把这种权限授予具有相同数字签名的应用程序，也就是说，请求该权限的应用程序要与声明该权限的应用程序具有相同的数字签名。如果证书匹配，系统就会自动的把该权限请求权限的应用程序，而不会通知用户，也不会要求用户明确的批准。</td>
</tr>
<tr>
<td>signatureOrSystem</td>
<td>系统只会把这种权限授予Android系统镜像中应用程序，或者是那些与系统镜像中具有相同证书签名的应用程序。请避免使用这个选项，因为signature类型的权限应该足以满足大多数工作的需要。SingatureOrSystem权限主要用于某些特定的场景，如：多个厂商有一些要构建在系统镜像中的应用程序，并且它们共享一些明确的特殊功能。</td>
</tr>
</tbody>
</table>
<h2 id="permission-tree"><a href="#permission-tree" class="headerlink" title="permission-tree"></a>permission-tree</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission-tree</span>
    <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>drawable resource<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string resource<span class="token punctuation">"</span></span> <span class="token attr-name">]</span>
    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>这个元素用于声明权限树的根节点名称，应用程序持有树中定义的所有权限名称所对应的权限。通过调用PackageManager.addPermission()方法能够动态的来添加新的权限。树中的名称是通过”.”来分离的。例如：如果跟节点的名称是com.example.project.taxes，那么可以使用下面的格式来添加权限：</p>
<p>com.example.project.taxes.CALCULATE<br>com.example.project.taxes.deductions.MAKE_SOME_UP<br>com.example.project.taxes.deductions.EXAGGERATE</p>
<p>要注意的是，这个元素本身并不声明权限，它只是一个能够放置更多权限的命名空间。关于声明权限的更多信息，请看<code>&lt;permission&gt;</code>元素。</p>
</blockquote>
<h3 id="android-icon-8"><a href="#android-icon-8" class="headerlink" title="android:icon"></a>android:icon</h3><p>这个属性定义了一个代表树中所有权限的图标。这个属性必须要引用一个包含图片定义的可绘制资源来设置。</p>
<h3 id="android-label-9"><a href="#android-label-9" class="headerlink" title="android:label"></a>android:label</h3><p>给权限树定义一个用户可读的名称。为了开发应用程序方便，可以直接使用原生的字符串来设置这个属性，但是，当正式发布应用程序时，应该引用一个字符串资源来设置这个属性，以便它能够像用户界面中的其他属性一样能够被本地化。</p>
<h3 id="android-name-10"><a href="#android-name-10" class="headerlink" title="android:name"></a>android:name</h3><p>这个属性定义了权限树根节点的名称。它被用于树中所有权限名称的前缀。应该使用Java样式命名规则，以确保名称的唯一性。在命名中必须要有两个以上的”.”来进行分离，例如：com.example.base是正确的，但com.example就是错误的。</p>
<h2 id="permission-group"><a href="#permission-group" class="headerlink" title="permission-group"></a>permission-group</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission-group</span>
    <span class="token attr-name"><span class="token namespace">android:</span>description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string resource<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>drawable resource<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string resource<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>给相关的权限声明一个逻辑上的分组名称。独立的权限要通过<code>&lt;permission&gt;</code>元素的permissionGroup属性来加入权限分组。同一分组的中成员会一起展现在用户的界面中。</p>
<p>要注意的是这个元素本身并不能声明权限，它只是放置相关权限的一个分类。有关声明权限和权限分组的相关信息，请看<code>&lt;permission&gt;</code>元素。</p>
</blockquote>
<h3 id="android-description-2"><a href="#android-description-2" class="headerlink" title="android:description"></a>android:description</h3><blockquote>
<p>这个属性用于给权限组定义一个用户可读的说明性文本。这个文本应该比标签更长、更详细。这个属性必须要引用一个字符串资源，跟label属性不一样，它不能够使用原生的字符串。</p>
</blockquote>
<h3 id="android-icon-9"><a href="#android-icon-9" class="headerlink" title="android:icon"></a>android:icon</h3><blockquote>
<p>这个属性定义了一个代表权限的图标。这个属性要使用包含图片定义的可绘制资源来定义。</p>
</blockquote>
<h3 id="android-label-10"><a href="#android-label-10" class="headerlink" title="android:label"></a>android:label</h3><blockquote>
<p>这个属性给权限组定义了一个用户可读的名称。为了开发方便，在开发时，可以直接使用原生的字符串来设置这个属性。但是，当应用程序正式发布时，应该使用字符串资源来设置，以便能够像用户界面中其他的字符串一样能够被本地化。</p>
</blockquote>
<h3 id="android-name-11"><a href="#android-name-11" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性定义了权限组的名称，它是能够分配给<permission>元素的permissionGroup属性的名称。</permission></p>
</blockquote>
<h2 id="supports-screens"><a href="#supports-screens" class="headerlink" title="supports-screens"></a>supports-screens</h2><pre class=" language-xml"><code class="language-xml">&lt;supports-screens
    android:resizeable=["true"|"false"]
    android:smallScreens=["true" | "false"]
    android:normalScreens=["true" | "false"]
    android:largeScreens=["true" | "false"]
    android:xlargeScreens=["true" | "false"]
    android:anyDensity=["true" | "false"]
    android:requiresSmallestWidthDp="integer"
    android:compatibleWidthLimitDp="integer"
    android:largestWidthLimitDp="integer"/>
</code></pre>
<blockquote>
<p>这个元素用于指定应用程序所支持的屏幕尺寸，并针对比应用程序所支持的屏幕还要大屏幕，启用屏幕兼容模式。在应用程序中使用这个元素指定应用程序所支持的屏幕尺寸是至关重要的。</p>
<p>如果应用程序调整尺寸属性来填充整个屏幕，那么应用程序就要支持这个给定的尺寸。通常对于大多数应用程序，系统可以很好的完成这种调整工作，并且为了让应用程序在比一个手持设备大的屏幕上工作，你不需要做任何额外的工作。但是，针对不同的屏幕尺寸，通过提供可选的布局资源来优化应用程序的UI经常是很重要的。例如，一个运行在手持设备上的Activity布局，如果想要运行在平板电脑上，就需要修改这个Activity的布局。</p>
<p>但是，如果为了适应不同的屏幕尺寸而调整了尺寸，但应用程序也不能很好的工作，就可以使用<supports-screens>元素的属性来控制应用程序是否应该发布给屏幕较小的设备，或者使用系统的屏幕兼容模式，让UI放大以适应较大屏幕的要求。在没有针对较大屏幕尺寸的设计，并且普通的尺寸不能达到合适结果时，屏幕的兼容模式会通过模拟普通尺寸的屏幕和中等密度来缩放UI，以便它能够填充整个屏幕，这样会导致UI模糊，因此针对大屏幕的优化是比较好的。</supports-screens></p>
<p>注意：Android3.2引入了新的属性：android:requiresSmallestWidthDp、android:compatibleWidthLimitDp和android:largestWidthLimitDp。如果正在开发Android3.2或更高版本的应用程序，应该使用这些属性来声明应用程序所支持的屏幕尺寸，而不是基于一般的屏幕尺寸属性。</p>
<p>有关如何正确的支持不同的屏幕尺寸，以便避免给应用程序使用屏幕兼容模式的更多信息，请阅读“<a href="http://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">Supporting Multiple Screens</a>”</p>
</blockquote>
<h3 id="android-resizeable"><a href="#android-resizeable" class="headerlink" title="android:resizeable"></a>android:resizeable</h3><blockquote>
<p>这个属性用于指示针对不同的屏幕尺寸，应用程序是否可以调整尺寸。默认值是true。如果这个属性设置了false，在大的屏幕上，系统会在屏幕兼容模式中运行该应用程序。</p>
<p>这个属性被废弃了，引入这个属性主要是为了帮助应用程序从1.5过渡到1.6。当多屏幕支持被引入时，就不应该在使用它了。</p>
</blockquote>
<h3 id="android-smallScreens"><a href="#android-smallScreens" class="headerlink" title="android:smallScreens"></a>android:smallScreens</h3><blockquote>
<p>这个属性用于指定应用程序是否支持较小外形的屏幕。一个small类型的屏幕被定义成一个比normal（传统的HVGA）类型的屏幕还要小的屏幕。外部服务（如Google Play）不会把不支持小屏的应用程序提供给小屏设备，因为很少有能够确保该应用程序在小屏幕的设备上正常工作的平台。这个属性的默认值是true。</p>
</blockquote>
<h3 id="android-normalScreens"><a href="#android-normalScreens" class="headerlink" title="android:normalScreens"></a>android:normalScreens</h3><blockquote>
<p>这个属性用于指示应用程序是否支持普通外形的屏幕。典型的是HVGA中等密度的屏幕，但是WQVGA低密度和WVGA高密度屏幕也被认为是普通屏幕。这个属性的默认值是true。</p>
</blockquote>
<h3 id="android-largeScreens"><a href="#android-largeScreens" class="headerlink" title="android:largeScreens"></a>android:largeScreens</h3><blockquote>
<p>这个属性用于指示应用程序是否支持较大外形的屏幕。一个large类型的屏幕被定义成一个比normal类型的手持设备的屏幕明显还要大的屏幕，并且为了让应用程序能够良好的使用，使用这个属性时要特别小心，尽管可以依赖系统来调整尺寸，以便能够填充屏幕。</p>
<p>这个属性的默认值实际上在某些版本之间是不同的，因此最好在任何时候都明确的声明这个属性。如果设置为false，系统会启用屏幕兼容模式，这时要格外的小心。</p>
</blockquote>
<h3 id="android-xlargeScreens"><a href="#android-xlargeScreens" class="headerlink" title="android:xlargeScreens"></a>android:xlargeScreens</h3><blockquote>
<p>这个属性用于指示应用程序是否支持超大外形的屏幕。一个xlarge屏幕被定义成一个比large屏幕还要大的屏幕，如平板电脑，为了能够让应用程序良好的使用，需要特别小心的使用这个属性，尽管可以依赖系统来UI的尺寸来填充屏幕。</p>
</blockquote>
<h3 id="android-anyDensity"><a href="#android-anyDensity" class="headerlink" title="android:anyDensity"></a>android:anyDensity</h3><blockquote>
<p>这个属性指明应用程序是否包含了能够适用于任何屏幕密度的资源。</p>
<p>对于支持Android1.6（API Level 4）和更高版本的应用程序，这个属性的默认值是true，并且除非绝对的确认这是应用程序正常工作所必须的，否则不应该把它设置为false。只是在应用程序直接操作位图时才需要禁止这个属性。</p>
</blockquote>
<h3 id="android-requiresSmallestWidthDp"><a href="#android-requiresSmallestWidthDp" class="headerlink" title="android:requiresSmallestWidthDp"></a>android:requiresSmallestWidthDp</h3><blockquote>
<p>这个属性用于指定smallestWidth的最小需求。smallestWidth是屏幕空间的最短尺寸（以dp为单位），它必须是对应用程序的UI是有效的。也就是说它是有效的屏幕的两个维度的尺寸中最短的那个。因此为了考虑设备跟应用程序的兼容性，设备的smallestWidth的值必须要大于等于这个属性所设置的值。通常这个属性值是针对布局所支持的最小宽度，而不是屏幕当前的方向。</p>
<p>例如，典型的手持设备屏幕smallestWidth是320dp；7英寸的平板电脑的smallestWidth是600dp；10英寸的平板电脑的smallestWidth是720dp。这些值一般都是最小的宽度，因为它们是屏幕可用空间中最短的那个尺寸。</p>
<p>这对这个尺寸值的比较，需要考虑屏幕的装饰和系统UI部分。例如，如果系统有一些固定的UI元素要显示，那么系统声明的设备的最小宽度（smallestWidth）要比实际的屏幕尺寸要小，因为被系统UI占用的屏幕像素对于应用的UI是无效的。因此，这个值应该是应用布局所使用的最小宽度需求，而不管屏幕的当前方向。</p>
<p>如果应用程序能够针对较小屏幕尺寸进行正确的调整（small尺寸或最小宽度是320dp以下的屏幕），那么就不需要这个属性。否则就应该使用这个属性值跟应用程序所使用的最小屏幕宽度限定符的值（sw<n>dp）相匹配。</n></p>
<p>警告：Android系统不会关注这个属性，因此它不会影响应用程序在运行时的行为。相反，它被服务（如Google Play）用于过滤应用程序。但是，当前Google Play不支持用这个属性来过滤（在Android3.2上），因此如果应用程序不支持小屏幕设备，就应该继续使用其他的尺寸属性。<br>这个属性在API Level 13中被引入。</p>
<p>android:compatibleWidthLimitDp</p>
<p>这个属性允许在设计应用程序时，通过指定最大的“smallest screen width”来启用屏幕兼容模式，作为一个用户可选的功能。如果设备的有效屏幕的最小边比这个属性值大，那么用户依然能够安装该应用程序，但是在运行时要使用屏幕兼容模式。默认情况下，屏幕兼容模式似乎被禁止的，并且通过会调整布局的尺寸来填充屏幕，但是在系统栏中会有一个按钮，让用户选择屏幕兼容模式的打开和关闭。</p>
<p>如果应用程序跟所有的屏幕尺寸都兼容，并且它的布局能够被正确的调整尺寸，就不需要使用这个属性。</p>
<p>注意：当前，屏幕兼容模式只能模拟320dp宽度的手持设备屏幕，因此如果android:compatibleWidthLimitDp的值比320大，那么屏幕兼容模式就不被适用。</p>
<p>这个在API Level 13中被引入。</p>
</blockquote>
<h3 id="android-largestWidthLimitDp"><a href="#android-largestWidthLimitDp" class="headerlink" title="android:largestWidthLimitDp"></a>android:largestWidthLimitDp</h3><blockquote>
<p>这个属性允许再设计应用程序时，通过指定最大的“smallest screen width”来强制启用屏幕兼容模式。如果设备有效屏幕的最小边比这个属性值大，应用程序就会运行在屏幕兼容模式中，而用户没有办法禁止这种模式。</p>
<p>如果应用程序跟所有的屏幕尺寸都兼容，并且能够被正确的调整尺寸，就不需使用这个属性。否则首先要考虑使用android:compatibleWidthLimitDp属性。只有在因大屏幕尺寸调整而导致破坏了应用程序的功能的时候，并且使用屏幕兼容模式是唯一的方法的时候，才应该使用这个属性。</p>
<p>注意：当前，屏幕兼容模式只能模拟320dp宽度的手持设备屏幕，因此如果android:compatibleWidthLimitDp的值比320大，那么屏幕兼容模式就不被适用。</p>
<p>这个在API Level 13中被引入。</p>
</blockquote>
<h2 id="supports-gl-texture"><a href="#supports-gl-texture" class="headerlink" title="supports-gl-texture"></a>supports-gl-texture</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>supports-gl-texture</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>这个元素用于声明一个应用程序所支持的GL纹理压缩格式。</p>
<p>一个应用程序支持一种纹理压缩格式，如果应用程序提供了用该格式压缩纹理资源的能力，那么一旦应用程序被安装在设备上，应用程序就能够从.apk文件的内部提供本地的压缩资源，或者在运行时从服务器上下载它们。</p>
<p>每个<code>&lt;supports-gl-texture&gt;</code>元素用android:name属性明确的声明一个所支持的纹理压缩格式。如果应用程序支持多种纹理压缩格式，可以声明多个<code>&lt;supports-gl-texture&gt;</code>元素，例如：</p>
<pre><code>&lt;supports-gl-texture android:name=&quot;GL_OES_compressed_ETC1_RGB8_texture&quot; /&gt;
&lt;supports-gl-texture android:name=&quot;GL_OES_compressed_paletted _texture&quot; /&gt;
</code></pre><p>被声明的<supports-gl-texture>是一种信息，这就意味着应用程序在安装时，系统本身并不检查这个元素，以确保与设备的支持相匹配。但是，其他的服务（如Google Play）或应用程序能够检查你的应用程序的<code>&lt;supports-gl-texture&gt;</code>的声明，把它作为与你的应用程序进行交互和处理的一部分。由于这个原因，在你的应用程序中声明所有支持的纹理压缩格式的能力是至关重要的。</supports-gl-texture></p>
<p>通常，应用程序和设备会使用相同的已知的字符串（如下表所示）来声明它们所支持的纹理压缩格式。下表中的格式字符串会根据需要随着时间来增长，并且因为值是字符串，所有应用程序可根据需要自由的声明其他的格式。</p>
<p>假设应用程序是建立在SDK平台工具r3或更高的版本上，那么基于<code>&lt;supports-gl-texture&gt;</code>元素的过滤对所有的API级别都是有效的。</p>
</blockquote>
<h3 id="android-name-12"><a href="#android-name-12" class="headerlink" title="android:name"></a>android:name</h3><p>这个属性用描述字符串给指定一个由应用程序支持的一个GL纹理压缩格式，通用的描述符的值在下表中被列出。</p>
<table>
<thead>
<tr>
<th>纹理压缩格式描述符</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>GL_OES_compressed_ETC1_RGB8_texture</td>
<td>爱立信纹理压缩。在OpenGL ES2.0中被指定，并且在所有支持OpenGL ES2.0的Android设备上都是有效的。</td>
</tr>
<tr>
<td>GL_OES_compressed_paletted_texture</td>
<td>通用的调试版纹理压缩。</td>
</tr>
<tr>
<td>GL_AMD_compressed_3DC_texture</td>
<td>ATI 3Dc纹理压缩</td>
</tr>
<tr>
<td>GL_AMD_compressed_ATC_texture</td>
<td>ATI纹理压缩。在运行Adreno GPU的设备上有效，包括HTC的Nexus One、Droid Incredible、EVO等。为了最广泛的兼容性，设备也可以声明一个带有GL_ATI_texture_compression_atitc描述符的<code>&lt;supports-gl-texture&gt;</code>元素</td>
</tr>
<tr>
<td>GL_EXT_texture_compression_latc</td>
<td>亮度的透明度纹理压缩。</td>
</tr>
<tr>
<td>GL_EXT_texture_compression_dxt1</td>
<td>S3 DXT1纹理压缩。支持运行Nvidia Tegra2平台的设备，包括Motorala Xoom、Motorola Atrix、Droid Bionic等。</td>
</tr>
<tr>
<td>GL_EXT_texture_compression_s3tc</td>
<td>S3纹理压缩，不特定指DXT变种。在运行Nvidia Tegra2平台的设备上被支持，包括Motorala Xoom、Motorola Atrix、Droid Bionic等。如果应用程序需要一个特定的DXT变种，就要用那个变种的描述符来代替这个描述符。</td>
</tr>
<tr>
<td>GL_EXT_texture_compression_pvrtc</td>
<td>PowerVR纹理压缩。在运行PowerVr SGX530/540 GPU的设备中有效。如Motorola的DRIOID系列，Samsung Galaxy S，Nexus S，和Galaxy Tab等。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Google Play和纹理压缩过滤</p>
<p>Google Play对应用程序的过滤，对用户来说是可见的，以便用户能够看到并只下载那些跟设备兼容的应用程序。它过滤应用程序的方法之一就是通过纹理压缩的兼容性，它会基于GPU的能力来控制应用程序在各种设备上的可用性。</p>
<p>Google Play会通过以下内容的比较，来判断应用程序的纹理压缩与用户设备的兼容性：</p>
<ol>
<li><p>应用程序支持的纹理压缩格式—应用程序会在它的清单文件的<code>&lt;supports-gl-texture&gt;</code>元素中声明它所支持的纹理压缩格式；</p>
</li>
<li><p>设备上GPU所支持的纹理压缩格式—设备会把作为它所支持的只读系统属性来报告。</p>
</li>
</ol>
<p>每次把应用程序发布到Google Play的发布网站上时，Google Play会扫描该应用程序的清单文件，并查看<code>&lt;supports-gl-texture&gt;</code>元素，它从这个元素中提取格式描述符，并把它作为跟应用程序的.apk和版本关联的内部元数据来保存。</p>
<p>如果应用程序所支持的任何一种纹理压缩格式也是设备所支持的，那么Google Play就允许用户看到这个应用程序并可下载它。否则，如果应用程序所支持的格式都不被设备所支持，那么Google Play就会过滤掉这些应用程序，使其不能下载。</p>
<p>如果应用程序没有声明任何<code>&lt;supports-gl-texture&gt;</code>元素，那么Google Play不会使用任何基于纹理压缩格式的过滤。</p>
</blockquote>
<h2 id="uses-sdk"><a href="#uses-sdk" class="headerlink" title="uses-sdk"></a>uses-sdk</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">uses-sdkAndroid:</span></span>
    <span class="token attr-name">minSdkVersion</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> 
    <span class="token attr-name"><span class="token namespace">android:</span>targetSdkVersion</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>maxSdkVersion</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>这个元素用API 的级别（一个整数）来说明应用程序会跟哪些Android平台版本兼容。由应用程序给出的API级别会跟给定不同的设备中的Android系统的API级别比较。</p>
<p>尽管这个元素被用于指定API的级别，但它并不是SDK（软件开发工具包）或Android平台的版本号。API级别始终是用一个整数表示。不能够从根API级别关联的Android版本号中获取API级别信息</p>
</blockquote>
<h3 id="android-minSdkVersion"><a href="#android-minSdkVersion" class="headerlink" title="android:minSdkVersion"></a>android:minSdkVersion</h3><blockquote>
<p>一个整数，它指定了应用程序运行所需要的最小的API级别。如果Android系统的API级别被该应用程序清单中的这个属性值小，那么系统就阻止安装该应用程序，应该始终声明这个属性。</p>
<p>警告：如果没有声明这个属性，Android系统就会假设一个默认值1，它表明该应用程序会跟所有的Android版本兼容。如果应用不是跟所有的Android版本兼容（例如，应用要使用在API Level 3中引入的API），并且也没有声明正确的minSdkVersion属性，那么当应用安装到API Level 3小的系统上时，应用程序会在视图访问无效的API时崩溃。由于这个原因，必须要在minSdkVersion属性中声明适当的API Level。</p>
</blockquote>
<h3 id="android-targetSdkVersiion"><a href="#android-targetSdkVersiion" class="headerlink" title="android:targetSdkVersiion"></a>android:targetSdkVersiion</h3><blockquote>
<p>一个整数，它指定了应用程序要运行的目标的API级别。如果没有设置，它的默认值等于给定的minSdkVersion属性值。</p>
</blockquote>
<h3 id="android-maxSdkVersion"><a href="#android-maxSdkVersion" class="headerlink" title="android:maxSdkVersion"></a>android:maxSdkVersion</h3><blockquote>
<p>一个整数，表明该应用要运行的最大的API Level。</p>
</blockquote>
<h2 id="uses-configuration"><a href="#uses-configuration" class="headerlink" title="uses-configuration"></a>uses-configuration</h2><pre class=" language-xnl"><code class="language-xnl"><uses-configuration
    android:reqFiveWayNav=["true" | "false"] 
    android:reqHardKeyboard=["true" | "false"]
    android:reqKeyboardType=["undefined" | "nokeys" | "qwerty" | "twelvekey"]
    android:reqNavigation=["undefined" | "nonav" | "dpad" | "trackball" | "wheel"]
    android:reqTouchScreen=["undefined" | "notouch" | "stylus" | "finger"] />
</code></pre>
<blockquote>
<p>这个属性用于指定该应用程序所需要的硬件和软件功能。例如，应用程序可以用这个元素指定它所需要的物理键盘或特殊的导航设备，如轨迹球。使用这个规范可以避免把应用程序安装在那些不支持其不能工作的设备上。</p>
<p>如果应用程序能够用不同的设备配置来工作，那么它就应该给每个配置包含一个独立的<uses-configuration>声明。每个声明必须被完成。例如，应用程序需要一个五向导航控制，就要需要一个支持手指操作的触屏，以及一个标准的QWERTY键盘或12键的数字键盘，因此要用两个<uses-configuration>元素来指定这些需求：</uses-configuration></uses-configuration></p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-configuration</span>
    <span class="token attr-name"><span class="token namespace">android:</span>reqFiveWayNav</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>reqTouchScreen</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>finger<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>reqKeyboardType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qwerty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-configuration</span>
    <span class="token attr-name"><span class="token namespace">android:</span>reqFiveWayNav</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>reqTouchScreen</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>finger<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>reqKeyboardType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twelvekey<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<h3 id="android-reqFiveWayNav"><a href="#android-reqFiveWayNav" class="headerlink" title="android:reqFiveWayNav"></a>android:reqFiveWayNav</h3><blockquote>
<p>这个属性用于指定应用程序是否需要五向导航控制，如果设置为true，则需要，否则不需要。五向控制是指能够上、下、左、右移动所选择的对象，并提供调用当前选择对象的方法。它可以是一个D-pad(方向板)、轨迹球等。</p>
<p>如果应用程序需要一个方向控制，但不是一种特殊类型的控制，就可以把这个属性设置为true，并且忽略reqNavigation属性。但是，如果应用程序需要一种特殊的方向控制类型，那么就可以忽略这个属性，并用reqNavigation属性的设置来代替。</p>
</blockquote>
<h3 id="android-reqHardKeyboard"><a href="#android-reqHardKeyboard" class="headerlink" title="android:reqHardKeyboard"></a>android:reqHardKeyboard</h3><blockquote>
<p>这个属性用于指定应用程序是否需要硬键盘，如果设置为true，则需要，否则不需要。</p>
</blockquote>
<h3 id="android-reqKeyboardType"><a href="#android-reqKeyboardType" class="headerlink" title="android:reqKeyboardType"></a>android:reqKeyboardType</h3><blockquote>
<p>这个属性用于指定该应用程序需要的任何键盘的类型。这个属性不区分软/硬键盘。如果需要某种类型的硬键盘，就用这个属性来指定类型，并把reqHardKeyboard属性设置为true。</p>
<p>它的属性值必须是下表中值之一：</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>应用程序不需要键盘。（键盘的需求没有被定义。）这是默认值。</td>
</tr>
<tr>
<td>nokeys</td>
<td>应用程序不需要键盘，明确定义该应用不需要键盘</td>
</tr>
<tr>
<td>qwerty</td>
<td>应用程序需要一个标准的QWERTY键盘。</td>
</tr>
<tr>
<td>twelvekey</td>
<td>应用程序需要一个像大多电话那样的12键的数字键盘，键盘中包括0~9的数字和“*”号键、“#”号键。</td>
</tr>
</tbody>
</table>
<h3 id="android-reqNavigation"><a href="#android-reqNavigation" class="headerlink" title="android:reqNavigation"></a>android:reqNavigation</h3><blockquote>
<p>这个属性定义了应用程序所需要的任何导航设备，属性值必须是下表中的值之一：</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>应用程序不需要任何类型的导航控制。（应用程序的导航需求没有被定义。）这是默认值。</td>
</tr>
<tr>
<td>nonav</td>
<td>应用程序不需要到导航控制。</td>
</tr>
<tr>
<td>dpad</td>
<td>应用程序要求使用D-pad(方向板)来进行导航控制</td>
</tr>
<tr>
<td>trackball</td>
<td>应用程序要求使用轨迹球来进行导航控制</td>
</tr>
<tr>
<td>wheel</td>
<td>应用程序要求使用一个导航滚轮来进行导航控制。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>如果应用程序要求一个导航控制，但并不关心具体的控制类型，那么就要把reqFiveWayNav属性设置为true，而不是只设置这一个属性。</p>
</blockquote>
<h3 id="android-reqTouchScreen"><a href="#android-reqTouchScreen" class="headerlink" title="android:reqTouchScreen"></a>android:reqTouchScreen</h3><blockquote>
<p>这个属性用于设置应用程序所需要的任何触屏类型。属性值必须是下表中的字符串之一：</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>应用程序不需要触屏。（触屏的需求不被定义。）这是默认值。</td>
</tr>
<tr>
<td>notouch</td>
<td>应用程序不需要触屏</td>
</tr>
<tr>
<td>stylus</td>
<td>应用程序需要带有触控笔操作的触屏。</td>
</tr>
<tr>
<td>finger</td>
<td>应用程序需要能够用一个手指进行操作的触屏。</td>
</tr>
</tbody>
</table>
<h2 id="uses-feature"><a href="#uses-feature" class="headerlink" title="uses-feature"></a>uses-feature</h2><pre class=" language-xml"><code class="language-xml">&lt;uses-feature
    android:name="string"
    android:required=["true" | "false"]
    android:glEsVersion="integer"/>
</code></pre>
<blockquote>
<p>这个元素用于声明一个单独的被应用程序使用的硬件或软件功能。</p>
<p><code>&lt;uses-feature&gt;</code>声明的目的是通知其他外部实体，该应用程序所依赖的硬件和软件功能。这个元素提供的required属性会让你指定应用程序在所需的功能不存在时，应用程序是否能够正常运行。因为功能能够所支持的Android设备不同，所以<code>&lt;uses-feature&gt;</code>元素被用于描述应用程序所依赖的、重要的、可用的设备功能。</p>
<p>应用程序所声明的一组可用功能对应着一组由Android的PackageManager类定义的可用的功能常量，为了方便，这些常量会在《Google Play和基于功能的过滤》的“功能参考”表中被列出。</p>
<p>如果应用程序需要多个功能，就要分别使用<code>&lt;uses-feature&gt;</code>元素来指定所需的每一个功能，例如：需要设备中带有蓝牙和camera功能的应用程序，要声明两个<code>&lt;uses-feature&gt;</code>元素：</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-feature</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.hardware.bluetooth<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-feature</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.hardware.camera<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>通常应该确保使用<code>&lt;uses-feature&gt;</code>元素来声明应用程序所需的所有功能。</p>
<p>被声明的<code>&lt;uses-feature&gt;</code>元素只是信息化的，这意味着Android系统本身在安装应用程序之前，不会检查设备上所支持的功能的匹配性。但是其他的服务（如Google Play）或应用程序可以检查该应用程序的<code>&lt;uses-feature&gt;</code>声明，把它作为与该应用程序交互的一部分。由于这个原因，声明应用程序要使用的所有的外部功能是至关重要的。</p>
<p>对于某些功能，有可能存在一个特定的属性，以便定义功能的版本，如被使用的Open GL的版本（用glEsVersion来声明）。而有些功能则不需要指定版本属性，如照相机，就只使用name属性来声明。</p>
<p>尽管<code>&lt;uses-feature&gt;</code>元素只在运行API Level 4或更高的版本上才有效，但是还是推荐在所有的应用程序中包含这个元素，即使minSdkVersion的值是3或更低的版本，那么这些运行旧的平台版本的设备会简单忽略掉这个元素。</p>
<p>注意：在声明一个功能时，要记住必须申请相应的权限。例如，在应用程序能够访问Camera的API之前，必须申请CAMERA权限。申请权限是让应用程序能够访问相应的软/硬件，而声明应用程序所使用的功能是为了确保正确的设备兼容性。</p>
</blockquote>
<h3 id="android-name-13"><a href="#android-name-13" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用描述性的字符串，指定该应用程序所使用的软/硬件功能。有效描述符在《Google Play和基于功能的过滤》的“硬件功能”和“软件功能”表中被列出。</p>
</blockquote>
<h3 id="android-required-1"><a href="#android-required-1" class="headerlink" title="android:required"></a>android:required</h3><blockquote>
<p>这个属性用一个布尔值来指定应用程序是否需要在android:name属性中所指定的功能。</p>
<p>true：在设备上不存在指定的功能时，则该应用不能够正常运行。</p>
<p>false：如果设备上存在指定的功能，则应用程序会倾向使用这个功能，但是如果需要，也可设计成没被指定的功能也能够正常运行。</p>
<p>如果没有声明，这个属性的默认值是true。</p>
</blockquote>
<h3 id="android-glEsVersion"><a href="#android-glEsVersion" class="headerlink" title="android:glEsVersion"></a>android:glEsVersion</h3><blockquote>
<p>这个属性用于声明应用程序所需要的OpenGL ES的版本。它的高16位代表主版本号，低16位代表次要版本号，如：要是指定OpenGL ES的版本号是2.0，那么就要设置为0x00020000。要指定的OpenGL ES的版本号是2.1，就要设置为0x00020001。</p>
<p>应用程序在它的清单中应该最多只能指定一个android:glEsVersion属性，如果指定了多个，那么只会使用版本最高的那个android:glEsVersion属性，而其他的将会被忽略。</p>
<p>如果应用程序没有指定一个android:glEsVersion属性，那么就假定应用程序仅需要OpenGL ES1.0，它是在所有的Android设备上都支持的版本。</p>
<p>应用程序能够假设，如果一个平台支持设定的OpenGL ES版本，那么它还会支持所有被设定版本低的OpenGL ES版本，因此，需要OpenGL ES1.0和OpenGL ES2.0的应用程序，必须要指定它所需要的版本时OpenGL ES2.0。</p>
<p>能够用任何版本的OpenGL ES来工作的应用程序，应该仅指定应用所需的最低版本的OpenGL ES。（应用程序能够在运行时检查较高版本的OpenGL ES是否可用。）</p>
</blockquote>
<h2 id="uses-permission"><a href="#uses-permission" class="headerlink" title="uses-permission"></a>uses-permission</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> 
    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>maxSdkVersion</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</code></pre>
<blockquote>
<p>这个属性用于给应用程序授予正确的操作的所必须的权限。这些权限是在应用程序安装时被授予的，而不是在运行时授予的。</p>
<p>有关更多的权限信息，请看《AndroidManifest.xml文件详解（三）》文档中“权限”介绍<code>http://blog.csdn.net/fireofstar/article/details/7543067</code>和《Android的安全性和权限》<code>http://blog.csdn.net/fireofstar/article/details/7536803</code>。在android.Manifest.permission类中能够找到由基础平台定义的一个权限列表<code>http://developer.android.com/reference/android/Manifest.permission.html</code>。</p>
</blockquote>
<h3 id="android-name-14"><a href="#android-name-14" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用于定义权限的名称。它能够是由该应用程序用<permission>元素定义的一个权限，也可以是由另外一个应用程序所定义的权限，还可以是有系统定义的标准的权限，如：android:permission.CAMERA或android:permission.READ_CONTACTS等。就像例子中所显示的那样，权限名通常要用包名做为前缀，以保证其唯一性。</permission></p>
</blockquote>
<h3 id="android-maxSdkVersion-1"><a href="#android-maxSdkVersion-1" class="headerlink" title="android:maxSdkVersion"></a>android:maxSdkVersion</h3><blockquote>
<p>允许安装的最大API版本的系统，如果超出最大允许范围，则应用不授予许可，不可使用相关功能</p>
</blockquote>
<h2 id="uses-permission-sdk-23"><a href="#uses-permission-sdk-23" class="headerlink" title="uses-permission-sdk-23"></a>uses-permission-sdk-23</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission-sdk-23</span> 
    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>maxSdkVersion</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</code></pre>
<p>这个属性用于给应用程序授予正确的操作的所必须的权限,但只在API23及其以上有效</p>
<h3 id="android-name-15"><a href="#android-name-15" class="headerlink" title="android:name"></a>android:name</h3><blockquote>
<p>这个属性用于定义权限的名称。它能够是由该应用程序用<permission>元素定义的一个权限，也可以是由另外一个应用程序所定义的权限，还可以是有系统定义的标准的权限</permission></p>
</blockquote>
<h3 id="android-maxSdkVersion-2"><a href="#android-maxSdkVersion-2" class="headerlink" title="android:maxSdkVersion"></a>android:maxSdkVersion</h3><blockquote>
<p>允许安装的最大API版本的系统，如果超出最大允许范围，则应用不授予许可，不可使用相关功能</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/FireOfStar/article/category/511259" target="_blank" rel="external">FireOfStar的专栏</a><br><a href="https://developer.android.com/guide/topics/manifest" target="_blank" rel="external">谷歌官方API文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;AndroidManifest-xml结构&quot;&gt;&lt;a href=&quot;#AndroidManifest-xml结构&quot; class=&quot;headerlink&quot; title=&quot;AndroidManifest.xml结构&quot;&gt;&lt;/a&gt;Andro
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Intent中关于Activity的Flag</title>
    <link href="https://luoweiguang.github.io/2016/07/12/Intent%E4%B8%AD%E5%85%B3%E4%BA%8EActivity%E7%9A%84Flag/"/>
    <id>https://luoweiguang.github.io/2016/07/12/Intent中关于Activity的Flag/</id>
    <published>2016-07-12T14:00:00.000Z</published>
    <updated>2017-11-15T05:54:09.907Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="launchMode启动时默认的Flag"><a href="#launchMode启动时默认的Flag" class="headerlink" title="launchMode启动时默认的Flag"></a>launchMode启动时默认的Flag</h2><ul>
<li>standard 为0，即无Flag</li>
<li>singleTop 为0，即无Flag</li>
<li>singleTask 为0x10000000，即FLAG_ACTIVITY_NEW_TASK</li>
<li>singleInstance 为0x10000000，即FLAG_ACTIVITY_NEW_TASK</li>
</ul>
<h2 id="Flag详解"><a href="#Flag详解" class="headerlink" title="Flag详解"></a>Flag详解</h2><h3 id="FLAG-ACTIVITY-BROUGHT-TO-FRONT"><a href="#FLAG-ACTIVITY-BROUGHT-TO-FRONT" class="headerlink" title="FLAG_ACTIVITY_BROUGHT_TO_FRONT"></a>FLAG_ACTIVITY_BROUGHT_TO_FRONT</h3><p>默认标志</p>
<blockquote>
<p>This flag is not normally set by application code, but set for you by the system as described in the launchMode documentation for the singleTask mode.</p>
<p>通常在应用代码中不需要设置这个FLAG，当launchMode为singleTask时系统会默认设置这个标志。</p>
</blockquote>
<p>然而在实际的测试中<strong>并没有测试出</strong>，而是在另外两种方式设置了此标志<br>位</p>
<ol>
<li>当从launchMode为singleInstance的Activity跳转到standard、singleTop和singleTask的</li>
<li>当安装或更新一个app后有两个选项，一个为完成一个为打开，点击打开，不管跳多少个Activity,按Home键再从点击桌面图标进入，都会加载一个新的启动的Activity,而不是刚刚执行的，此时的Activity也设有此标志</li>
</ol>
<p>解决此问题的方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_BROUGHT_TO_FRONT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="FLAG-ACTIVITY-CLEAR-TASK"><a href="#FLAG-ACTIVITY-CLEAR-TASK" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TASK"></a>FLAG_ACTIVITY_CLEAR_TASK</h3><p>清空任务标志</p>
<blockquote>
<p>If set in an Intent passed to Context.startActivity(), this flag will cause any existing task that would be associated with the activity to be cleared before the activity is started. That is, the activity becomes the new root of an otherwise empty task, and any old activities are finished. This can only be used in conjunction with FLAG_ACTIVITY_NEW_TASK.</p>
<p>如果Intent中设置了这个标志，会导致含有待启动Activity的Task在Activity被启动前清空。也就是说，这个Activity会成为一个新的root，并且所有旧的activity都被finish掉。这个标志只能与FLAG_ACTIVITY_NEW_TASK 一起使用。 </p>
</blockquote>
<p>standard与singleTop设置此Flag的同时还要设置FLAG_ACTIVITY_NEW_TASK才有效，而singleTask启动时默认会有FLAG_ACTIVITY_NEW_TASK，所以只要添加此Flag即可，而singleInstance因为新建了个Task，所以设置不设置效果一样</p>
<h3 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h3><p>清空任务中在其之上的Activity</p>
<blockquote>
<p>If set, and the activity being launched is already running in the current task, then instead of launching a new instance of that activity, all of the other activities on top of it will be closed and this Intent will be delivered to the (now on top) old activity as a new Intent.</p>
<p>For example, consider a task consisting of the activities: A, B, C, D. If D calls startActivity() with an Intent that resolves to the component of activity B, then C and D will be finished and B receive the given Intent, resulting in the stack now being: A, B.</p>
<p>The currently running instance of activity B in the above example will either receive the new intent you are starting here in its onNewIntent() method, or be itself finished and restarted with the new intent. If it has declared its launch mode to be “multiple” (the default) and you have not set FLAG_ACTIVITY_SINGLE_TOP in the same intent, then it will be finished and re-created; for all other launch modes or if FLAG_ACTIVITY_SINGLE_TOP is set then this Intent will be delivered to the current instance’s onNewIntent().</p>
<p>This launch mode can also be used to good effect in conjunction with FLAG_ACTIVITY_NEW_TASK: if used to start the root activity of a task, it will bring any currently running instance of that task to the foreground, and then clear it to its root state. This is especially useful, for example, when launching an activity from the notification manager.</p>
<p>See Tasks and Back Stack for more information about tasks.</p>
<p>如果设置了这个标志，并且待启动的Activity已经存在于当前的task中，那就不会再给这个activity新起一个实例，而是将task中在它之上的其它activity全部关闭，然后把Intent作为一个新的Intent传给这个Activity（当前已在栈顶）。</p>
<p>例如，一个task中存在A,B,C,D四个Activity。如果D调用startActivity() 启动B，那么C和D会被finish掉并且B收到这个Intent，最后栈中只有A，B。</p>
<p>上面例子中运行的B activity既可以在onNewIntent()中接收新的Intent，也可以将自己finish掉然后使用新的Intent重启。如果在它的launch mode中设置了”multiple”（默认），并且intent中没有设置 FLAG_ACTIVITY_SINGLE_TOP 标志，那它就会被finish掉然后重新创建。如果是其它的launchMode或者是设置了FLAG_ACTIVITY_SINGLE_TOP 属性，那就会使用现有的实例的OnNewIntent()方法来接受Intent。</p>
<p>这种启动模式也可以与 FLAG_ACTIVITY_NEW_TASK 一起使用：如果用来启动一个任务的root activity，它会将这个任务中现在运行的实例调到前台，然后将任务清空至只有根Activity的状态。这很有用，例如要从通知中心里启动一个Activity时。</p>
</blockquote>
<p>总结：</p>
<ol>
<li>如果launchMode为standard，且为设置FLAG_ACTIVITY_SINGLE_TOP,则使用此标记打开Activity时，假如栈内已存在此Activity,那么会将栈中此Activity之上包括本身全部销毁，并创建此Activity,如果设置FLAG_ACTIVITY_SINGLE_TOP则与launchMode为singleTop相同</li>
<li>如果launchMode为singleTop，则使用此标记打开Activity时，假如栈内已存在此Activity,那么会将栈中此Activity之上（但不包括本身）全部销毁，调用onNewIntent()，并恢复此Activity</li>
<li>如果launchMode为singleTask,则无影响，因为 singleTask本身就是以此方式进行处理</li>
<li>如果launchMode为singleInstance，无影响</li>
</ol>
<h3 id="FLAG-ACTIVITY-CLEAR-WHEN-TASK-RESET-已废弃"><a href="#FLAG-ACTIVITY-CLEAR-WHEN-TASK-RESET-已废弃" class="headerlink" title="FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET(已废弃)"></a>FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET(已废弃)</h3><p>任务重置时将任务中在此标记之后的Activity清空</p>
<blockquote>
<p>If set, this marks a point in the task’s activity stack that should be cleared when the task is reset. That is, the next time the task is brought to the foreground with FLAG_ACTIVITY_RESET_TASK_IF_NEEDED (typically as a result of the user re-launching it from home), this activity and all on top of it will be finished so that the user does not return to them, but instead returns to whatever activity preceeded it.</p>
<p>This is useful for cases where you have a logical break in your application. For example, an e-mail application may have a command to view an attachment, which launches an image view activity to display it. This activity should be part of the e-mail application’s task, since it is a part of the task the user is involved in. However, if the user leaves that task, and later selects the e-mail app from home, we may like them to return to the conversation they were viewing, not the picture attachment, since that is confusing. By setting this flag when launching the image viewer, that viewer and any activities it starts will be removed the next time the user returns to mail.</p>
<p>设置这个标志意味着在activity栈中做一个标记，在Task重置的时候栈就把从标记往上的activity都清除。也就是说，下次这个Task被通过FLAG_ACTIVITY_RESET_TASK_IF_NEEDED调到前台时（通常是由于用户从桌面重新启动），这个activity和它之上的activity都会被finish掉，这样用户就不会再回到他们，而是直接回到在它们之前的activity。</p>
<p>这在应用切换时非常有用。比如，Email应用会需要查看附件，就要调用查看图片的Activity来显示，那这个查看图片的Activity就会成为Email应用任务里的一部分。但是，如果用户离开了Email的任务，过了一会儿由通过Home来选择Email应用，我们会希望它回到查看邮件会话的页面，而不是浏览图片附件的页面，不然就感觉太诡异了。如果在启动查看图片Activity时设置了这个标志，那这个Activity及由它启动的Activity在下一次用户返回邮件时都会被清除。</p>
<p>已经废弃，请使用FLAG_ACTIVITY_NEW_DOCUMENT </p>
</blockquote>
<p>当LaunchMode为standard或singleTop此标记在5.0之前与5.0之后有很大差别</p>
<ul>
<li>5.0之后使用此标志后，会新建一个task,并且后续的Activity都会在此task中，而在overview screen中（总览画面或者叫最近画面，最近任务表）中可以看到有两个</li>
<li>5.0之前都在一个task中</li>
</ul>
<p>此标记对singleTask无效</p>
<p>此标记对于singleInstance有效，但5.0后在overview screen中不会产生两个</p>
<h3 id="FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</h3><p>不显示在近期任务中</p>
<blockquote>
<p>If set, the new activity is not kept in the list of recently launched activities.</p>
<p>如果设置这个标志，这个Activity就不会在近期任务中显示。<br>等同于android:excludeFromRecents=”true”<br>但似乎没效果？</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-FORWARD-RESULT"><a href="#FLAG-ACTIVITY-FORWARD-RESULT" class="headerlink" title="FLAG_ACTIVITY_FORWARD_RESULT"></a>FLAG_ACTIVITY_FORWARD_RESULT</h3><p>转发结果</p>
<blockquote>
<p>If set and this intent is being used to launch a new activity from an existing one, then the reply target of the existing activity will be transfered to the new activity. This way the new activity can call setResult(int) and have that result sent back to the reply target of the original activity.</p>
<p>如果Activity A 在启动 Activity B时设置了这个标志，那A的答复目标目标会传递给B，这样一来B就可以通过调用setResult(int) 将返回结果返回给A的答复目标。</p>
<p>简单如下：</p>
<p>O —-startActivityForResult()—-&gt; A —-FLAG_ACTIVITY_FORWARD_RESULT—-&gt; B</p>
<p>A的答复目标是O，如果A在启动B时使用了这个标志，A就会把答复目标O的信息传递给B，以便B将O作为它的答复目标。此时B调用setResult()时的结果信息都会传递给O，而不会给A。并且此时在A中调用setResult()的内容不会生效。我还没发现使A中setResult()生效的方法。</p>
<p>注意：这个标志不能与startActivityForResult()一起使用。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-LAUNCHED-FROM-HISTORY"><a href="#FLAG-ACTIVITY-LAUNCHED-FROM-HISTORY" class="headerlink" title="FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY"></a>FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY</h3><p>从近期任务中启动的标志</p>
<blockquote>
<p>This flag is not normally set by application code, but set for you by the system if this activity is being launched from history (longpress home key).</p>
<p>这个标志通常情况下不会通过应用的代码来设置，而是在通过最近任务启动activity时由系统设置的。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-MULTIPLE-TASK"><a href="#FLAG-ACTIVITY-MULTIPLE-TASK" class="headerlink" title="FLAG_ACTIVITY_MULTIPLE_TASK"></a>FLAG_ACTIVITY_MULTIPLE_TASK</h3><p>Activity可在多任务运行的标志</p>
<blockquote>
<p>Do not use this flag unless you are implementing your own top-level application launcher. Used in conjunction with FLAG_ACTIVITY_NEW_TASK to disable the behavior of bringing an existing task to the foreground. When set, a new task is always started to host the Activity for the Intent, regardless of whether there is already an existing task running the same thing.</p>
<p>Because the default system does not include graphical task management, you should not use this flag unless you provide some way for a user to return back to the tasks you have launched.</p>
<p>This flag is ignored if FLAG_ACTIVITY_NEW_TASK is not set.</p>
<p>See Tasks and Back Stack for more information about tasks.</p>
<p>除非你实现了自己的顶级应用启动器，否则不要使用这个标志。与 FLAG_ACTIVITY_NEW_TASK 一起使用可以不再把已存在的任务唤起到前台。 当被设置时，系统总会为Intent的Activity启动一个新的task，而不管是否已经有已存在的任务在做同样的事情。</p>
<p>因为默认系统不包含图形化的任务管理功能，所以除非你给用户提供了返回到已启动任务的方法，否则就不要用这个标志。</p>
<p>如果FLAG_ACTIVITY_NEW_TASK没有设置，则这个标志也被忽略。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-NEW-DOCUMENT"><a href="#FLAG-ACTIVITY-NEW-DOCUMENT" class="headerlink" title="FLAG_ACTIVITY_NEW_DOCUMENT"></a>FLAG_ACTIVITY_NEW_DOCUMENT</h3><blockquote>
<p>api 21之后加入的一个标识，用来在intent启动的activity的task栈中打开一个document，和documentLaunchMode效果相等，有着不同的documents的activity的多个实例，将会出现在最近的task列表中。单独使用效果和documentLaunchMode=”intoExisting”一样，如果和FLAG_ACTIVITY_MULTIPLE_TASK一起使用效果就等同于documentLaunchMode=”always”</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-NEW-TASK"><a href="#FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="FLAG_ACTIVITY_NEW_TASK"></a>FLAG_ACTIVITY_NEW_TASK</h3><p>尝试在新任务中启动Activity的标志（并不一定就会在新的任务中）</p>
<blockquote>
<p>If set, this activity will become the start of a new task on this history stack. A task (from the activity that started it to the next task activity) defines an atomic group of activities that the user can move to. Tasks can be moved to the foreground and background; all of the activities inside of a particular task always remain in the same order. See Tasks and Back Stack for more information about tasks.</p>
<p>This flag is generally used by activities that want to present a “launcher” style behavior: they give the user a list of separate things that can be done, which otherwise run completely independently of the activity launching them.</p>
<p>When using this flag, if a task is already running for the activity you are now starting, then a new activity will not be started; instead, the current task will simply be brought to the front of the screen with the state it was last in. See FLAG_ACTIVITY_MULTIPLE_TASK for a flag to disable this behavior.</p>
<p>This flag can not be used when the caller is requesting a result from the activity being launched.</p>
<p>设置这个标志可以为待启动的Activity创建一个新的任务。一个任务（从启动它的Activity到任务中的下一个Activity）就是用户可以跳转到的Activity的原子群。任务可以在前台与后台之间切换；在某一特定任务之中的所有Activity一直会保持同样的顺序。</p>
<p>这个标志通常被用来呈现一种”laucher”类型的行为：为用户提供一个可单独解决的事情列表，完全独立于启动他们的Activity之外运行。</p>
<p>使用这个标志时，如果有一个任务已经运行了你要启动的Activity，那就不会在创建新的Activity，而是将现有的任务保持之前的状态直接唤到前台。参见FLAG_ACTIVITY_MULTIPLE_TASK这个标志，可以禁用掉这个行为。</p>
<p>这个标志不能在调用者向待启动Activity请求返回结果时使用。</p>
<p>注意：假设A启动B，如果要让B在新的task中创建，要求这两个Activity的taskAffinity不同。也就是说，设置了这个标志后，新启动的activity并非就一定在新的task中创建，如果A和B在属于同一个package，而且都是使用默认的taskAffinity，那B还是会在A的task中被创建。 所以，只有A和B的taskAffinity不同时，设置了这个标志才会使B被创建到新的task。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-NO-ANIMATION"><a href="#FLAG-ACTIVITY-NO-ANIMATION" class="headerlink" title="FLAG_ACTIVITY_NO_ANIMATION"></a>FLAG_ACTIVITY_NO_ANIMATION</h3><p>禁用切换动画</p>
<blockquote>
<p>If set in an Intent passed to Context.startActivity(), this flag will prevent the system from applying an activity transition animation to go to the next activity state. This doesn’t mean an animation will never run – if another activity change happens that doesn’t specify this flag before the activity started here is displayed, then that transition will be used. This flag can be put to good use when you are going to do a series of activity operations but the animation seen by the user shouldn’t be driven by the first activity change but rather a later one.</p>
<p>禁用掉系统默认的Activity切换动画。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-NO-HISTORY"><a href="#FLAG-ACTIVITY-NO-HISTORY" class="headerlink" title="FLAG_ACTIVITY_NO_HISTORY"></a>FLAG_ACTIVITY_NO_HISTORY</h3><p>不保存Activity的历史状态</p>
<blockquote>
<p>If set, the new activity is not kept in the history stack. As soon as the user navigates away from it, the activity is finished. This may also be set with the noHistory attribute.</p>
<p>如果设置这个标志，新的Activity就不会在历史栈中保存。用户一旦离开，这个Activity就会finish掉。也可以使用noHistory属性设置。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-NO-USER-ACTION"><a href="#FLAG-ACTIVITY-NO-USER-ACTION" class="headerlink" title="FLAG_ACTIVITY_NO_USER_ACTION"></a>FLAG_ACTIVITY_NO_USER_ACTION</h3><blockquote>
<p>不响应onUserLeaveHint方法</p>
<p>If set, this flag will prevent the normal onUserLeaveHint() callback from occurring on the current frontmost activity before it is paused as the newly-started activity is brought to the front.</p>
<p>Typically, an activity can rely on that callback to indicate that an explicit user action has caused their activity to be moved out of the foreground. The callback marks an appropriate point in the activity’s lifecycle for it to dismiss any notifications that it intends to display “until the user has seen them,” such as a blinking LED.</p>
<p>If an activity is ever started via any non-user-driven events such as phone-call receipt or an alarm handler, this flag should be passed to Context.startActivity, ensuring that the pausing activity does not think the user has acknowledged its notification.</p>
<p>如果设置了这个标志，可以在避免用户离开当前Activity时回调到 onUserLeaveHint(). 通常，Activity可以通过这个回调表明有明确的用户行为将当前activity切出前台。 这个回调标记了activity生命周期中的一个恰当的点，可以用来“在用户看过通知之后”将它们清除，如闪烁LED灯。</p>
<p>如果Activity是由非用户驱动的事件（如电话呼入或闹钟响铃）启动的，那这个标志就应该被传入Context.startActivity，以确保被打断的activity不会认为用户已经看过了通知。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-PREVIOUS-IS-TOP"><a href="#FLAG-ACTIVITY-PREVIOUS-IS-TOP" class="headerlink" title="FLAG_ACTIVITY_PREVIOUS_IS_TOP"></a>FLAG_ACTIVITY_PREVIOUS_IS_TOP</h3><blockquote>
<p>If set and this intent is being used to launch a new activity from an existing one, the current activity will not be counted as the top activity for deciding whether the new intent should be delivered to the top instead of starting a new one. The previous activity will be used as the top, with the assumption being that the current activity will finish itself immediately.</p>
<p>如果启动Activity时设置了这个标志，那当前这个 Activity 不会被当作顶部的 Activity 来判断是否之后新Intent应该被传给栈顶Activity而不是启动一个新的Activity。之前一个的Activity会被当作栈顶，假定当前的Acitvity会立即自己finish掉。</p>
<p>即 A—&gt; B —&gt;C，若B启动C时用了这个标志位，那在启动时B并不会被当作栈顶的Activity，而是用A做栈顶来启动C。此过程中B充当一个跳转页面。</p>
<p>典型的场景是在应用选择页面，如果在文本中点击一个网址要跳转到浏览器，而系统中又装了不止一个浏览器应用，此时会弹出应用选择页面。在应用选择页面选择某一款浏览器启动时，就会用到这个Flag。然后应用选择页面将自己finish，以保证从浏览器返回时不会在回到选择页面。</p>
<p>经常与FLAG_ACTIVITY_FORWARD_RESULT 一起使用。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-REORDER-TO-FRONT"><a href="#FLAG-ACTIVITY-REORDER-TO-FRONT" class="headerlink" title="FLAG_ACTIVITY_REORDER_TO_FRONT"></a>FLAG_ACTIVITY_REORDER_TO_FRONT</h3><p>任务中的Activity顺序重排</p>
<blockquote>
<p>If set in an Intent passed to Context.startActivity(), this flag will cause the launched activity to be brought to the front of its task’s history stack if it is already running.</p>
<p>For example, consider a task consisting of four activities: A, B, C, D. If D calls startActivity() with an Intent that resolves to the component of activity B, then B will be brought to the front of the history stack, with this resulting order: A, C, D, B. This flag will be ignored if FLAG_ACTIVITY_CLEAR_TOP is also specified.</p>
<p>如果设置了这个标志，而且被启动的Activity如果已经在运行，那这个Activity会被调到栈顶。</p>
<p>比如，一个任务中有4个Activity：A，B，C，D。如果D调用了startActivity() 来启动B时使用了这个标志，那B就会被调到历史栈的栈顶，结果顺序：A，C，D，B，否则顺序会是：A，B，C，D，B。 如果使用了标志 FLAG_ACTIVITY_CLEAR_TOP，那这个FLAG_ACTIVITY_REORDER_TO_FRONT标志会被忽略。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-RESET-TASK-IF-NEEDED"><a href="#FLAG-ACTIVITY-RESET-TASK-IF-NEEDED" class="headerlink" title="FLAG_ACTIVITY_RESET_TASK_IF_NEEDED"></a>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED</h3><blockquote>
<p>If set, and this activity is either being started in a new task or bringing to the top an existing task, then it will be launched as the front door of the task. This will result in the application of any affinities needed to have that task in the proper state (either moving activities to or from it), or simply resetting that task to its initial state if needed.</p>
<p>这个标记在以下情况下会生效：1.启动Activity时创建新的task来放置Activity实例；2.已存在的task被放置于前台。系统会根据affinity对指定的task进行重置操作，task会压入某些Activity实例或移除某些Activity实例，</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-RETAIN-IN-RECENTS"><a href="#FLAG-ACTIVITY-RETAIN-IN-RECENTS" class="headerlink" title="FLAG_ACTIVITY_RETAIN_IN_RECENTS"></a>FLAG_ACTIVITY_RETAIN_IN_RECENTS</h3><blockquote>
<p>pi21加入。<br>默认情况下通过FLAG_ACTIVITY_NEW_DOCUMENT启动的activity在关闭之后，task中的记录会相对应的删除。如果为了能够重新启动这个activity你想保留它，就可以使用者个flag，最近的记录将会保留在接口中以便用户去重新启动。接受该flag的activity可以使用autoRemoveFromRecents去复写这个request或者调用Activity.finishAndRemoveTask()方法。 </p>
</blockquote>
<h3 id="FLAG-ACTIVITY-SINGLE-TOP"><a href="#FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP"></a>FLAG_ACTIVITY_SINGLE_TOP</h3><blockquote>
<p>If set, the activity will not be launched if it is already running at the top of the history stack.</p>
<p>设置这个标志之后，如果被启动的Activity已经在栈顶，那它就不会被再次启动。</p>
</blockquote>
<h3 id="FLAG-ACTIVITY-TASK-ON-HOME"><a href="#FLAG-ACTIVITY-TASK-ON-HOME" class="headerlink" title="FLAG_ACTIVITY_TASK_ON_HOME"></a>FLAG_ACTIVITY_TASK_ON_HOME</h3><p>直接返回桌面</p>
<blockquote>
<p>If set in an Intent passed to Context.startActivity(), this flag will cause a newly launching task to be placed on top of the current home activity task (if there is one). That is, pressing back from the task will always return the user to home even if that was not the last activity they saw. This can only be used in conjunction with FLAG_ACTIVITY_NEW_TASK.</p>
<p>这个标志可以将一个新启动的任务置于当前的home任务(home activity task)之上（如果有的话）。也就是说，在任务中按back键总是会回到home界面，而不是回到他们之前看到的activity。这个标志只能与FLAG_ACTIVITY_NEW_TASK标志一起用。</p>
<p>比如，A-&gt;B-&gt;C-&gt;D，如果在C启动D的时候设置了这个标志，那在D中按Back键则是直接回到桌面，而不是C。</p>
<p>注意：</p>
<p>只有D是在新的task中被创建时（也就是D的launchMode是singleInstance时，或者是给D指定了与C不同的taskAffinity并且加了FLAG_ACTIVITY_NEW_TASK标志时），使用 FLAG_ACTIVITY_TASK_ON_HOME标志才会生效。</p>
<p>感觉实际使用效果和用 FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK 的效果一样。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/javensun/article/details/8700265" target="_blank" rel="external">Android开发——Intent中的各种FLAG</a><br><a href="http://blog.csdn.net/self_study/article/details/48055011" target="_blank" rel="external">android深入解析Activity的launchMode启动模式，Intent Flag，taskAffinity</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;launchMode启动时默认的Flag&quot;&gt;&lt;a href=&quot;#launchMode启动时默认的Flag&quot; class=&quot;headerlink&quot; title=&quot;launchMode启动时默认的Flag&quot;&gt;&lt;/a&gt;launchMo
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Activity的启动模式</title>
    <link href="https://luoweiguang.github.io/2016/07/10/Activity%E7%9A%84%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://luoweiguang.github.io/2016/07/10/Activity的启动模式/</id>
    <published>2016-07-10T14:00:00.000Z</published>
    <updated>2017-11-15T05:54:09.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h2><p>可以使用<strong>adb shell dumpsys activity</strong>命令查看activity的任务栈</p>
<a id="more"></a>
<h2 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h2><ol>
<li>标准模式，也是系统的默认模式。</li>
<li>每次启动Activity都会创建一个实例，不管实例是否存在。</li>
<li>一个任务栈可以有多个实例，每个实例也可以属于不同的任务</li>
<li>谁启动了此Activity,那么这个Activity就运行在启动它的那个Activity栈</li>
<li>使用ApplicationContext去启动standard模式的Activity会报错，因为非Activity类型的Context并没有任务栈</li>
<li>被创建的生命周期符合典型情况</li>
</ol>
<h2 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h2><ol>
<li>栈顶复用模式</li>
<li>如果新的Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建</li>
<li>如何不位于栈顶则会重新创建</li>
<li>当Activity不会重新创建时，会回调onNewIntent方法</li>
</ol>
<ul>
<li><p>位于栈顶时<br><img src="/img/20160710000001.png" alt=""></p>
</li>
<li><p>不在栈顶时<br><img src="/img/20160710000002.png" alt=""></p>
</li>
</ul>
<h2 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h2><ol>
<li>栈内复用模式</li>
<li>当一个栈内不存在时，会创建一个Activity</li>
<li>当一个栈内存在时，则会将此Activity在栈内位置以上的Activity全部出栈，并调用onNewIntent方法</li>
<li>当Activity所在的栈不存在时，则会先创建一个任务栈，再创建Activity</li>
</ol>
<ul>
<li><p>栈内存在时<br><img src="/img/20160710000003.png" alt=""></p>
</li>
<li><p>栈内不存在时<br><img src="/img/20160710000004.png" alt=""></p>
</li>
</ul>
<h2 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h2><ol>
<li>单实例模式，一种加强的singleTask模式</li>
<li>具有singleTask所以的特性</li>
<li>当Activity启动时，系统会为它创建一个新的任务栈</li>
</ol>
<blockquote>
<h2 id="跨应用调用"><a href="#跨应用调用" class="headerlink" title="跨应用调用"></a>跨应用调用</h2><h3 id="standard与singleTop"><a href="#standard与singleTop" class="headerlink" title="standard与singleTop"></a>standard与singleTop</h3><ul>
<li><p>5.0之前<br>跨应用之间启动Activity，新生成的Activity会放入发送Intent的Task的栈的顶部</p>
</li>
<li><p>5.0之后<br>跨应用之间启动Activity，会创建一个新的Task，新生成的Activity就会放入刚创建的Task中</p>
</li>
</ul>
<h3 id="singleTask-1"><a href="#singleTask-1" class="headerlink" title="singleTask"></a>singleTask</h3><ul>
<li>在跨应用Intent传递时，如果系统中不存在singleTask Activity的实例，那么讲创建一个新的Task，然后创建SingleTask Activity的实例，将其放入新的Task中</li>
<li>如果singleTask Activity所在的应用进程存在，但是singleTask Activity实例不存在，那么从别的应用启动这个Activity，新的Activity实例会被创建，并放入到所属进程所在的Task中，并位于栈顶位置</li>
<li>更复杂的一种情况，如果singleTask Activity实例存在，从其他程序被启动，那么这个Activity所在的Task会被移到顶部，并且在这个Task中，位于singleTask Activity实例之上的所有Activity将会被正常销毁掉。如果我们按返回键，那么我们首先会回退到这个Task中的其他Activity，直到当前Task的Activity回退栈为空时，才会返回到调用者的Task<h3 id="singleInstance-1"><a href="#singleInstance-1" class="headerlink" title="singleInstance"></a>singleInstance</h3></li>
<li>这个模式和singleTask差不多，因为他们在系统中都只有一份实例。唯一不同的就是存放singleInstance Activity实例的Task只能存放一个该模式的Activity实例。如果从singleInstance Activity实例启动另一个Activity，那么这个Activity实例会放入其他的Task中。同理，如果singleInstance Activity被别的Activity启动，它也会放入不同于调用者的Task中。</li>
</ul>
</blockquote>
<h2 id="taskAffinity属性"><a href="#taskAffinity属性" class="headerlink" title="taskAffinity属性"></a>taskAffinity属性</h2><blockquote>
<p>在某些情况下，Android需要知道一个Activity属于哪个Task，即使它没有被启动到一个具体的Task里。这是通过任务共用性（Affinities）完成的。任务共用性（Affinities）为这个运行一个或多个Activity的Task提供了一个独特的静态名称，默认的一个活动的任务共用性（Affinity）是实现了该Activity的.apk包的名字。</p>
<p>当开始一个没有 Intent.FLAG_ACTIVITY_NEW_TASK标志的Activity时，任务共用性affinities不会影响将会运行该新活动的 Task:它总是运行在启动它的Task里。但是，如果使用了NEW_TASK标志，那么共用性（affinity）将被用来判断是否已经存在一个有相同共用性（affinity）的Task。如果是这样，这项Task将被切换到前面而新的Activity会启动于这个Task的顶层。</p>
<p>这种特性在您必须使用NEW_TASK标志的情况下最有用，尤其是从状态栏通知或桌面快捷方式启动活动时。结果是，当用户用这种方式启动您的应用程序时，它的当前Task将被切换到前台，而且想要查看的Activity被放在最上面。<br>你可以在程序清单（Manifest）文件的应用程序application标签中为.apk包中所有的活动分配你自己的任务共用性Affinites，或者在活动标记中为各个活动进行分配。</p>
<p>一些说明其如何使用的例子如下：</p>
<ul>
<li>如果您的.apk包含多个用户可以启动的高层应用程序，那么您可能需要对用户看到的每个Activity(活动)指定不同的affinities。一个不错的命名惯例是以附加一个以冒号分隔的字符串来扩展您的.apk包名。例如，“ com.android.contacts ”.apk可以有affinities:“com.android.contacts：Dialer”和“ com.android.contacts：ContactsList”。</li>
<li>如果您正在替换一个通知，快捷方式，或其他可以从外部发起的应用程序的“内部”活动，你可能需要明确设定您替代活动的taskAffinity和您准备替代的应用程序一样。例如，如果您想替换contacts详细信息视图（用户可以创建并调用快捷方式），你得把taskAffinity设置成“com.android.contacts”。</li>
</ul>
</blockquote>
<h2 id="跟Task有关的-manifest文件中Activity的特性值介绍"><a href="#跟Task有关的-manifest文件中Activity的特性值介绍" class="headerlink" title="跟Task有关的 manifest文件中Activity的特性值介绍"></a>跟Task有关的 manifest文件中Activity的特性值介绍</h2><h3 id="android-allowTaskReparenting"><a href="#android-allowTaskReparenting" class="headerlink" title="android:allowTaskReparenting"></a>android:allowTaskReparenting</h3><pre><code>用来标记Activity能否从启动的Task移动到有着affinity的Task（当这个Task进入到前台时）
</code></pre><blockquote>
<p>“true”，表示能移动，“false”，表示它必须呆在启动时呆在的那个Task里。</p>
<p>如果这个特性没有被设定，设定到<application>元素上的allowTaskReparenting特性的值会应用到Activity上。默认值为“false”。</application></p>
<p>一般来说，当Activity启动后，它就与启动它的Task关联，并且在那里耗尽它的整个生命周期。当当前的Task不再显示时，你可以使用这个特性来强制Activity移动到有着affinity的Task中。典型用法是：把一个应用程序的Activity移到另一个应用程序的主Task中。<br>例如，如果 email中包含一个web页的链接，点击它就会启动一个Activity来显示这个页面。这个Activity是由Browser应用程序定义的，但是，现在它作为email Task的一部分。如果它重新宿主到Browser Task里，当Browser下一次进入到前台时，它就能被看见，并且，当email Task再次进入前台时，就看不到它了。</p>
<p>Actvity的affinity是由taskAffinity特性定义的。Task的affinity是通过读取根Activity的affinity 决定。因此，根Activity总是位于相同affinity的Task里。由于启动模式为“singleTask”和“singleInstance” 的Activity只能位于Task的底部，因此，重新宿主只能限于“standard”和“singleTop”模式。</p>
</blockquote>
<h3 id="android-alwaysRetainTaskState"><a href="#android-alwaysRetainTaskState" class="headerlink" title="android:alwaysRetainTaskState"></a>android:alwaysRetainTaskState</h3><blockquote>
<p>用来标记Activity所在的Task的状态是否总是由系统来保持。</p>
<p>“true”，表示总是；“false”，表示在某种情形下允许系统恢复Task到它的初始化状态。默认值是“false”。</p>
<p>这个特性只针对Task的根Activity有意义；对其它Activity来说，忽略之。<br>一般来说，特定的情形如当用户从主画面重新选择这个Task时，系统会对这个Task进行清理（从stack中删除位于根Activity之上的所有Activivity）。典型的情况，当用户有一段时间没有访问这个Task时也会这么做，例如30分钟。<br>然而，当这个特性设为“true”时，用户总是能回到这个Task的最新状态，无论他们是如何启动的。这非常有用，例如，像Browser应用程序，这里有很多的状态（例如多个打开的Tab），用户不想丢失这些状态。</p>
</blockquote>
<h3 id="android-clearTaskOnLaunch"><a href="#android-clearTaskOnLaunch" class="headerlink" title="android:clearTaskOnLaunch"></a>android:clearTaskOnLaunch</h3><blockquote>
<p> 用来标记是否从Task中清除所有的Activity，除了根Activity外（每当从主画面重新启动时）</p>
<p> “true”，表示总是清除至它的根Activity，“false”表示不。默认值是“false”。</p>
<p> 这个特性只对启动一个新的Task的Activity（根Activity）有意义；对Task中其它的Activity忽略</p>
<p>当这个值为“true”，每次用户重新启动这个Task时，都会进入到它的根Activity中，不管这个Task最后在做些什么，也不管用户是使用 BACK还是HOME离开的。当这个值为“false”时，可能会在一些情形下（参考alwaysRetainTaskState特性）清除Task的 Activity，但不总是。</p>
<p> 假设，某人从主画面启动了Activity P，并从那里迁移至Activity Q。接下来用户按下HOME，然后返回Activity P。一般，用户可能见到的是Activity Q，因为它是P的Task中最后工作的内容。然而，如果P设定这个特性为“true”，当用户按下HOME并使这个Task再次进入前台时，其上的所有的 Activity(在这里是Q)都将被清除。因此，当返回到这个Task时，用户只能看到P。</p>
<p> 如果这个特性和allowTaskReparenting都设定为“true”，那些能重新宿主的Activity会移动到共享affinity的Task中；剩下的Activity都将被抛弃，如上所述。</p>
</blockquote>
<h3 id="android-finishOnTaskLaunch"><a href="#android-finishOnTaskLaunch" class="headerlink" title="android:finishOnTaskLaunch"></a>android:finishOnTaskLaunch</h3><blockquote>
<p>用来标记当用户再次启动它的Task（在主画面选择这个Task）时已经存在的Activity实例是否要关闭（结束）</p>
<p>“true”，表示应该关闭，“false”表示不关闭。默认值是“false”。<br>如果这个特性和allowTaskReparenting都设定为“true”，这个特性胜出。Activity的affinity忽略。这个Activity不会重新宿主，但是会销毁。</p>
<p>android:launchMode<br>用于指示Activity如何启动。这里有四种模式，与Intent对象中的Activity Flags（FLAG<em>ACTIVITY</em>*变量）共同作用，来决定Activity如何启动来处理Intent。</p>
</blockquote>
<h3 id="android-noHistory"><a href="#android-noHistory" class="headerlink" title="android:noHistory"></a>android:noHistory</h3><blockquote>
<p>用于标记当用户从Activity上离开并且它在屏幕上不再可见时Activity是否从Activity stack中清除并结束（调用finish()方法）——“true”，表示它应该关闭，“false”，表示不需要。默认值是“false”。</p>
<p> “true”值意味着Activity不会留下历史痕迹。因为它不会在Activity stack的Task中保留，因此，用户不能返回它。</p>
<p>比如启用界面的就可以借用这个。</p>
</blockquote>
<h3 id="android-taskAffinity"><a href="#android-taskAffinity" class="headerlink" title="android:taskAffinity"></a>android:taskAffinity</h3><blockquote>
<p>Activity为Task拥有的一个affinity。拥有相同的affinity的Activity理论上属于相同的Task（在用户的角度是相同的“应用程序”）。Task的affinity是由它的根Activity决定的。</p>
<p>affinity决定两件事情——Activity重新宿主的Task（参考allowTaskReparenting特性）和使用FLAG_ACTIVITY_NEW_TASK标志启动的Activity宿主的Task。</p>
<p>默认情况，一个应用程序中的所有Activity都拥有相同的affinity。捏可以设定这个特性来重组它们，甚至可以把不同应用程序中定义的Activity放置到相同的Task中。为了明确Activity不宿主特定的Task，设定该特性为空的字符串。</p>
<p>如果这个特性没有设置，Activity将从应用程序的设定那里继承下来（参考<application>元素的taskAffinity特性）。应用程序默认的affinity的名字是<manifest>元素中设定的package名。</manifest></application></p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">Android开发艺术探索</a><br><a href="http://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode/" target="_blank" rel="external">深入讲解Android中Activity launchMode</a><br><a href="http://blog.csdn.net/today520/article/details/6976328" target="_blank" rel="external">Task Affinity</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Activity的启动模式&quot;&gt;&lt;a href=&quot;#Activity的启动模式&quot; class=&quot;headerlink&quot; title=&quot;Activity的启动模式&quot;&gt;&lt;/a&gt;Activity的启动模式&lt;/h2&gt;&lt;p&gt;可以使用&lt;strong&gt;adb shell dumpsys activity&lt;/strong&gt;命令查看activity的任务栈&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Activity的生命周期</title>
    <link href="https://luoweiguang.github.io/2016/07/09/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://luoweiguang.github.io/2016/07/09/Activity的生命周期/</id>
    <published>2016-07-09T14:00:00.000Z</published>
    <updated>2017-11-15T05:54:08.160Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p><img src="/img/20160709000001.png" alt=""></p>
<h2 id="正常的Activity生命周期"><a href="#正常的Activity生命周期" class="headerlink" title="正常的Activity生命周期"></a>正常的Activity生命周期</h2><ol>
<li>启动 onCreate -&gt; onStart -&gt; onResume<br><img src="/img/20160709000002.png" alt=""></li>
<li>当跳转到另一个Activity时，当前Activity先onPause，跳转的Activity执行onCreate -&gt; onStart -&gt; onResume 后，当前的Activity执行onStop<br><img src="/img/20160709000003.png" alt=""></li>
<li>当用户返回原Activity时,当前Activity先onPause，原Activity执行onRestart -&gt; onStart -&gt; onResume 后，当前的Activity执行onStop -&gt; onDestyoy<br><img src="/img/20160709000004.png" alt=""></li>
</ol>
<h2 id="跳转的Activity为透明主题"><a href="#跳转的Activity为透明主题" class="headerlink" title="跳转的Activity为透明主题"></a>跳转的Activity为透明主题</h2><ol>
<li>当跳转到透明主题Activity时，当前Activity先onPause，跳转的透明主题Activity执行onCreate -&gt; onStart -&gt; onResume 后，当前的Activity <strong>不会执行</strong> onStop<br><img src="/img/20160709000005.png" alt=""></li>
<li>当透明主题跳转的不透明主题时，透明主题Activity执行onPause后,最初Activity会执行onStop(因为不可见了),跳转的不透明主题Activity执行onCreate -&gt; onStart -&gt; onResume 后，透明主题Activity <strong>会执行</strong> onStop<br><img src="/img/20160709000006.png" alt=""></li>
<li>当从不透明主题返回透明主题时，当前的Activity执行onPause后,最初的Activity执行onRestart -&gt; onStart , 而后才会到透明主题Activity的创建onCreate -&gt; onStart -&gt; onResume，不透明主题执行onStop -&gt; onDestyoy<br><img src="/img/20160709000007.png" alt=""></li>
<li>当透明主题Activity返回到最初Activity时，透明主题Activity执行onPause，最初的Activity执行onResume(不执行onRestart -&gt; onStart，因为最初Activiyu是可见的，没有执行到onStop)，透明主题Activity执行onStop -&gt; onDestyoy<br><img src="/img/20160709000008.png" alt=""></li>
</ol>
<h2 id="屏幕切换时Activity的生命周期"><a href="#屏幕切换时Activity的生命周期" class="headerlink" title="屏幕切换时Activity的生命周期"></a>屏幕切换时Activity的生命周期</h2><p>屏幕切换是会先销毁当前Activiy并重建此Activity,具体流程为onPause -&gt; onSaveInstanceState -&gt; onStop -&gt; onDestroy -&gt; onCreate -&gt; onStart -&gt; onRestoreInstanceState -&gt; onResume</p>
<p><img src="/img/20160709000009.png" alt=""></p>
<p>其中onSaveInstanceState用于保存信息，而onRestoreInstanceState用于还原信息，view中也有onSaveInstanceState与onRestoreInstanceState方法，比如EditView,但EditText需要设置id才有效</p>
<p>在Activity中onSaveInstanceState与onRestoreInstanceState都有两种不同参数的方法，一种是(Bundle outState)，另一种是(Bundle outState, PersistableBundle outPersistentState),第二种是API21新增的，使Activity拥有持久化能力</p>
<p><strong>要使用第二种方法要在配置文件中为我们的Activity设置一个属性：android:persistableMode=”persistAcrossReboots”</strong></p>
<p>会在下述情形中被调用：</p>
<ol>
<li>点击home键回到主页或长按后选择运行其他程序</li>
<li>按下电源键关闭屏幕</li>
<li>启动新的Activity</li>
<li>横竖屏切换时，肯定会执行，因为横竖屏切换的时候会先销毁Act，然后再重新创建 重要原则：当系统”未经你许可”时销毁了你的activity，则onSaveInstanceState会被系统调用，这是系统的责任，因为它必须要提供一个机会让你保存你的数据（你可以保存也可以不保存）。</li>
</ol>
<h2 id="Activity的其他方法"><a href="#Activity的其他方法" class="headerlink" title="Activity的其他方法"></a>Activity的其他方法</h2><ul>
<li>onWindowFocusChanged 在Activity窗口获得或失去焦点时被调用</li>
</ul>
<p>获取焦点时调用<br><img src="/img/20160709000010.png" alt=""></p>
<p>失去焦点时调用<br><img src="/img/20160709000011.png" alt=""></p>
<ul>
<li>onApplyThemeResource  设置主题时调用，第一次调用在onCreate()前，使用setTheme()方法也会调用</li>
<li>onConfigurationChanged 在AndroidManifest.xml给Activity配置了相应的configChanges属性，这个时候Activity就不会摧毁后重新创建Activity，而只会回调此方法</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">Android开发艺术探索</a><br><a href="http://blog.csdn.net/u014315849/article/details/50902784" target="_blank" rel="external">bug修复-android中的onCreate两个参数的方法是什么鬼？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/img/20160709000001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;正常的Activity生命周期&quot;&gt;&lt;a href=&quot;#正常的Activity生命周期&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="Android" scheme="https://luoweiguang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://luoweiguang.github.io/tags/Android/"/>
    
      <category term="Android基础" scheme="https://luoweiguang.github.io/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JVM运行时数据区</title>
    <link href="https://luoweiguang.github.io/2016/05/23/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"/>
    <id>https://luoweiguang.github.io/2016/05/23/JVM运行时数据区/</id>
    <published>2016-05-23T09:00:00.000Z</published>
    <updated>2017-07-31T14:11:30.359Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/20160523000001.png" alt=""></p>
<a id="more"></a>
<p><strong>程序计数器（PC）</strong></p>
<ul>
<li>每条线程都需要由一个独立的程序计数器</li>
<li>程序计数器可以看作是当前线程所执行的字节码的行号指示器</li>
<li>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是Native方法，这个计数器指为空（Undefined）</li>
</ul>
<p><strong>Java虚拟机栈</strong></p>
<ul>
<li>虚拟机栈描述的是Java方法执行的内存模型</li>
<li>Java虚拟机栈也是线程私有的，它的生命周期与线程相同</li>
<li>每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</li>
<li>局部变量表存放了编译器克制的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用(reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型（指向了一条字节码指令的地址）</li>
<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflow异常</li>
<li>如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常</li>
</ul>
<p><strong>本地方法栈</strong></p>
<ul>
<li>本地方法栈为虚拟机使用到的Native方法服务</li>
<li>虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由的实现它</li>
<li>由的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法和虚拟机栈合二为一</li>
<li>本地方法栈区域也会抛出StackOverFlowError和OutOfMemoryError异常</li>
</ul>
<p><strong>Java堆</strong></p>
<ul>
<li>Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建</li>
<li>此内存区域的唯一目的是存放对象实例，几乎所有的对象实例都在这里分配内存</li>
</ul>
<p><strong>方法区</strong></p>
<ul>
<li>方法区是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li>
<li>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常</li>
</ul>
<p><strong>运行时常量池</strong></p>
<ul>
<li>运行时常量池是方法区的一部分</li>
<li>常量池用于存放编译器生成的各种字面量和符号引用</li>
</ul>
<p><strong>直接内存</strong></p>
<ul>
<li>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/20160523000001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java进阶" scheme="https://luoweiguang.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
      <category term="JVM" scheme="https://luoweiguang.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>ServerSocket</title>
    <link href="https://luoweiguang.github.io/2016/05/12/ServerSocket/"/>
    <id>https://luoweiguang.github.io/2016/05/12/ServerSocket/</id>
    <published>2016-05-12T13:00:00.000Z</published>
    <updated>2017-08-06T07:35:02.696Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，服务器程序的基本生命周期</p>
<ol>
<li>使用一个ServerSocket()构造函数在一个特定端口创建一个新的ServerSocket。</li>
<li>ServerSocket使用其accept()方法监听这个端口的入站连接。accept()会一直阻塞，直到一个客户端尝试建立连接，此时accept()将返回一个连接客户端和服务器的Socket对象。</li>
<li>根据服务器的类型，会调用Socket的getInputStream()方法或getOutputStream()方法，或者这两个方法都调用，以获得与客户端通信的输入和输出流。</li>
<li>服务器和客户端根据已协商的协议交互，直到要关闭连接</li>
<li>服务器或客户端（或二者）关闭连接</li>
<li>服务器返回到步骤2，等待下一次连接</li>
</ol>
<a id="more"></a>
<h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><ul>
<li><strong>public ServerSocket()</strong><br>创建非绑定服务器套接字。</li>
<li><strong>public ServerSocket(int port)</strong><br>创建绑定到特定端口的服务器套接字。</li>
<li><strong>public ServerSocket(int port,int backlog)</strong><br>利用指定的backlog创建服务器套接字并将其绑定到指定的本地端口号。</li>
<li><strong>public ServerSocket(int port,int backlog,InetAddress bindAddr)</strong><br>使用指定的端口、侦听 backlog 和要绑定到的本地 IP 地址创建服务器。<br>参数：<br>port - 本地TCP端口,当为0时表示选择任意端口<br>backlog - 队列的最大长度<br>bindAddr - 要将服务器绑定到的InetAddress </li>
</ul>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ul>
<li><strong>public Socket accept()</strong><br>侦听并接受到此套接字的连接。</li>
<li><strong>public void bind(SocketAddress endpoint)</strong><br>将 ServerSocket 绑定到特定地址（IP 地址和端口号）。 </li>
<li><strong>public void bind(SocketAddress endpoint,int backlog)</strong><br>将 ServerSocket 绑定到特定地址（IP 地址和端口号）。<br>参数：<br>endpoint - 要绑定的 IP 地址和端口号。<br>backlog - 队列的最大长度。</li>
</ul>
<h2 id="获取ServerSocket信息"><a href="#获取ServerSocket信息" class="headerlink" title="获取ServerSocket信息"></a>获取ServerSocket信息</h2><ul>
<li><strong>public InetAddress getInetAddress()</strong><br>返回此服务器套接字的本地地址。如果套接字是未绑定的，则返回 null。</li>
<li><strong>public int getLocalPort()</strong><br>返回此套接字在其上侦听的端口。 如果尚未绑定套接字，则返回 -1。</li>
<li><strong>getLocalSocketAddress</strong><br>返回此套接字绑定的端点的地址，如果尚未绑定则返回 null。</li>
</ul>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul>
<li><strong>public boolean isClosed()</strong><br>返回 ServerSocket 的关闭状态。</li>
<li><strong>public boolan isBound()</strong><br>返回 ServerSocket 的绑定状态。 </li>
</ul>
<h2 id="Socket选项"><a href="#Socket选项" class="headerlink" title="Socket选项"></a>Socket选项</h2><ul>
<li>SO_TIMEOUT<br>SO_TIMEOUT是accept()在抛出java.io.INterruptedIOException异常前等待入站连接的时间，以毫秒计，如果为0，表示永远不会超时<br>使用<strong>public void setSoTimeout(int timeout)</strong>修改<br>使用<strong>public int getSoTimeout()</strong>查询</li>
<li>SO_REUSEADDR<br>与Socket的SO_REUSEADDR选项类型，它确定了是否允许一个新的Socket绑定到之前使用过的一个端口<br>使用<strong>public void setReuseAddress(boolean on)</strong>修改<br>使用<strong>public boolean getReuseAddress()</strong>查询</li>
<li>SO_RCVBUF<br>SO_RCVBUF选项设置了ServerSocket接受的客户单Socket默认接收缓冲区大小<br>设置大于64kb的接收缓冲区大小必须在绑定之前设置<br>使用<strong>public void setReceiveBufferSize(int size)</strong>修改<br>使用<strong>public int getReceiveBufferSize()</strong>查询</li>
<li><strong>public void setPerformancePreferences(int connectionTime,int latency,int bandwidth)</strong><br>设置此 ServerSocket 的性能首选项。<br>参数：<br>connectionTime - 表明短连接时间的相对重要性的 int<br>latency - 表明低延迟的相对重要性的 int<br>bandwidth - 表明高带宽的相对重要性的 int</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java中，服务器程序的基本生命周期&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用一个ServerSocket()构造函数在一个特定端口创建一个新的ServerSocket。&lt;/li&gt;
&lt;li&gt;ServerSocket使用其accept()方法监听这个端口的入站连接。accept()会一直阻塞，直到一个客户端尝试建立连接，此时accept()将返回一个连接客户端和服务器的Socket对象。&lt;/li&gt;
&lt;li&gt;根据服务器的类型，会调用Socket的getInputStream()方法或getOutputStream()方法，或者这两个方法都调用，以获得与客户端通信的输入和输出流。&lt;/li&gt;
&lt;li&gt;服务器和客户端根据已协商的协议交互，直到要关闭连接&lt;/li&gt;
&lt;li&gt;服务器或客户端（或二者）关闭连接&lt;/li&gt;
&lt;li&gt;服务器返回到步骤2，等待下一次连接&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="网络" scheme="https://luoweiguang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Socket</title>
    <link href="https://luoweiguang.github.io/2016/05/11/Socket/"/>
    <id>https://luoweiguang.github.io/2016/05/11/Socket/</id>
    <published>2016-05-11T12:00:00.000Z</published>
    <updated>2017-08-06T07:37:38.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>Socket是两台主机之间的一个连接。它可以完成7个基本操作</p>
<ul>
<li>连接远程机器</li>
<li>发送数据</li>
<li>接收数据</li>
<li>关闭连接</li>
<li>绑定端口</li>
<li>监听入站数据</li>
<li>在绑定端口上接收来自远程机器的连接</li>
</ul>
<p>Java的Socket类提供了对应前4个操作的方法，后三个仅服务器需要，即等待客户端的连接</p>
<a id="more"></a>
<h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><ul>
<li><strong>Socket(InetAddress address, int port)</strong><br>创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</li>
<li><strong>Socket(String host, int port)</strong><br>创建一个流套接字并将其连接到指定主机上的指定端口号。</li>
<li><strong>Socket(InetAddress address, int port, InetAddress localAddr, int localPort)</strong><br>创建一个套接字并将其连接到指定远程地址上的指定远程端口。</li>
<li><strong>Socket(String host, int port, InetAddress localAddr, int localPort)</strong><br>创建一个套接字并将其连接到指定远程主机上的指定远程端口。</li>
</ul>
<p>以上四种方法在创建对象时都会连接socket<br>如果localPort参数传入0，Java会随机选择1024到65535之间的一个可用端口</p>
<ul>
<li><strong>Socket()</strong><br>通过系统默认类型的 SocketImpl 创建未连接套接字</li>
<li><strong>Socket(Proxy proxy)</strong><br>创建一个未连接的套接字并指定代理类型（如果有），该代理不管其他设置如何都应被使用。</li>
</ul>
<h2 id="获取Socket的信息"><a href="#获取Socket的信息" class="headerlink" title="获取Socket的信息"></a>获取Socket的信息</h2><ul>
<li><strong>public InetAddress getInetAddress()</strong><br>返回套接字连接的地址。</li>
<li><strong>public int getPort()</strong><br>返回此套接字连接到的远程端口</li>
<li><strong>public InetAddress getLocalAddress()</strong><br>获取套接字绑定的本地地址</li>
<li><strong>public int getLocalPort()</strong><br>返回此套接字绑定到的本地端口</li>
<li><strong>public InputStream getInputStream()</strong><br>返回此套接字的输入流。</li>
<li><strong>public OutputStream getOutputStream()</strong><br>返回此套接字的输出流。</li>
</ul>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ul>
<li><strong>public void connect(SocketAddress endpoint)</strong></li>
<li><strong>public void connect(SocketAddress endpoint,int timeout)</strong><br>当创建未连接套接字后，使用此方法将此套接字连接到服务器<br>参数：<br>endpoint - SocketAddress<br>timeout - 要使用的超时值（以毫秒为单位）。</li>
</ul>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><ul>
<li><strong>public void close()</strong><br>关闭此套接字。</li>
<li><strong>public void shutdownInput()</strong><br>关闭输入流，关闭输入之后再读取输入流会返回-1</li>
<li><strong>public void shutdownOutput()</strong><br>关闭输出流，关闭输出之后再写入Socket则会抛出一个IOException异常</li>
</ul>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul>
<li><strong>public boolean isInputShutdown()</strong><br>返回是否关闭套接字连接的半读状态。如果已关闭套接字的输入，则返回 true</li>
<li><strong>public boolean isOutputShutdown()</strong><br>返回是否关闭套接字连接的半写状态。如果已关闭套接字的输出，则返回 true</li>
<li><strong>public boolean isClosed()</strong><br>如果socket关闭，isClosed()方法会返回ture，否则返回false，如果Socket从一开始从未连接，isClosed()也返回false</li>
<li><strong>public boolean isConnected()</strong><br>Socket是否从未连接过一个远程主机</li>
<li><strong>public boolan isBound()</strong><br>Socket是否成功地绑定到本地系统上的出站端口</li>
</ul>
<h2 id="设置Socket选择"><a href="#设置Socket选择" class="headerlink" title="设置Socket选择"></a>设置Socket选择</h2><ul>
<li>TCP_NODELAY<br>设置TCP_NODELAY为ture可确保包会尽可能块的发送，而无论包的大小。即关闭了Socket的缓冲<br>使用<strong>public boolean getTcpNoDelay()</strong>查询<br>使用<strong>public void setTcpNoDelay(boolean on)</strong>修改</li>
<li>SO_TIMEOUT<br>正常情况下，尝试从Socket读取数据时，read()调用会阻塞尽可能长的时间来得到足够的字节。设置SO_TIMEOUT可以确保这次调用组设的时间不会超过某个固定的毫秒数。0被解释为无限超时，这是默认值<br>使用<strong>public int getSoTimeout()</strong>查询<br>使用<strong>public void setSoTimeout(int timeout)</strong>修改，timeout以毫秒为单位</li>
<li>SO_LINGER<br>SO_LINGER选项指定了Socket关闭时如何处理尚未发送的数据报。<br>默认情况下，close()方法将立即返回，但系统仍会尝试发送剩余的数据。<br>如果延迟时间设置为0，那么当Socket关闭时，所有未发送的数据包都将被丢弃。<br>如果SO_LINGER打开而且延迟时间设置为正数，close()方法会阻塞（阻塞时间为指定的秒数），等待发送数据和接收确认，当过去相应秒数后，Socket关闭，所有剩余的数据都不会发送，也不会收到确认<br>使用<strong>public int getSoLinger()</strong>查询，当返回-1时表示该项被禁用<br>使用<strong>public void setSoLinger(boolean on, int linger)</strong>修改，linger以秒为单位</li>
<li>SO_SNDBUF<br>SO_SNDBUF选项控制用于网络输入的建议的发送缓冲区大小<br>使用<strong>public int getSendBufferSize()</strong>查询<br>使用<strong>public void setSendBufferSize(int size)</strong>修改</li>
<li>SO_RCVBUF<br>SO_RCVBUF选项控制用于网络输入的建议的接收缓冲区大小<br>使用<strong>public int getReceiveBufferSize()</strong>查询<br>使用<strong>public void setReceiveBufferSize(int size)</strong>修改</li>
<li>SO_KEEPALIVE<br>如果打开了SO_KEEPALIVE,客户端会通过一个空闲连接发送一个数据包（一般两小时一次），以确保服务器未崩溃。如果服务器没有响应这个包，客户端会持续尝试11分钟多的时间，直到接收到响应为止。如果在12分钟内未收到响应，客户端就关闭socket。如果没有SO_KEEPALIVE,不活动的客户端可能会永久存在下去，而不会注意到服务器已经崩溃<br>使用<strong>public boolean getKeepAlive()</strong>查询<br>使用<strong>public void setKeepAlive(boolean on)</strong>修改</li>
<li>OOBINLINE<br>默认情况下，此选项是禁用的。如果希望接收正常数据中的紧急数据，就需要设置此项为true<br>使用<strong>public boolean getOOBInline()</strong>查询<br>使用<strong>public void setOOBInline(boolean on)</strong>修改</li>
<li>SO_REUSEADDR<br>当一个Socket关闭时，可能不会立即释放本地端口，这将会阻止所有其他Socket绑定到一个已知端口，如果开启SO_REUSEADDR(默认为关闭)，就允许另一个Socket绑定到这个端口<br>使用<strong>public boolean getReuseAddress()</strong>查询<br>使用<strong>public void setReuseAddress(boolean on)</strong>修改<br>要正常使用这些方法，setReuseAddress()必须在为这个端口绑定新Socket之前调用。这以为着Socket必须使用无参数构造函数以非连接状态创建，然后调用setReuseAddress(ture),再使用connect()方法连接Socket。之前连接的Socket和重用老地址的新Socket都必须设置SO_REUSEADDR为ture，这样才能生效</li>
<li>IP_TOS<br>使用<strong>public int getTrafficClass()</strong>查询<br>使用<strong>public void setTrafficClass(int tc)</strong>修改<br>tc的值为0到255之间，这个字节的高六位包含一个差分服务代码点（DSCP）值，低两位包含一个显式拥塞通知（ECN）值</li>
</ul>
<p>常用DSCP值和解释</p>
<table>
<thead>
<tr>
<th>PHB(逐跳行为)</th>
<th>二进制值</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认</td>
<td>00000</td>
<td>Best-effort（尽力）业务流</td>
</tr>
<tr>
<td>加速转发</td>
<td>101110</td>
<td>低损耗，低延迟，低抖动业务流，通常仅限于网络容量的30%或更低</td>
</tr>
<tr>
<td>保证转发</td>
<td>多个</td>
<td>保证最多以一个指定速率传送</td>
</tr>
<tr>
<td>类选择器</td>
<td>xxx000</td>
<td>与IPv4 TOS首部向后兼容</td>
</tr>
</tbody>
</table>
<p>保证转发优先级分类</p>
<table>
<thead>
<tr>
<th></th>
<th>第一类（最低优先级）</th>
<th>第二类</th>
<th>第三类</th>
<th>第四类（最高优先级）</th>
</tr>
</thead>
<tbody>
<tr>
<td>低丢包率</td>
<td>AF11(001010)</td>
<td>AF21(010010)</td>
<td>AF31(011010)</td>
<td>AF41(100010)</td>
</tr>
<tr>
<td>中丢包率</td>
<td>AF12(001100)</td>
<td>AF22(010100)</td>
<td>AF32(011100)</td>
<td>AF42(100100)</td>
</tr>
<tr>
<td>高丢包率</td>
<td>AF13(001110)</td>
<td>AF23(010110)</td>
<td>AF33(011110)</td>
<td>AF43(100110)</td>
</tr>
</tbody>
</table>
<p><strong>public void setPerformancePreferences(int connectionTime,int latency,int bandwidth)</strong><br>设置此套接字的性能偏好。 此方法在连接套接字后调用此方法无效。<br>参数：<br>connectionTime - 表达短连接时间的相对重要性的 int<br>latency - 表达低延迟的相对重要性的 int<br>bandwidth - 表达高带宽的相对重要性的 int</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h2&gt;&lt;p&gt;Socket是两台主机之间的一个连接。它可以完成7个基本操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接远程机器&lt;/li&gt;
&lt;li&gt;发送数据&lt;/li&gt;
&lt;li&gt;接收数据&lt;/li&gt;
&lt;li&gt;关闭连接&lt;/li&gt;
&lt;li&gt;绑定端口&lt;/li&gt;
&lt;li&gt;监听入站数据&lt;/li&gt;
&lt;li&gt;在绑定端口上接收来自远程机器的连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java的Socket类提供了对应前4个操作的方法，后三个仅服务器需要，即等待客户端的连接&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="网络" scheme="https://luoweiguang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>URLConnection</title>
    <link href="https://luoweiguang.github.io/2016/05/09/URLConnection/"/>
    <id>https://luoweiguang.github.io/2016/05/09/URLConnection/</id>
    <published>2016-05-09T13:00:00.000Z</published>
    <updated>2017-08-06T07:39:39.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><p>使用URLconnection类的程序遵循以下基本步骤</p>
<ol>
<li>构造一个URL对象</li>
<li>调用这个URL对象的openConnection()获取一个对应URL的URLConnected对象</li>
<li>配置这个URLConnected</li>
<li>读取首部字段</li>
<li>获得输入流并读取数据</li>
<li>获得输出流并写入数据</li>
<li>关闭连接</li>
</ol>
<a id="more"></a>
<h2 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h2><p>protected   URL         url;<br>protected   boolean     doInput = ture;<br>protected   boolean     doOutput = false;<br>protected   boolean     allowUserInteraction = defaultAllowUserInteraction;<br>protected   boolean     useCaches = defaultUseCaches;<br>protected   long        ifModifiedSince = 0;<br>protected   boolean     connected = false;</p>
<ul>
<li><strong>protected URL url</strong><br>url字段指定了这个URLConnection连接到URL。构造行数会在创建URLConnection时设置这个字段，此后不能再改变<br>使用getURL() URL查询</li>
<li><strong>protected boolean connected</strong><br>如果连接已经打开，boolean字段connected为ture，如果连接关闭，则为false。没有直接读取或改变connected值的方法，不过任何导致URLConnection连接的方法都会将这个变量设置为ture，任何导致断开的方法都会导致设置为false</li>
<li><strong>protected boolean allowUserInteraction</strong><br>allowUserInteraction字段指示了是否允许用户交互，默认值为false。值为ture时表示允许用户进行交互，这个值只能在URLConnected连接前设置<br>使用setAllowUserInteraction(boolean allowuserinteraction) void修改<br>使用getAllowUserInteraction() boolean查询</li>
<li><strong>protected boolean doInput</strong><br>URLConnection可以读取服务器，写入服务器，或者同时用于读/写服务器。如果URLconnection可以用来读取，保护类型boolean字段doInput就为ture，否则为false。默认值为ture<br>使用setDoInput(boolean doinput) void修改<br>使用getDoInput() boolean查询</li>
<li><strong>protected boolean doOutput</strong><br>如果URLconnection可以用于写入，保护类型boolean字段doOutput就为ture，否则为false。默认值为false<br>使用setDoOutput(boolean dooutput) void修改<br>使用getDoOutput() boolean查询</li>
<li><strong>protected long ifModifiedSince</strong><br>客户端最后获取文档的时间，即http首部中的If-Modified-Since<br>使用setIfModifiedSince(long ifmodifiedsince)修改<br>使用getIfModifiedSince() long查询</li>
<li><strong>protected boolean useCaches</strong><br>useCaches变量表示是否使用缓存，默认值为ture，表示使用缓存，false表示不使用缓存<br>使用setUseCaches(boolean usecaches) void修改<br>使用getUseCaches() boolean查询<h2 id="获取任意首部字段"><a href="#获取任意首部字段" class="headerlink" title="获取任意首部字段"></a>获取任意首部字段</h2></li>
<li><strong>public String getHeaderField(String name)</strong><br>返回指定首部字段的值，首部的名不区分大小写，也不包含结束冒号</li>
<li><strong>public String getHeaderFieldKey(int n)</strong><br>这个方法返回第n个首部字段的字段名，请求方法本身是第0个首部，它的键为null.第一个首部即编号为1</li>
<li><strong>public String getHeaderField(int n)</strong><br>这个方法返回第n个首部字段的值，第一个首部即编号为1</li>
<li><strong>public long getHeaderFiledDate(String name,long default)</strong><br>这个方法首先获取由name参数指定的首部字段，然后尝试将这个字符串转换为一个long，如果无法找到请求的首部字段或无法转换为long，则返回default参数</li>
</ul>
<h2 id="读取首部"><a href="#读取首部" class="headerlink" title="读取首部"></a>读取首部</h2><ul>
<li><strong>public String getContentType()</strong><br>getContentType()方法返回响应主体的MIME内容类型。它依赖于Web服务器来发送一个有效的内容类型，如果没有提供内容类型，它不会抛出异常，而是返回null</li>
<li><strong>public int getContentLength()</strong><br>getContentLength()方法告诉你内容有多少字节，如果没有Content-length首部，getContentLength()就返回-1<br>public long getContentLengthLong()//Java 7<br>同上</li>
<li><strong>public String getContentEncoding()</strong><br>getContentEncoding()方法指出内容是如何编码的，如果发送的内容没有编码，这个方法就返回null</li>
<li><strong>public long getDate()</strong><br>文档发送时间，如果HTTP首部不包含Data字段，getDate()就返回0</li>
<li><strong>public long getExpiration()</strong><br>文档过期时间，如果首部不包含Expiration字段,getExpiration()就返回0，这表示文档不会过期</li>
<li><strong>public long getLastModified()</strong><br>返回文档的最后修改日期，如果HTTP首部没有包括Last-modified字段，这个方法就返回0</li>
<li><strong>public int getHeaderFiledInt(String name,long default)</strong><br>这个方法首先获取由name参数指定的首部字段，然后尝试将这个字符串转换为一个int，如果无法找到请求的首部字段或无法转换为int，则返回default参数</li>
</ul>
<h2 id="读取服务器数据"><a href="#读取服务器数据" class="headerlink" title="读取服务器数据"></a>读取服务器数据</h2><ul>
<li><strong>public InputStreamgetInputStream()</strong></li>
</ul>
<h2 id="向服务器写入数据"><a href="#向服务器写入数据" class="headerlink" title="向服务器写入数据"></a>向服务器写入数据</h2><ul>
<li><strong>public OutputStream getOutputStream()</strong> </li>
</ul>
<h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>控制socket等待建立连接的时间<br>使用setConnectTimeout(int timeout) void设置<br>使用getConnectTimeout() int查询</p>
<p>控制输入流等待数据到达的时间<br>使用setReadTimeout(int timeout) void设置<br>使用getReadTimeout() int查询</p>
<p>两种超时都将0看做永远不超时</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本步骤&quot;&gt;&lt;a href=&quot;#基本步骤&quot; class=&quot;headerlink&quot; title=&quot;基本步骤&quot;&gt;&lt;/a&gt;基本步骤&lt;/h2&gt;&lt;p&gt;使用URLconnection类的程序遵循以下基本步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造一个URL对象&lt;/li&gt;
&lt;li&gt;调用这个URL对象的openConnection()获取一个对应URL的URLConnected对象&lt;/li&gt;
&lt;li&gt;配置这个URLConnected&lt;/li&gt;
&lt;li&gt;读取首部字段&lt;/li&gt;
&lt;li&gt;获得输入流并读取数据&lt;/li&gt;
&lt;li&gt;获得输出流并写入数据&lt;/li&gt;
&lt;li&gt;关闭连接&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="网络" scheme="https://luoweiguang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>InetAddress</title>
    <link href="https://luoweiguang.github.io/2016/05/08/InetAddress/"/>
    <id>https://luoweiguang.github.io/2016/05/08/InetAddress/</id>
    <published>2016-05-08T11:00:00.000Z</published>
    <updated>2017-08-06T09:12:34.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建InetAddress对象"><a href="#创建InetAddress对象" class="headerlink" title="创建InetAddress对象"></a>创建InetAddress对象</h2><ul>
<li><strong>getByAddress(byte[] addr)</strong> <em>static InetAddress</em><br>  根据提供的IP地址创建 InetAddress</li>
<li><strong>getByAddress(String host, byte[] addr)</strong> <em>static InetAddress</em><br>  根据提供的主机名和IP地址创建 InetAddress</li>
<li><strong>getByName(String host)</strong> <em>static InetAddress</em><br>  根据提供的主机名创建 InetAddress</li>
<li><strong>getAllByName(String host)</strong> <em>static InetAddress[]</em><br>  在给定主机名的情况下，根据系统上配置的名称服务返回其 IP 地址所组成的数组。</li>
<li><strong>getLocalHost()</strong> <em>static InetAddress</em><br>  返回本地主机</li>
<li><strong>getLoopbackAddress()</strong> <em>static InetAddress</em><br>  返回回送地址，在Windows系统中，采用127.0.0.1</li>
</ul>
<a id="more"></a>
<h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><ul>
<li><strong>getHostName()</strong>  <em>String</em><br>  获取此IP地址的主机名。</li>
<li><strong>getCanonicalHostName()</strong>  <em>String</em><br>  获取此IP 地址的完全限定域名。如果安全检查不允许操作，则返回IP 地址的文本表示形式。</li>
<li><strong>getAddress()</strong>  <em>byte[]</em><br>  返回此InetAddress对象的原始 IP 地址。</li>
<li><strong>getHostAddress()</strong>  <em>String</em><br>  返回IP地址字符串（以文本表现形式）。</li>
</ul>
<h2 id="地址类型"><a href="#地址类型" class="headerlink" title="地址类型"></a>地址类型</h2><ul>
<li><strong>isAnyLocalAddress()</strong> <em>boolean</em><br>  如果地址是通配地址，返回ture。IPv4的通配符地址是0.0.0.0</li>
<li><strong>isLoopbackAddress()</strong> <em>boolean</em><br>  如果地址是回送地址，返回ture。IPv4的loopback地址的范围是127.0.0.0 ~ 127.255.255.255</li>
<li><strong>isLinkLocalAddress()</strong> <em>boolean</em><br>  如果地址是本地连接地址，返回ture。IPv4的本地连接地址的范围是 169.254.0.0 ~ 169.254.255.255</li>
<li><strong>isSiteLocalAddress()</strong> <em>boolean</em><br>  如果地址是地区本地地址，返回ture。IPv4的地址本地地址分为三段：10.0.0.0 ~ 10.255.255.255、172.16.0.0 ~ 172.31.255.255、192.168.0.0 ~ 192.168.255.255</li>
<li><strong>isMulticastAddress()</strong> <em>boolean</em><br>  如果地址是广播地址，返回ture。IPv4的广播地址的范围是224.0.0.0 ~ 239.255.255.255</li>
<li><strong>isMCGlobal()</strong> <em>boolean</em><br>  如果地址是全球范围的广播地址，返回ture。IPv4的广播地址除了224.0.0.0和第一个字节是239的IP地址都是全球范围的广播地址</li>
<li><strong>isMCNodeLocal()</strong> <em>boolean</em><br>  如果地址本地接口广播地址，返回ture。所有的IPv4广播地址都不是本地接口广播地址</li>
<li><strong>isMCLinkLocal()</strong> <em>boolean</em><br>  如果地址是子网广播地址，返回ture。IPv4的子网广播地址的范围是 224.0.0.0 ~ 224.0.0.255</li>
<li><strong>isMCSiteLocal()</strong> <em>boolean</em><br>  如果地址是站点范围的广播地址，返回ture。IPv4的站点范围广播地址的范围是239.255.0.0 ~ 239.255.255.255</li>
<li><strong>isMCOrgLocal()</strong> <em>boolean</em><br>  如果地址是组织范围的广播地址，返回ture。IPv4的组织范围广播地址的第一个字节是239，第二个字节不小于192，第三个字节不大于195</li>
</ul>
<h2 id="测试可达性"><a href="#测试可达性" class="headerlink" title="测试可达性"></a>测试可达性</h2><ul>
<li><p><strong>isReachable(int timeout)</strong> <em>boolean</em></p>
</li>
<li><p><strong>isReachable(NetworkInterface netif, int ttl, int timeout)</strong> <em>boolean</em></p>
</li>
</ul>
<p>netif - 将用于完成测试的NetworkInterface；或者用于任何接口的null<br>ttl - 要尝试的最大跳数或默认值 0<br>timeout - 调用中止前的时间（以毫秒为单位）</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/26259017/" target="_blank" rel="external">Java网络编程</a><br><a href="http://blog.csdn.net/wts/article/details/5027108" target="_blank" rel="external">利用InetAddress类确定特殊IP地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建InetAddress对象&quot;&gt;&lt;a href=&quot;#创建InetAddress对象&quot; class=&quot;headerlink&quot; title=&quot;创建InetAddress对象&quot;&gt;&lt;/a&gt;创建InetAddress对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;getByAddress(byte[] addr)&lt;/strong&gt; &lt;em&gt;static InetAddress&lt;/em&gt;&lt;br&gt;  根据提供的IP地址创建 InetAddress&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getByAddress(String host, byte[] addr)&lt;/strong&gt; &lt;em&gt;static InetAddress&lt;/em&gt;&lt;br&gt;  根据提供的主机名和IP地址创建 InetAddress&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getByName(String host)&lt;/strong&gt; &lt;em&gt;static InetAddress&lt;/em&gt;&lt;br&gt;  根据提供的主机名创建 InetAddress&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getAllByName(String host)&lt;/strong&gt; &lt;em&gt;static InetAddress[]&lt;/em&gt;&lt;br&gt;  在给定主机名的情况下，根据系统上配置的名称服务返回其 IP 地址所组成的数组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getLocalHost()&lt;/strong&gt; &lt;em&gt;static InetAddress&lt;/em&gt;&lt;br&gt;  返回本地主机&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getLoopbackAddress()&lt;/strong&gt; &lt;em&gt;static InetAddress&lt;/em&gt;&lt;br&gt;  返回回送地址，在Windows系统中，采用127.0.0.1&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="网络" scheme="https://luoweiguang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java与正则表达式</title>
    <link href="https://luoweiguang.github.io/2016/05/04/Java%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://luoweiguang.github.io/2016/05/04/Java与正则表达式/</id>
    <published>2016-05-04T11:00:00.000Z</published>
    <updated>2017-08-06T09:25:08.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pattern类"><a href="#Pattern类" class="headerlink" title="Pattern类"></a>Pattern类</h2><table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>static Pattern</td>
<td>compile(String regex)</td>
<td>将给定的正则表达式编译到模式中。</td>
</tr>
<tr>
<td>static Pattern</td>
<td>compile(String regex, int flags)</td>
<td>将给定的正则表达式编译到具有给定标志的模式中。</td>
</tr>
<tr>
<td>int</td>
<td>flags()</td>
<td>返回此模式的匹配标志。</td>
</tr>
<tr>
<td>Matcher</td>
<td>matcher(CharSequence input)</td>
<td>创建匹配给定输入与此模式的匹配器。</td>
</tr>
<tr>
<td>static boolean</td>
<td>matches(String regex, CharSequence input)</td>
<td>编译给定正则表达式并尝试将给定输入与其匹配。</td>
</tr>
<tr>
<td>String</td>
<td>pattern()</td>
<td>返回在其中编译过此模式的正则表达式。</td>
</tr>
<tr>
<td>static String</td>
<td>quote(String s)</td>
<td>返回指定 String 的字面值模式 String。</td>
</tr>
<tr>
<td>String[]</td>
<td>split(CharSequence input)</td>
<td>围绕此模式的匹配拆分给定输入序列。</td>
</tr>
<tr>
<td>String[]</td>
<td>split(CharSequence input, int limit)</td>
<td>围绕此模式的匹配拆分给定输入序列。</td>
</tr>
<tr>
<td>String</td>
<td>toString()</td>
<td>返回此模式的字符串表示形式。</td>
</tr>
</tbody>
</table>
 <a id="more"></a>
<p><strong>flag的取值范围如下：</strong></p>
<table>
<thead>
<tr>
<th>编译标志</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pattern.CASE_INSENSITIVE(?i)</td>
<td>默认情况下，大小写不明感的匹配只适用于US-ASCII字符集。这个标志能让表达式忽略大小写进行匹配。要想对Unicode字符进行大小不明感的匹配，只要将UNICODE_CASE与这个标志合起来就行了。</td>
</tr>
<tr>
<td>Pattern.COMMENTS(?x)</td>
<td>在这种模式下，匹配时会忽略(正则表达式里的)空格字符(注：不是指表达式里的”//s”，而是指表达式里的空格，tab，回车之类)。注释从#开始，一直到这行结束。可以通过嵌入式的标志来启用Unix行模式。</td>
</tr>
<tr>
<td>Pattern.MULTILINE(?m)</td>
<td>在这种模式下，’^’和’\$’分别匹配一行的开始和结束。此外，’^’仍然匹配字符串的开始，’\$’也匹配字符串的结束。默认情况下，这两个表达式仅仅匹配字符串的开始和结束。</td>
</tr>
<tr>
<td>Pattern.LITERAL</td>
<td>指定此标志后，指定模式的输入字符串就会作为字面值字符序列来对待。输入序列中的元字符或转义序列不具有任何特殊意义。标志 CASE_INSENSITIVE 和 UNICODE_CASE在与此标志一起使用时将对匹配产生影响。其他标志都变得多余了。</td>
</tr>
<tr>
<td>Pattern.DOTALL(?s)</td>
<td>在这种模式下，表达式’.’可以匹配任意字符，包括表示一行的结束符。默认情况下，表达式’.’不匹配行的结束符。</td>
</tr>
<tr>
<td>Pattern.UNIX_LINES(?d)</td>
<td>在这个模式下，只有’/n’才被认作一行的中止，并且与’.’，’^’，以及’$’进行匹配。</td>
</tr>
<tr>
<td>Pattern.UNICODE_CASE(?u)</td>
<td>在这个模式下，如果你还启用了CASE_INSENSITIVE标志，不区分大小写的匹配将以符合 Unicode Standard 的方式完成。默认情况下，不区分大小写的匹配假定仅匹配 US-ASCII 字符集中的字符。</td>
</tr>
<tr>
<td>Pattern.CANON_EQ</td>
<td>启用规范等价。指定此标志后，当且仅当其完整规范分解匹配时，两个字符才可视为匹配。例如，当指定此标志时，表达式 “a\u030A” 将与字符串 “\u00E5” 匹配。默认情况下，匹配不考虑采用规范等价。</td>
</tr>
</tbody>
</table>
<h2 id="正则表达式的构造"><a href="#正则表达式的构造" class="headerlink" title="正则表达式的构造"></a>正则表达式的构造</h2><table>
<thead>
<tr>
<th>构造</th>
<th>匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符</td>
<td></td>
</tr>
<tr>
<td>x</td>
<td>字符x</td>
</tr>
<tr>
<td>\^</td>
<td>^</td>
</tr>
<tr>
<td>\\</td>
<td>反斜线字符</td>
</tr>
<tr>
<td>\0n</td>
<td>带有八进制值 0 的字符 n (0 &lt;= n &lt;= 7)</td>
</tr>
<tr>
<td>\0nn</td>
<td>带有八进制值 0 的字符 nn (0 &lt;= n &lt;= 7)</td>
</tr>
<tr>
<td>\0mnn</td>
<td>带有八进制值 0 的字符 mnn（0 &lt;= m &lt;= 3、0 &lt;= n &lt;= 7）</td>
</tr>
<tr>
<td>\xhh</td>
<td>带有十六进制值 0x 的字符 hh</td>
</tr>
<tr>
<td>\uhhhh</td>
<td>带有十六进制值 0x 的字符 hhhh</td>
</tr>
<tr>
<td>\t</td>
<td>制表符 (‘\u0009’)</td>
</tr>
<tr>
<td>\n</td>
<td>新行（换行）符 (‘\u000A’)</td>
</tr>
<tr>
<td>\r</td>
<td>回车符 (‘\u000D’)</td>
</tr>
<tr>
<td>\f</td>
<td>换页符 (‘\u000C’)</td>
</tr>
<tr>
<td>\a</td>
<td>报警 (bell) 符 (‘\u0007’)</td>
</tr>
<tr>
<td>\e</td>
<td>转义符 (‘\u001B’)</td>
</tr>
<tr>
<td>\cx</td>
<td>对应于 x 的控制符</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>字符类</td>
<td></td>
</tr>
<tr>
<td>[abc]</td>
<td>a、b 或 c（简单类）</td>
</tr>
<tr>
<td>[^abc]</td>
<td>任何字符，除了 a、b 或 c（否定）</td>
</tr>
<tr>
<td>[a-zA-Z]</td>
<td>a 到 z 或 A 到 Z，两头的字母包括在内（范围）</td>
</tr>
<tr>
<td>[a-d[m-p]]</td>
<td>a 到 d 或 m 到 p：[a-dm-p]（并集）</td>
</tr>
<tr>
<td>[a-z&amp;&amp;[def]]</td>
<td>d、e 或 f（交集）</td>
</tr>
<tr>
<td>[a-z&amp;&amp;[^bc]]</td>
<td>a 到 z，除了 b 和 c：[ad-z]（减去）</td>
</tr>
<tr>
<td>[a-z&amp;&amp;[^m-p]]</td>
<td>a 到 z，而非 m 到 p：[a-lq-z]（减去）</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>预定义字符类</td>
<td></td>
</tr>
<tr>
<td>.</td>
<td>任何字符（与行结束符可能匹配也可能不匹配）</td>
</tr>
<tr>
<td>\d</td>
<td>数字：[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字： [^0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>空白字符：[ \t\n\x0B\f\r]</td>
</tr>
<tr>
<td>\S</td>
<td>非空白字符：[^\s]</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符：[a-zA-Z_0-9]</td>
</tr>
<tr>
<td>\W</td>
<td>非单词字符：[^\w]</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>POSIX 字符类（仅 US-ASCII）</td>
<td></td>
</tr>
<tr>
<td>\p{Lower}</td>
<td>小写字母字符：[a-z]</td>
</tr>
<tr>
<td>\p{Upper}</td>
<td>大写字母字符：[A-Z]</td>
</tr>
<tr>
<td>\p{ASCII}</td>
<td>所有 ASCII：[\x00-\x7F]</td>
</tr>
<tr>
<td>\p{Alpha}</td>
<td>字母字符：[\p{Lower}\p{Upper}]</td>
</tr>
<tr>
<td>\p{Digit}</td>
<td>十进制数字：[0-9]</td>
</tr>
<tr>
<td>\p{Alnum}</td>
<td>字母数字字符：[\p{Alpha}\p{Digit}]</td>
</tr>
<tr>
<td>\p{Punct}</td>
<td>标点符号：!”#\$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{\</td>
<td>}~</td>
</tr>
<tr>
<td>\p{Graph}</td>
<td>可见字符：[\p{Alnum}\p{Punct}]</td>
</tr>
<tr>
<td>\p{Print}</td>
<td>可打印字符：[\p{Graph}\x20]</td>
</tr>
<tr>
<td>\p{Blank}</td>
<td>空格或制表符：[ \t]</td>
</tr>
<tr>
<td>\p{Cntrl}</td>
<td>控制字符：[\x00-\x1F\x7F]</td>
</tr>
<tr>
<td>\p{XDigit}</td>
<td>十六进制数字：[0-9a-fA-F]</td>
</tr>
<tr>
<td>\p{Space}</td>
<td>空白字符：[ \t\n\x0B\f\r]</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>java.lang.Character 类（简单的 java 字符类型）</td>
<td></td>
</tr>
<tr>
<td>\p{javaLowerCase}</td>
<td>等效于 java.lang.Character.isLowerCase()</td>
</tr>
<tr>
<td>\p{javaUpperCase}</td>
<td>等效于 java.lang.Character.isUpperCase()</td>
</tr>
<tr>
<td>\p{javaWhitespace}</td>
<td>等效于 java.lang.Character.isWhitespace()</td>
</tr>
<tr>
<td>\p{javaMirrored}</td>
<td>等效于 java.lang.Character.isMirrored()</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>Unicode 块和类别的类</td>
<td></td>
</tr>
<tr>
<td>\p{Lu}</td>
<td>大写字母</td>
</tr>
<tr>
<td>\p{Ll}</td>
<td>小写字母</td>
</tr>
<tr>
<td>\p{Sc}</td>
<td>货币符号</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>边界匹配器</td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>行的开头</td>
</tr>
<tr>
<td>$</td>
<td>行的结尾</td>
</tr>
<tr>
<td>\b</td>
<td>单词边界</td>
</tr>
<tr>
<td>\B</td>
<td>非单词边界</td>
</tr>
<tr>
<td>\A</td>
<td>输入的开头</td>
</tr>
<tr>
<td>\G</td>
<td>上一个匹配的结尾</td>
</tr>
<tr>
<td>\Z</td>
<td>输入的结尾，仅用于最后的结束符（如果有的话）</td>
</tr>
<tr>
<td>\z</td>
<td>输入的结尾</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>匹配优先量词</td>
<td></td>
</tr>
<tr>
<td>X?</td>
<td>X，</td>
<td>一次或一次也没有</td>
</tr>
<tr>
<td>X*</td>
<td>X，零次或多次</td>
</tr>
<tr>
<td>X+</td>
<td>X，一次或多次</td>
<td></td>
</tr>
<tr>
<td>X{n}</td>
<td>X，恰好 n 次</td>
</tr>
<tr>
<td>X{n,}</td>
<td>X，至少 n 次</td>
</tr>
<tr>
<td>X{n,m}</td>
<td>X，至少 n 次，但是不超过 m 次</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>忽略优先量词</td>
<td></td>
</tr>
<tr>
<td>X??</td>
<td>X，</td>
<td>一次或一次也没有</td>
</tr>
<tr>
<td>X*?</td>
<td>X，零次或多次</td>
</tr>
<tr>
<td>X+?</td>
<td>X，一次或多次</td>
</tr>
<tr>
<td>X{n}?</td>
<td>X，恰好 n 次</td>
</tr>
<tr>
<td>X{n,}?</td>
<td>X，至少 n 次</td>
</tr>
<tr>
<td>X{n,m}?</td>
<td>X，至少 n 次，但是不超过 m 次</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>占用优先量词</td>
<td></td>
</tr>
<tr>
<td>X?+</td>
<td>X，一次或一次也没有</td>
</tr>
<tr>
<td>X*+</td>
<td>X，零次或多次</td>
</tr>
<tr>
<td>X++</td>
<td>X，一次或多次</td>
</tr>
<tr>
<td>X{n}+</td>
<td>X，恰好 n 次</td>
</tr>
<tr>
<td>X{n,}+</td>
<td>X，至少 n 次</td>
</tr>
<tr>
<td>X{n,m}+</td>
<td>X，至少 n 次，但是不超过 m 次</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>逻辑运算符</td>
<td></td>
</tr>
<tr>
<td>XY</td>
<td>X 后跟 Y</td>
</tr>
<tr>
<td>X\</td>
<td>Y</td>
<td>X 或 Y</td>
</tr>
<tr>
<td>(X)</td>
<td>X，作为捕获组</td>
</tr>
<tr>
<td>\n</td>
<td>匹配第n个捕获组</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>环视</td>
<td></td>
</tr>
<tr>
<td>(?&lt;=Expression)</td>
<td>逆序肯定环视，表示所在位置左侧能够匹配Expression</td>
</tr>
<tr>
<td>(?&lt;!Expression)</td>
<td>逆序否定环视，表示所在位置左侧不能匹配Expression</td>
</tr>
<tr>
<td>(?=Expression)</td>
<td>顺序肯定环视，表示所在位置右侧能够匹配Expression</td>
</tr>
<tr>
<td>(?!Expression)</td>
<td>顺序否定环视，表示所在位置右侧不能匹配Expression</td>
</tr>
</tbody>
</table>
<p>Java的逆序环视中不支持不定长度的量词如 *  + {m,n}</p>
<pre><code>模式修饰符：(?modifier)
(?i)...(?-i)    不区分大小写
(?x)...(?-x)    宽松排列和注释模式
(?s)...(?-s)    点号通配模式
(?m)...(?-m)    增强的行锚点模式
</code></pre><p>宽松排列和注释模式:<br>在此模式下会忽略字符组外部的所有空白字符。<br>#符号和换行符之间的内容视为注释</p>
<p>点号通配模式：<br>在此模式下。号匹配换行符</p>
<p>增强的行锚点模式：<br>在此模式下^ $能够匹配字符串</p>
<p>文字文本模式：<br>\Q…\E</p>
<p>模式作用范围(?modifier:…)</p>
<p>(?&lt; name &gt;X) 捕获组名(API1.7)</p>
<p>捕获型括号：(…) \1 \2</p>
<p>仅分组的括号：(?:…)</p>
<p>固化分组：(?&gt;…)</p>
<h2 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h2><table>
<thead>
<tr>
<th>返回类型</th>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Matcher</td>
<td>appendReplacement(StringBuffer sb, String replacement)</td>
<td>将当前匹配子串替换为指定字符串，并且将替换后的子串以及其之前到上次匹配子串之后的字符串段添加到一个StringBuffer对象里</td>
</tr>
<tr>
<td>StringBuffer</td>
<td>appendTail(StringBuffer sb)</td>
<td>将最后一次匹配工作后剩余的字符串添加到一个StringBuffer对象里</td>
</tr>
<tr>
<td>int</td>
<td>end()</td>
<td>返回当前匹配的子串的最后一个字符在原目标字符串中的索引位置</td>
</tr>
<tr>
<td>int</td>
<td>end(int group)</td>
<td>返回与匹配模式里指定的组相匹配的子串最后一个字符的位置</td>
</tr>
<tr>
<td>int</td>
<td>end(String name)</td>
<td>返回与匹配模式里指定的组相匹配的子串最后一个字符的位置(API1.8)</td>
</tr>
<tr>
<td>boolean</td>
<td>find()</td>
<td>尝试在目标字符串里查找下一个匹配子串</td>
</tr>
<tr>
<td>boolean</td>
<td>find(int start)</td>
<td>重设 Matcher 对象，并且尝试在目标字符串里从指定的位置开始查找下一个匹配的子串</td>
</tr>
<tr>
<td>String</td>
<td>group()</td>
<td>返回当前查找而获得的与组匹配的所有子串内容</td>
</tr>
<tr>
<td>String</td>
<td>group(int group)</td>
<td>返回当前查找而获得的与指定的组匹配的子串内容</td>
</tr>
<tr>
<td>String</td>
<td>group(String name)</td>
<td>返回当前查找而获得的与指定的组匹配的子串内容(API1.7)</td>
</tr>
<tr>
<td>int</td>
<td>groupCount()</td>
<td>返回当前查找所获得的匹配组的数量</td>
</tr>
<tr>
<td>boolean</td>
<td>hasAnchoringBounds()</td>
<td>查询此匹配器区域界限的定位。</td>
</tr>
<tr>
<td>boolean</td>
<td>hasTransparentBounds()</td>
<td>查询此匹配器区域边界的透明度。</td>
</tr>
<tr>
<td>boolean</td>
<td>hitEnd()</td>
<td>如果匹配器执行的最后匹配操作中搜索引擎遇到输入结尾，则返回 true。</td>
</tr>
<tr>
<td>boolean</td>
<td>lookingAt()</td>
<td>检测目标字符串是否以匹配的子串起始</td>
</tr>
<tr>
<td>boolean</td>
<td>matches()</td>
<td>尝试对整个目标字符展开匹配检测，也就是只有整个目标字符串完全匹配时才返回真值</td>
</tr>
<tr>
<td>Pattern</td>
<td>pattern()</td>
<td>返回该 Matcher 对象的现有匹配模式，也就是对应的 Pattern 对象</td>
</tr>
<tr>
<td>static String</td>
<td>quoteReplacement(String s)</td>
<td>返回指定 String 的字面值替换 String</td>
</tr>
<tr>
<td>Matcher</td>
<td>region(int start, int end)</td>
<td>设置此匹配器的区域限制</td>
</tr>
<tr>
<td>int</td>
<td>regionEnd()</td>
<td>报告此匹配器区域的结束索引(不包括）</td>
</tr>
<tr>
<td>int</td>
<td>regionStart()</td>
<td>报告此匹配器区域的开始索引(包括）</td>
</tr>
<tr>
<td>String</td>
<td>replaceAll(String replacement)</td>
<td>将目标字符串里与既有模式相匹配的子串全部替换为指定的字符串</td>
</tr>
<tr>
<td>String</td>
<td>replaceFirst(String replacement)</td>
<td>将目标字符串里第一个与既有模式相匹配的子串替换为指定的字符串</td>
</tr>
<tr>
<td>int</td>
<td>requireEnd()</td>
<td>如果很多输入都可以将正匹配更改为负匹配，则返回true</td>
</tr>
<tr>
<td>Matcher</td>
<td>reset()</td>
<td>重设该 Matcher 对象</td>
</tr>
<tr>
<td>Matcher</td>
<td>reset(CharSequence input)</td>
<td>重设该 Matcher 对象并且指定一个新的目标字符串</td>
</tr>
<tr>
<td>int</td>
<td>start()</td>
<td>返回当前查找所获子串的开始字符在原目标字符串中的位置</td>
</tr>
<tr>
<td>int</td>
<td>start(int group)</td>
<td>返回当前查找所获得的和指定组匹配的子串的第一个字符在原目标字符串中的位置</td>
</tr>
<tr>
<td>int</td>
<td>start(String name)</td>
<td>返回当前查找所获得的和指定组匹配的子串的第一个字符在原目标字符串中的位置(API1.8)</td>
</tr>
<tr>
<td>MatchResult</td>
<td>toMatchResult()</td>
<td>作为 MatchResult 返回此匹配器的匹配状态</td>
</tr>
<tr>
<td>String</td>
<td>toString()</td>
<td>返回匹配器的字符串表示形式</td>
</tr>
<tr>
<td>Matcher</td>
<td>useAnchoringBounds(boolean b)</td>
<td>设置匹配器区域界限的定位。</td>
</tr>
<tr>
<td>Matcher</td>
<td>usePattern(Pattern newPattern)</td>
<td>更改此 Matcher 用于查找匹配项的 Pattern。</td>
</tr>
<tr>
<td>Matcher</td>
<td>useTransparentBounds(boolean b)</td>
<td>设置此匹配器区域边界的透明度。</td>
</tr>
</tbody>
</table>
<h2 id="Matcher方法详解"><a href="#Matcher方法详解" class="headerlink" title="Matcher方法详解"></a>Matcher方法详解</h2><p><strong>matches() | lookingAt() | find()</strong></p>
<ul>
<li>matches() 尝试将整个区域与模式匹配。</li>
<li>lookingAt() 尝试将从区域开头开始的输入序列与该模式匹配与 matches 方法类似，此方法始终从区域的开头开始；与之不同的是，它不需要匹配整个区域。</li>
<li>find() 此方法从匹配器区域的开头开始，如果该方法的前一次调用成功了并且从那时开始匹配器没有被重置，则从以前匹配操作没有匹配的第一个字符开始。</li>
</ul>
<p>※当上述其中一种方法调用后，才可以调用start、end 和 group 方法</p>
<p><strong>replaceAll(String replacement) | replaceFirst(String replacementString replacement) | appendReplacement(StringBuffer sb, String replacement) | appendTail(StringBuffer sb)</strong></p>
<ul>
<li>replaceAll(String replacement) 使用replacement替代所有匹配的字符串</li>
<li>replaceFirst(String replacement) 使用replacement替代第一个匹配的字符串</li>
<li>appendReplacement(StringBuffer sb, String replacement) 读取开始匹配位置至匹配结束位置的字符串，使用replacement替代匹配的位置，将替换好的字符串添加到sb中</li>
<li>appendTail(StringBuffer sb) 将开始位置至匹配结束位置的字符串添加到sb中</li>
</ul>
<p>※使用appendReplacement(StringBuffer sb, String replacement)方法前需使用matches()，lookingAt()或find()</p>
<p><strong>useTransparentBounds(boolean b)</strong></p>
<p>TransparentBounds属性默认为false，使用region(int start, int end)能够限定匹配的范围，当我们将TransparentBounds设置为ture时，匹配的限定范围将不只于所限定的范围</p>
<p><strong>useAnchoringBounds(boolean b)</strong></p>
<p>AnchoringBounds属性默认为ture，在此情况^表示开始\$表示结束，当设置为false时，^$将不在表示此意思</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.douban.com/subject/2154713/" target="_blank" rel="external">精通正则表达式</a><br><a href="http://blog.csdn.net/l_yqing/article/details/7938510" target="_blank" rel="external">Java学习札记19：详解Java中的Pattern和Matcher</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pattern类&quot;&gt;&lt;a href=&quot;#Pattern类&quot; class=&quot;headerlink&quot; title=&quot;Pattern类&quot;&gt;&lt;/a&gt;Pattern类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;static Pattern&lt;/td&gt;
&lt;td&gt;compile(String regex)&lt;/td&gt;
&lt;td&gt;将给定的正则表达式编译到模式中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static Pattern&lt;/td&gt;
&lt;td&gt;compile(String regex, int flags)&lt;/td&gt;
&lt;td&gt;将给定的正则表达式编译到具有给定标志的模式中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;flags()&lt;/td&gt;
&lt;td&gt;返回此模式的匹配标志。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Matcher&lt;/td&gt;
&lt;td&gt;matcher(CharSequence input)&lt;/td&gt;
&lt;td&gt;创建匹配给定输入与此模式的匹配器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static boolean&lt;/td&gt;
&lt;td&gt;matches(String regex, CharSequence input)&lt;/td&gt;
&lt;td&gt;编译给定正则表达式并尝试将给定输入与其匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;pattern()&lt;/td&gt;
&lt;td&gt;返回在其中编译过此模式的正则表达式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static String&lt;/td&gt;
&lt;td&gt;quote(String s)&lt;/td&gt;
&lt;td&gt;返回指定 String 的字面值模式 String。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String[]&lt;/td&gt;
&lt;td&gt;split(CharSequence input)&lt;/td&gt;
&lt;td&gt;围绕此模式的匹配拆分给定输入序列。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String[]&lt;/td&gt;
&lt;td&gt;split(CharSequence input, int limit)&lt;/td&gt;
&lt;td&gt;围绕此模式的匹配拆分给定输入序列。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;toString()&lt;/td&gt;
&lt;td&gt;返回此模式的字符串表示形式。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO（四）：文件操作</title>
    <link href="https://luoweiguang.github.io/2016/04/30/JavaIO%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://luoweiguang.github.io/2016/04/30/JavaIO（四）：文件操作/</id>
    <published>2016-04-30T08:00:00.000Z</published>
    <updated>2017-08-06T09:27:51.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 新建文件
     * @param path 绝对路径
     * @return 新建成功返回ture，新建失败或以存在此文件返回false
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">newFile</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
 <a id="more"></a>
<hr>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 新建文件夹
     * @param path 绝对路径
     * @return 新建成功返回ture，新建失败或以存在此文件夹返回false
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">newFolder</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 文件重命名
     * @param path 绝对路径
     * @param newname 新名称
     * @return 文件重命名 成功返回ture,失败或不存在此文件返回false
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">renameTo</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String newname<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 删除文件或文件夹
     * @param path 绝对路径
     * @return 文件不存在或以删除返回ture
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> filelists <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>String childfile <span class="token operator">:</span> filelists<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">delete</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> childfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filelists</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">filelists</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filelists</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span><span class="token keyword">boolean</span> isSearchChildList<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">filelists</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> isSearchChildList<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filelists</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span><span class="token keyword">boolean</span> isSearchChildList<span class="token punctuation">,</span><span class="token keyword">boolean</span> isAddFolder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">filelists</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> isSearchChildList<span class="token punctuation">,</span>isAddFolder<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 列出目录下及其子目录下所有文件名含有fileFilrer字符数组中的文件，但不包含文件夹
     * @param path 绝对路径
     * @param isSearchChildList 是否搜索子目录
     * @param isAddFolder 是否添加文件夹
     * @param fileFilter 过滤字符数组
     * @return 返回的为绝对路径
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filelists</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span><span class="token keyword">boolean</span> isSearchChildList<span class="token punctuation">,</span><span class="token keyword">boolean</span> isAddFolder<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> fileFilter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> filelists <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>fileFilter <span class="token operator">==</span> null<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">for</span><span class="token punctuation">(</span>String filterStr<span class="token operator">:</span> fileFilter<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>filterStr<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>String str<span class="token operator">:</span> filelists<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>isAddFolder<span class="token punctuation">)</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span>isSearchChildList<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> childLists<span class="token operator">=</span> <span class="token function">filelists</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> str<span class="token punctuation">,</span>isSearchChildList<span class="token punctuation">,</span>isAddFolder<span class="token punctuation">,</span>fileFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>childLists<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> 
            <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">copy</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String newfilepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//128KB</span>
        <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>newfilepath<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">copy</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String newfilepath<span class="token punctuation">,</span><span class="token keyword">boolean</span> overlay<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//128KB</span>
        <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>newfilepath<span class="token punctuation">,</span>overlay<span class="token punctuation">,</span><span class="token number">131072</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>




    <span class="token comment" spellcheck="true">/**
     * 复制文件
     * @param path 绝对路径
     * @param newfilepath 绝对路径
     * @param overlay 是否进行覆盖
     * @param length 复制缓冲区的大小
     * @return 复制文件成功返回ture,未成功返回false
     * @throws IOException IOException 输入输出流关闭异常
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">copy</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String newfilepath<span class="token punctuation">,</span><span class="token keyword">boolean</span> overlay<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> bufferlength <span class="token operator">=</span> length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>newfilepath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        File newfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>newfilepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>newfile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>overlay<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    newfile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> 
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            newfile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> filelists <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>String childfile <span class="token operator">:</span> filelists<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">copy</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span>childfile<span class="token punctuation">,</span> newfilepath <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span>childfile<span class="token punctuation">,</span>overlay<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            newfile<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>  
            OutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>  
            <span class="token keyword">try</span> <span class="token punctuation">{</span>  
                inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>newfile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>bufferlength<span class="token punctuation">]</span><span class="token punctuation">;</span>  
                <span class="token keyword">int</span> i<span class="token punctuation">;</span>  
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
                <span class="token punctuation">{</span>  
                    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>  
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>  
                inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  
                outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 文件或文件夹大小
     * @param path 绝对路径
     * @return 单位为byte
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">fileSizes</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">long</span> fileSizes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> filelists <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>String childfile <span class="token operator">:</span> filelists<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                fileSizes <span class="token operator">+=</span> <span class="token function">fileSizes</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> childfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fileSizes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建&quot;&gt;&lt;a href=&quot;#新建&quot; class=&quot;headerlink&quot; title=&quot;新建&quot;&gt;&lt;/a&gt;新建&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    /**
     * 新建文件
     * @param path 绝对路径
     * @return 新建成功返回ture，新建失败或以存在此文件返回false
     */
    public static boolean newFile(String path)
    {
        File file = new File(path);
        file.getParentFile().mkdirs();
        try
        {
            return file.createNewFile();
        } catch (IOException e)
        {
            e.printStackTrace();
            return false;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="IO" scheme="https://luoweiguang.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO（三）：Reader与Writer</title>
    <link href="https://luoweiguang.github.io/2016/04/28/JavaIO%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AReader%E4%B8%8EWriter/"/>
    <id>https://luoweiguang.github.io/2016/04/28/JavaIO（三）：Reader与Writer/</id>
    <published>2016-04-28T13:00:00.000Z</published>
    <updated>2017-08-06T09:41:10.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test11.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//markSupported() boolean 判断此流是否支持 mark() 操作以及支持哪一项操作。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> isr<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//ready() boolean 判断此流是否已经准备好用于读取。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready():"</span> <span class="token operator">+</span> isr<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 读取单个字符。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf) int 将字符读入数组。</span>
        isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf, int off, int len) int 将字符读入数组的某一部分。</span>
        isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf, int off, int len):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long ns) long 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        isr<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭该流并释放与之关联的所有系统资源。</span>
        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
 <a id="more"></a>
<p><strong>E:\Test11.txt</strong>为<a href="#CharArrayWriter">CharArrayWriter</a>输出</p>
<h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:\\Test11.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//markSupported() boolean 判断此流是否支持 mark() 操作以及支持哪一项操作。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> fr<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//ready() boolean 判断此流是否已经准备好用于读取。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready():"</span> <span class="token operator">+</span> fr<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 读取单个字符。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf) int 将字符读入数组。</span>
        fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf, int off, int len) int 将字符读入数组的某一部分。</span>
        fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf, int off, int len):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long ns) long 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        fr<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭该流并释放与之关联的所有系统资源。</span>
        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="PushbackReader"><a href="#PushbackReader" class="headerlink" title="PushbackReader"></a>PushbackReader</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        PushbackReader pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushbackReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:\\Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//markSupported() boolean 判断此流是否支持 mark() 操作以及支持哪一项操作。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> pr<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//ready() boolean 判断此流是否已经准备好用于读取。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready():"</span> <span class="token operator">+</span> pr<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 读取单个字符。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf) int 将字符读入数组。</span>
        pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf, int off, int len) int 将字符读入数组的某一部分。</span>
        pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf, int off, int len):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//unread(char[] cbuf, int off, int len) void 推回字符数组的某一部分，方法是将其复制到推回缓冲区的前面。</span>
        pr<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span>chars2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//unread(char[] cbuf) void 推回一个字符数组，方法是将其复制到推回缓冲区前面。</span>
        pr<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//unread(int c) void 推回单个字符：将其复制到推回缓冲区的前面。</span>
        pr<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset() void 重置该流。</span>
        pr<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long ns) long 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        pr<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭该流并释放与之关联的所有系统资源。</span>
        pr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="CharArrayReader"><a href="#CharArrayReader" class="headerlink" title="CharArrayReader"></a>CharArrayReader</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            chars1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        CharArrayReader car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 判断此流是否支持 mark() 操作以及支持哪一项操作。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> car<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//ready() boolean 判断此流是否已经准备好用于读取。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready():"</span> <span class="token operator">+</span> car<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//mark(int readAheadLimit) void 标记流中的当前位置。</span>
        car<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 读取单个字符。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> car<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf) int 将字符读入数组。</span>
        car<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf, int off, int len) int 将字符读入数组的某一部分。</span>
        car<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf, int off, int len):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset()  void 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        car<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long ns) long 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        car<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭该流并释放与之关联的所有系统资源。</span>
        car<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:\\Test11.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//markSupported() boolean 判断此流是否支持 mark() 操作以及支持哪一项操作。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> br<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//ready() boolean 判断此流是否已经准备好用于读取。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready():"</span> <span class="token operator">+</span> br<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//mark(int readAheadLimit) void 标记流中的当前位置。</span>
        br<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 读取单个字符。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf) int 将字符读入数组。</span>
        br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf, int off, int len) int 将字符读入数组的某一部分。</span>
        br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf, int off, int len):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset()  void 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        br<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long ns) long 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        br<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readLine() String 读取一个文本行。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readLine():"</span> <span class="token operator">+</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭该流并释放与之关联的所有系统资源。</span>
        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="StringReader"><a href="#StringReader" class="headerlink" title="StringReader"></a>StringReader</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        StringReader sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token string">"aHello WorldHelloaabcdefghijklmnopqrstuvwxyzabcdefghijklmHelloHello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 判断此流是否支持 mark() 操作以及支持哪一项操作。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> sr<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//ready() boolean 判断此流是否已经准备好用于读取。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready():"</span> <span class="token operator">+</span> sr<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//mark(int readAheadLimit) void 标记流中的当前位置。</span>
        sr<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 读取单个字符。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf) int 将字符读入数组。</span>
        sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(char[] cbuf, int off, int len) int 将字符读入数组的某一部分。</span>
        sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(char[] cbuf, int off, int len):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset()  void 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        sr<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long ns) long 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。</span>
        sr<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭该流并释放与之关联的所有系统资源。</span>
        sr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="PipedReader与PipedWriter"><a href="#PipedReader与PipedWriter" class="headerlink" title="PipedReader与PipedWriter"></a>PipedReader与PipedWriter</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        PipedReader pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PipedWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        pr<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ReaderThread rt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderThread</span><span class="token punctuation">(</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        WriterThread wt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriterThread</span><span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>wt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ReaderThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> PipedReader pr<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ReaderThread</span><span class="token punctuation">(</span>PipedReader pr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pr <span class="token operator">=</span> pr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>  
        <span class="token punctuation">{</span>  
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PipedReader:读取前没有数据,阻塞中...等待数据传过来再输出到控制台..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//read(byte[] b) int 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b中</span>
            pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//ready() boolean 判断此流是否已经准备好用于读取。</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready():"</span> <span class="token operator">+</span> pr<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PipedReader:读取数据成功,阻塞解除..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将读取的数据流用字符串以字符串打印出来  </span>
            <span class="token comment" spellcheck="true">//read() int 读取此传送流中的下一个数据字符。</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//read(char[] cbuf, int off, int len) int 将此传送流中最多 len 个数据字符读入字符数组。</span>
            pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//markSupported() boolean 判断此流是否支持 mark()操作</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pr<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//close() int 关闭此管道输入流并释放与该流相关的所有系统资源。</span>
            pr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
        <span class="token punctuation">}</span>  
        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"PipedReader:管道读取流失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>     
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">WriterThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>
<span class="token punctuation">{</span>

    <span class="token keyword">private</span> PipedWriter pw<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">WriterThread</span><span class="token punctuation">(</span>PipedWriter pw<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pw <span class="token operator">=</span> pw<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>  
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PipedWriter:开始将数据写入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                chars1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//write(char[] cbuf) void 写入字符数组。 </span>
            pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//write(int c) void 将指定的 char 写入管道输出流。</span>
            pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment" spellcheck="true">//write(char[] cbuf, int off, int len) int 将 len 将 len 字符从指定初始偏移量为 off 的字符数组写入到此管道输出流。</span>
            pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//flush() void 刷新此输出流并强制写出所有缓冲的输出字符。</span>
            pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//append(char c) Writer 将指定字符添加到此 writer。 </span>
            pw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//append(CharSequence csq) Writer 将指定字符序列添加到此 writer。 </span>
            pw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//append(CharSequence csq,int start,int end) Writer 将指定字符序列的子序列添加到此 writer.Appendable。 </span>
            pw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//close() void 关闭此管道输出流并释放与此流相关的所有系统资源。</span>
            pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"PipedWriter:WriteThread写入失败..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="StringWriter"><a href="#StringWriter" class="headerlink" title="StringWriter"></a>StringWriter</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        StringWriter sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(char c) StringWriter 将指定字符添加到此 writer。</span>
        sw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq) StringWriter 将指定的字符序列添加到此 writer。</span>
        sw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq, int start, int end) StringWriter 将指定字符序列的子序列添加到此 writer。</span>
        sw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int c) void 写入单个字符。</span>
        sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            chars1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf) void 写入字符数组。 </span>
        sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off,int len) void 写入字符数组的某一部分。</span>
        sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off, int len) void 写入字符数组的某一部分。</span>
        sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(String str) void 写入一个字符串。</span>
        sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void  刷新该流的缓冲。</span>
        sw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭 StringWriter 无效。</span>
        sw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toString() String 以字符串的形式返回该缓冲区的当前值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getBuffer() StringBuffer 返回该字符串缓冲区本身。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sw<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test9.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int c) void 写入单个字符。</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            chars1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//append(char c) StringWriter 将指定字符添加到此 writer。</span>
        osw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq) StringWriter 将指定的字符序列添加到此 writer。</span>
        osw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq, int start, int end) StringWriter 将指定字符序列的子序列添加到此 writer。</span>
        osw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf) void 写入字符数组。 </span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off,int len) void 写入字符数组的某一部分。</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off, int len) void 写入字符数组的某一部分。</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(String str) void 写入一个字符串。</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getEncoding() String 返回此流使用的字符编码的名称。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getEncoding():"</span> <span class="token operator">+</span> osw<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新该流的缓冲。</span>
        osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此流，但要先刷新它。</span>
        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"E:\\Test10.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int c) void 写入单个字符。</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            chars1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//append(char c) StringWriter 将指定字符添加到此 writer。</span>
        fw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq) StringWriter 将指定的字符序列添加到此 writer。</span>
        fw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq, int start, int end) StringWriter 将指定字符序列的子序列添加到此 writer。</span>
        fw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf) void 写入字符数组。 </span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off,int len) void 写入字符数组的某一部分。</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off, int len) void 写入字符数组的某一部分。</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(String str) void 写入一个字符串。</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getEncoding() String 返回此流使用的字符编码的名称。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getEncoding():"</span> <span class="token operator">+</span> fw<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新该流的缓冲。</span>
        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此流，但要先刷新它。</span>
        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="CharArrayWriter"><a href="#CharArrayWriter" class="headerlink" title="CharArrayWriter"></a>CharArrayWriter</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        CharArrayWriter caw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayWriter</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int c) void 写入单个字符。</span>
        caw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            chars1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//append(char c) StringWriter 将指定字符添加到此 writer。</span>
        caw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq) StringWriter 将指定的字符序列添加到此 writer。</span>
        caw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq, int start, int end) StringWriter 将指定字符序列的子序列添加到此 writer。</span>
        caw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf) void 写入字符数组。 </span>
        caw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off,int len) void 写入字符数组的某一部分。</span>
        caw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off, int len) void 写入字符数组的某一部分。</span>
        caw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(String str) void 写入一个字符串。</span>
        caw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toCharArray() char[] 返回输入数据的副本。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toCharArray():"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>caw<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"E:\\Test11.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeTo(Writer out) void 将缓冲区的内容写入另一个字符流。</span>
        caw<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//size() int 返回缓冲区的当前大小。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size():"</span> <span class="token operator">+</span> caw<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset() void 重置该缓冲区，以便再次使用它而无需丢弃已分配的缓冲区。</span>
        caw<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新该流的缓冲。</span>
        caw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此流，但要先刷新它。</span>
        caw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        CharArrayWriter caw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayWriter</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>caw<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int c) void 写入单个字符。</span>
        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            chars1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//append(char c) StringWriter 将指定字符添加到此 writer。</span>
        bw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq) StringWriter 将指定的字符序列添加到此 writer。</span>
        bw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence csq, int start, int end) StringWriter 将指定字符序列的子序列添加到此 writer。</span>
        bw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf) void 写入字符数组。 </span>
        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off,int len) void 写入字符数组的某一部分。</span>
        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(char[] cbuf, int off, int len) void 写入字符数组的某一部分。</span>
        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(String str) void 写入一个字符串。</span>
        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//newLine() void 写入一个行分隔符。</span>
        bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新该流的缓冲。</span>
        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此流，但要先刷新它。</span>
        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;InputStreamReader&quot;&gt;&lt;a href=&quot;#InputStreamReader&quot; class=&quot;headerlink&quot; title=&quot;InputStreamReader&quot;&gt;&lt;/a&gt;InputStreamReader&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Test
{
    public static void main(String[] args) throws IOException
    {
        InputStreamReader isr = new InputStreamReader(new FileInputStream(&amp;quot;E:\\Test11.txt&amp;quot;));

        //markSupported() boolean 判断此流是否支持 mark() 操作以及支持哪一项操作。
        System.out.println(&amp;quot;markSupported():&amp;quot; + isr.markSupported());
        //ready() boolean 判断此流是否已经准备好用于读取。
        System.out.println(&amp;quot;ready():&amp;quot; + isr.ready());
        //read() int 读取单个字符。
        System.out.println(&amp;quot;read():&amp;quot; + isr.read());
        char[] chars1 = new char[26];
        //read(char[] cbuf) int 将字符读入数组。
        isr.read(chars1);
        System.out.println(&amp;quot;read(char[] cbuf):&amp;quot; + new String(chars1));
        char[] chars2 = new char[26];
        //read(char[] cbuf, int off, int len) int 将字符读入数组的某一部分。
        isr.read(chars2, 0, 13);
        System.out.println(&amp;quot;read(char[] cbuf, int off, int len):&amp;quot; + new String(chars2));
        //skip(long ns) long 将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。
        isr.skip(1);
        //close() void 关闭该流并释放与之关联的所有系统资源。
        isr.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="IO" scheme="https://luoweiguang.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO（二）：InputStream与OutputStream</title>
    <link href="https://luoweiguang.github.io/2016/04/26/JavaIO%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AInputStream%E4%B8%8EOutputStream/"/>
    <id>https://luoweiguang.github.io/2016/04/26/JavaIO（二）：InputStream与OutputStream/</id>
    <published>2016-04-26T01:00:00.000Z</published>
    <updated>2017-08-06T09:43:31.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ByteArrayInputStream"><a href="#ByteArrayInputStream" class="headerlink" title="ByteArrayInputStream"></a>ByteArrayInputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        ByteArrayInputStream bais1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long n) long 从此输入流中跳过 n 个输入字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skip(long n):"</span> <span class="token operator">+</span> bais1<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//available() int 返回可从此输入流读取（或跳过）的剩余字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> bais1<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 测试此 InputStream 是否支持 mark/reset。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> bais1<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//mark(int readAheadLimit) void 设置流中的当前标记位置。</span>
        bais1<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 从此输入流中读取下一个数据字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> bais1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] int 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[]):"</span> <span class="token operator">+</span> bais1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b, int off, int len) int 将最多 len 个数据字节从此输入流读入 byte 数组。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b, int off, int len):"</span> <span class="token operator">+</span> bais1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset() void 将缓冲区的位置重置为标记位置。</span>
        bais1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reset():"</span> <span class="token operator">+</span> bais1<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭 ByteArrayInputStream</span>
        bais1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
 <a id="more"></a>
<p><strong>输出</strong></p>
<pre><code>skip(long n):26
available():26
markSupported():true
read():97
read(byte[]):25
bcdefghijklmnopqrstuvwxyz
</code></pre><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        FileInputStream in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//available()  int 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> in1<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long n) long 跳过和丢弃此输入流中数据的 n 个字节。</span>
        in1<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 从此输入流中读取一个数据字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span><span class="token operator">+</span>in1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 测试此输入流是否支持 mark 和 reset 方法。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> in1<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b) int 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(buffer):"</span> <span class="token operator">+</span> in1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b, int off, int len) int 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b, int off, int len):"</span> <span class="token operator">+</span> in1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getChannel() FileChannel 返回与此文件输入流有关的唯一 FileChannel 对象。</span>
        FileChannel finleChannel <span class="token operator">=</span> in1<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getFD() FileDescriptor 返回表示到文件系统中实际文件的连接的 FileDescriptor 对象，该文件系统正被此 FileInputStream 使用。</span>
        FileDescriptor fileDescriptor <span class="token operator">=</span> in1<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void  关闭此文件输入流并释放与此流有关的所有系统资源。</span>
        in1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>available():496800
read():55
markSupported():false
read(buffer):1024
read(byte[] b, int off, int len):512
</code></pre><p><strong>E:\Test.txt</strong></p>
<pre><code>1234567890123456789012345678901234567890......
</code></pre><h2 id="SequenceInputStream"><a href="#SequenceInputStream" class="headerlink" title="SequenceInputStream"></a>SequenceInputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        FileInputStream in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        ByteArrayInputStream bais1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>        

        SequenceInputStream sis1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceInputStream</span><span class="token punctuation">(</span>in1<span class="token punctuation">,</span> bais1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//available()  int 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> sis1<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 从此输入流中读取一个数据字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> sis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b) int 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b):"</span> <span class="token operator">+</span> sis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b, int off, int len) int 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b, int off, int len):"</span> <span class="token operator">+</span> sis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 测试此输入流是否支持 mark 和 reset 方法。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span>sis1<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此输入流并释放与此流关联的所有系统资源。</span>
        sis1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>available():10
read():49
read(byte[] b):9
read(byte[] b, int off, int len):26
markSupported():false
</code></pre><h2 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        BufferedInputStream bis1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//available()  int 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> bis1<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long n) long 跳过和丢弃此输入流中数据的 n 个字节。</span>
        bis1<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 从此输入流中读取一个数据字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span><span class="token operator">+</span>bis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 测试此输入流是否支持 mark 和 reset 方法。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> bis1<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//mark(int readAheadLimit) void 设置流中的当前标记位置。</span>
        bis1<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b) int 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(buffer):"</span> <span class="token operator">+</span> bis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b, int off, int len) int 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b, int off, int len):"</span> <span class="token operator">+</span> bis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset() void 将缓冲区的位置重置为标记位置。</span>
        bis1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reset():"</span><span class="token operator">+</span>bis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>available():496800
read():55
markSupported():true
read(buffer):1024
read(byte[] b, int off, int len):512
reset():56
</code></pre><h2 id="PushbackInputStream"><a href="#PushbackInputStream" class="headerlink" title="PushbackInputStream"></a>PushbackInputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        <span class="token keyword">final</span> PushbackInputStream pis1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushbackInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//available()  int 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> pis1<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long n) long 跳过和丢弃此输入流中数据的 n 个字节。</span>
        pis1<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 从此输入流中读取一个数据字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span><span class="token operator">+</span>pis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 测试此输入流是否支持 mark 和 reset 方法。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> pis1<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b) int 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(buffer):"</span> <span class="token operator">+</span> pis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b, int off, int len) int 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b, int off, int len):"</span> <span class="token operator">+</span> pis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//unread(byte[] b, int off, int len)  void 推回 byte 数组的某一部分：将其复制到推回缓冲区之前。 </span>
        pis1<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//unread(byte[] b) void  推回一个 byte 数组：将其复制到推回缓冲区之前。</span>
        pis1<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//unread(int b) void 推回一个字节：将其复制到推回缓冲区之前。</span>
        pis1<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此输入流并释放与此流关联的所有系统资源。</span>
        pis1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>available():496800
read():55
markSupported():false
read(buffer):1024
read(byte[] b, int off, int len):512
</code></pre><h2 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> ClassNotFoundException
    <span class="token punctuation">{</span>
        ObjectInputStream ois1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test5.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readObject() Object 从 ObjectInputStream 读取对象。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readObject():"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span>ois1<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//available() int 返回可以不受阻塞地读取的字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b) int 读入 byte 数组。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readByte():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] buf, int off, int len) int 读入 byte 数组</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] buf, int off, int len):"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 读取数据字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readBoolean() boolean 读取一个 boolean 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readBoolean():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readByte() byte 读取一个 8 位的字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readByte():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b):"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readChar() char 读取一个 16 位的 char 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readChar():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readChar():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long n) int 跳过和丢弃此输入流中数据的 n 个字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skip(long n):"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skipBytes(int len) int 跳过字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skipBytes(int len):"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readDouble() double 读取一个 64 位的 double 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readDouble():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readFloat() float 读取一个 32 位的 float 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readFloat():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readInt() int 读取一个 32 位的 int 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readInt():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readLong() long 读取一个 64 位的 long 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readLong():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readShort() short 读取一个 16 位的 short 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readShort():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readUnshared() Object 从 ObjectInputStream 读取“非共享”对象。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readUnshared():"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span>ois1<span class="token punctuation">.</span><span class="token function">readUnshared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readUTF() String 读取 UTF-8 修改版格式的 String。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readUTF():"</span> <span class="token operator">+</span> ois1<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭输入流。</span>
        ois1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>readObject():Sat Apr 23 21:12:41 CST 2016
available():116
readByte():26
read(byte[] buf, int off, int len):26
read():97
readBoolean():true
readByte():97
read(byte[] b):11
Hello World
readChar():a
readChar():H
skip(long n):10
skipBytes(int len):10
readDouble():1024.0
readFloat():1024.0
readInt():1024
readLong():1024
readShort():26
readUnshared():Sat Apr 23 21:12:41 CST 2016
readUTF():你好，世界
</code></pre><ul>
<li><strong>E:\Test5.txt</strong>为<a href="#ObjectOutputStream">ObjectOutputStream</a>输出</li>
</ul>
<h2 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a>DataInputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        DataInputStream dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test6.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//available() int 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b, int off, int len):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read() int 从此输入流中读取下一个数据字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//boolean 读取一个输入字节，如果该字节不是零，则返回 true，如果是零，则返回 false。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readBoolean():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readByte() byte 读取并返回一个输入字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readByte():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//read(byte[] b) int 从此输入流中将 byte.length 个字节的数据读入一个 byte 数组中</span>
        dis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read(byte[] b):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readChar() char 读取两个输入字节并返回一个 char 值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readChar():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skip(long n) long 跳过和丢弃此输入流中数据的 n 个字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skip(long n):"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//skipBytes(int n) int 试图在输入流中跳过数据的 n 个字节，并丢弃跳过的字节。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skipBytes(int n):"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readDouble() double 读取八个输入字节并返回一个 double 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readDouble():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readFloat() float 读取四个输入字节并返回一个 float 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readFloat():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readInt() int 读取四个输入字节并返回一个 int 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readInt():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readLong() long 读取八个输入字节并返回一个 long 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readLong():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readShort() short 读取两个输入字节并返回一个 short 值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readShort():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//readUTF() String  读入一个已使用 UTF-8 修改版格式编码的字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readUTF():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//markSupported() boolean 测试此输入流是否支持 mark 和 reset 方法</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"markSupported():"</span> <span class="token operator">+</span> dis<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此输入流并释放与此流关联的所有系统资源。</span>
        dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>available():94
read(byte[] b, int off, int len):abcdefghijklm
read():97
readBoolean():true
readByte():98
read(byte[] b):Hello World
readChar():c
skip(long n):11
skipBytes(int n):11
readDouble():99.9
readFloat():99.8
readInt():100
readLong():101
readShort():102
readUTF():你好，世界
markSupported():false
</code></pre><ul>
<li><strong>E:\Test6.txt</strong>为<a href="#DataOutputStream">DataOutputStream</a>输出</li>
</ul>
<h2 id="PipedInputStream与PipedOutputStream"><a href="#PipedInputStream与PipedOutputStream" class="headerlink" title="PipedInputStream与PipedOutputStream"></a>PipedInputStream与PipedOutputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> Exception  
    <span class="token punctuation">{</span>  
        PipedInputStream pis1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        PipedOutputStream pos1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment" spellcheck="true">//connect(PipedInputStream snk) void 将此管道输出流连接到接收者。</span>
        pis1<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>pos1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ReadThread readTh   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadThread</span><span class="token punctuation">(</span>pis1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        WriteThread writeTh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteThread</span><span class="token punctuation">(</span>pos1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>readTh<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>writeTh<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  

<span class="token keyword">class</span> <span class="token class-name">ReadThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">private</span> PipedInputStream pis<span class="token punctuation">;</span>  
    <span class="token function">ReadThread</span><span class="token punctuation">(</span>PipedInputStream pis<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//  </span>
    <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>pis<span class="token operator">=</span>pis<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//由于必须要覆盖run方法,所以这里不能抛,只能try  </span>
    <span class="token punctuation">{</span>  
        <span class="token keyword">try</span>  
        <span class="token punctuation">{</span>  
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PipedInputStream:读取前没有数据,阻塞中...等待数据传过来再输出到控制台..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//available() int 返回可以不受阻塞地从此输入流中读取的字节数。</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"available():"</span> <span class="token operator">+</span> pis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//read(byte[] b) int 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b中</span>
            pis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PipedInputStream:读取数据成功,阻塞解除..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将读取的数据流用字符串以字符串打印出来  </span>
            <span class="token comment" spellcheck="true">//read() int 读取此管道输入流中的下一个数据字节。</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//read(byte[] b, int off, int len) int 将最多 len 个数据字节从此管道输入流读入 byte 数组。</span>
            pis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//markSupported() boolean 测试此输入流是否支持 mark 和 reset 方法。</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pis<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//close() int 关闭此管道输入流并释放与该流相关的所有系统资源。</span>
            pis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
        <span class="token punctuation">}</span>  
        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"PipedInputStream:管道读取流失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>     
    <span class="token punctuation">}</span>  

<span class="token punctuation">}</span>  

<span class="token keyword">class</span> <span class="token class-name">WriteThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">private</span> PipedOutputStream pos<span class="token punctuation">;</span>  
    <span class="token function">WriteThread</span><span class="token punctuation">(</span>PipedOutputStream pos<span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token operator">=</span>  pos<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">try</span>  
        <span class="token punctuation">{</span>

            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PipedOutputStream:开始将数据写入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//write(byte[] b) void 将 b.length 个字节从指定的 byte 数组写入此输出流。</span>
            pos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//write(int b) void 将指定 byte 写入传送的输出流。</span>
            pos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment" spellcheck="true">//write(byte[] b, int off, int len) void 将 len 字节从初始偏移量为 off 的指定 byte 数组写入该管道输出流。</span>
            pos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//flush() void 刷新此输出流并强制写出所有缓冲的输出字节。</span>
            pos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//close() void 关闭此管道输出流并释放与此流有关的所有系统资源。</span>
            pos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"PipedOutputStream:WriteThread写入失败..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>PipedInputStream:读取前没有数据,阻塞中...等待数据传过来再输出到控制台...
PipedOutputStream:开始将数据写入
available():0
PipedInputStream:读取数据成功,阻塞解除...
ABCDEFGHIJKLMNOPQRSTUVWXYZ
97
ABCDEFGHIJKLM
</code></pre><h2 id="ByteArrayOutputStream"><a href="#ByteArrayOutputStream" class="headerlink" title="ByteArrayOutputStream"></a>ByteArrayOutputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int b) void 将指定的字节写入此 byte 数组输出流。</span>
        baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//write(byte[] b) void 将 b.length 个字节从指定的 byte数组写入此输出流。</span>
        baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(byte[] b, int off, int len) void 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此 byte 数组输出流。</span>
        baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toString(String charsetName) String 使用指定的 charsetName，通过解码字节将缓冲区内容转换为字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toByteArray() byte[] 创建一个新分配的 byte 数组。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//size() int 返回缓冲区的当前大小。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset() void 将此 byte 数组输出流的 count 字段重置为零，从而丢弃输出流中目前已累积的所有输出。</span>
        baos<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeTo(OutputStream out) void 将此 byte 数组输出流的全部内容写入到指定的输出流参数中，这与使用 out.write(buf, 0, count) 调用该输出流的 write 方法效果一样。</span>
        baos<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test7.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新此输出流并强制写出所有缓冲的输出字节。</span>
        baos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此输出流并释放与此流有关的所有系统资源</span>
        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>aabcdefghijklmnopqrstuvwxyzabcdefghijklm
aabcdefghijklmnopqrstuvwxyzabcdefghijklm
40
</code></pre><h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test7.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//write(byte[] b) void 将 b.length 个字节从指定 byte 数组写入此文件输出流中。</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int b) void 将指定字节写入此文件输出流。</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(byte[] b, int off, int len) void 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流。</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getChannel() FileChannel  返回与此文件输出流有关的唯一 FileChannel 对象。</span>
        fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getFD() FileDescriptor 返回与此流有关的文件描述符。</span>
        fos<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新此输出流并强制写出所有缓冲的输出字节。</span>
        fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此输出流并释放与此流有关的所有系统资源。</span>
        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test7.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//write(byte[] b) void 将 b.length 个字节从指定 byte 数组写入此文件输出流中。</span>
        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int b) void 将指定字节写入此文件输出流。</span>
        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(byte[] b, int off, int len) void 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流。</span>
        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新此缓冲的输出流。</span>
        bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此输出流并释放与此流有关的所有系统资源。</span>
        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> IOException
    <span class="token punctuation">{</span>
        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test5.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//writeObject(Object obj) void 将指定的对象写入 ObjectOutputStream。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reset() void 重置将丢弃已写入流中的所有对象的状态。</span>
        oos<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//write(byte[] buf) void 写入一个 byte 数组。 void 写入一个 byte数组。</span>
        oos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(byte[] buf, int off, int len)  void 写入字节的子数组。 </span>
        oos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int val) void 写入一个字节。 </span>
        oos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeBoolean(boolean val) void 写入一个 boolean值。 </span>
        oos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeByte(int val) void 写入一个 8 位字节。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeBytes(String str) void 以字节序列形式写入一个 String。 </span>
        oos<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeChar(int val) void 写入一个 16 位的 char值。 v</span>
        oos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeChars(String str) void 以 char 序列形式写入一个 String。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeChars</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeDouble(double val) void 写入一个 64 位的 double 值。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeFloat(float val) void 写入一个 32 位的 float 值。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token number">1024f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeInt(int val) void  写入一个 32 位的 int值。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeLong(long val) void 写入一个 64 位的 long 值。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>1024l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeShort(int val) void 写入一个 16 位的 short 值。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeUnshared(Object obj) void 将“未共享”对象写入 ObjectOutputStream。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeUnshared</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeUTF(String str) void 以 UTF-8 修改版格式写入此 String 的基本数据。</span>
        oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 刷新该流的缓冲。</span>
        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭流。</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="DataOutputStream"><a href="#DataOutputStream" class="headerlink" title="DataOutputStream"></a>DataOutputStream</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        DataOutputStream dos1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\Test6.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bytes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//write(byte[] b, int off, int len) void 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入基础输出流。</span>
        dos1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(int b) void 将指定字节（参数 b 的八个低位）写入基础输出流。</span>
        dos1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeBoolean(boolean v) void 将一个 boolean 值以 1-byte 值形式写入基础输出流。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeByte(int v) void 将一个 byte 值以 1-byte 值形式写出到基础输出流中。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeBytes(String s) void  将字符串按字节顺序写出到基础输出流中。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeChar(int v) void 将一个 char 值以 2-byte 值形式写入基础输出流中，先写入高字节。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeChars(String s) void 将字符串按字符顺序写入基础输出流。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeChars</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeDouble(double v) void 使用 Double 类中的 doubleToLongBits 方法将 double 参数转换为一个 long 值，然后将该 long 值以 8-byte 值形式写入基础输出流中，先写入高字节。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">99.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeFloat(float v) void 使用 Float 类中的 floatToIntBits 方法将 float 参数转换为一个 int 值，然后将该 int 值以 4-byte 值形式写入基础输出流中，先写入高字节。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token number">99.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeInt(int v) void 将一个 int 值以 4-byte 值形式写入基础输出流中，先写入高字节。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeLong(long v) void 将一个 long 值以 8-byte 值形式写入基础输出流中，先写入高字节。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>101l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeShort(int v) void 将一个 short 值以 2-byte 值形式写入基础输出流中，先写入高字节。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//writeUTF(String str) void 以与机器无关方式使用 UTF-8 修改版编码将一个字符串写入基础输出流。</span>
        dos1<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//size() int 返回计数器 written 的当前值，即到目前为止写入此数据输出流的字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size():"</span> <span class="token operator">+</span> dos1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flush() void 清空此数据输出流。</span>
        dos1<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//write(byte[] b) void 将 b.length 个字节写入此输出流。 </span>
        dos1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//close() void 关闭此输出流并释放与此流有关的所有系统资源。 </span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ByteArrayInputStream&quot;&gt;&lt;a href=&quot;#ByteArrayInputStream&quot; class=&quot;headerlink&quot; title=&quot;ByteArrayInputStream&quot;&gt;&lt;/a&gt;ByteArrayInputStream&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Test
{
    public static void main(String[] args) throws IOException
    {
        byte[] bytes1 = new byte[52];
        for(int i = 0;i &amp;lt; bytes1.length;i++)
        {
            bytes1[i] = (byte) (&amp;#39;a&amp;#39; + i%26);
        }

        ByteArrayInputStream bais1 = new ByteArrayInputStream(bytes1);
        //skip(long n) long 从此输入流中跳过 n 个输入字节。
        System.out.println(&amp;quot;skip(long n):&amp;quot; + bais1.skip(256));
        //available() int 返回可从此输入流读取（或跳过）的剩余字节数。
        System.out.println(&amp;quot;available():&amp;quot; + bais1.available());
        //markSupported() boolean 测试此 InputStream 是否支持 mark/reset。
        System.out.println(&amp;quot;markSupported():&amp;quot; + bais1.markSupported());
        //mark(int readAheadLimit) void 设置流中的当前标记位置。
        bais1.mark(512);
        //read() int 从此输入流中读取下一个数据字节。
        System.out.println(&amp;quot;read():&amp;quot; + bais1.read());
        byte[] bytes2 = new byte[512];
        //read(byte[] int 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。
        System.out.println(&amp;quot;read(byte[]):&amp;quot; + bais1.read(bytes2));
        System.out.println(new String(bytes2));
        //read(byte[] b, int off, int len) int 将最多 len 个数据字节从此输入流读入 byte 数组。
        System.out.println(&amp;quot;read(byte[] b, int off, int len):&amp;quot; + bais1.read(bytes2, 0, 128));
        System.out.println(new String(bytes2));
        //reset() void 将缓冲区的位置重置为标记位置。
        bais1.reset();
        System.out.println(&amp;quot;reset():&amp;quot; + bais1.available());
        //close() void 关闭 ByteArrayInputStream
        bais1.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="IO" scheme="https://luoweiguang.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO（一）：分类</title>
    <link href="https://luoweiguang.github.io/2016/04/25/JavaIO%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%86%E7%B1%BB/"/>
    <id>https://luoweiguang.github.io/2016/04/25/JavaIO（一）：分类/</id>
    <published>2016-04-25T11:00:00.000Z</published>
    <updated>2017-08-06T09:45:21.875Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/20160425000001.png" alt=""></p>
 <a id="more"></a>
<h2 id="Java流的分类"><a href="#Java流的分类" class="headerlink" title="Java流的分类"></a>Java流的分类</h2><ol>
<li><p>按流向分:<br>输入流: 程序可以从中读取数据的流。<br>输出流: 程序能向其中写入数据的流。</p>
</li>
<li><p>按数据传输单位分:<br>字节流: 以字节为单位传输数据的流<br>字符流: 以字符为单位传输数据的流</p>
</li>
</ol>
<h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><p><img src="/img/20160425000002.png" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">类</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#ByteArrayInputStream">ByteArrayInputStream</a></td>
<td style="text-align:center">允许将内存的缓冲区当做InputStream使用</td>
</tr>
<tr>
<td style="text-align:center">StringBufferInputStream(已过时)</td>
<td style="text-align:center">将String转换成InputStream</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#FileInputStream">FileInputStream</a></td>
<td style="text-align:center">用于从文件中读取信息</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#PipedInputStream与PipedOutputStream">PipedInputStream</a></td>
<td style="text-align:center">产生用于写入相关PipedOutputStream的数据。实现管道化概念</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#SequenceInputStream">SequenceInputStream</a></td>
<td style="text-align:center">将两个或多个InputStream对象转换成单一InputStream</td>
</tr>
<tr>
<td style="text-align:center">FilterInputStream</td>
<td style="text-align:center">抽象类，作为”装饰器的”接口。其中”装饰器”为其他的InputStream类提供有用功能</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#BufferedInputStream">BufferedInputStream</a></td>
<td style="text-align:center">BufferedInputStream 为另一个输入流添加一些功能，即缓冲输入以及支持 mark 和 reset 方法的能力。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#DataInputStream">DataInputStream</a></td>
<td style="text-align:center">DataInputStream允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。</td>
</tr>
<tr>
<td style="text-align:center">LineNumberInputStream(已过时)</td>
<td style="text-align:center">此类是一个输入流过滤器，它提供跟踪当前行号的附加功能。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#PushbackInputStream">PushbackInputStream</a></td>
<td style="text-align:center">PushbackInputStream 为另一个输入流添加性能，即“推回 (push back)”或“取消读取 (unread)”一个字节的能力。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#ObjectInputStream">ObjectInputStream</a></td>
<td style="text-align:center">对以前使用 ObjectOutputStream 写入的基本数据和对象进行反序列化。</td>
</tr>
</tbody>
</table>
<h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><p><img src="/img/20160425000003.png" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">类</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#ByteArrayOutputStream">ByteArrayOutputStream</a></td>
<td style="text-align:center">在内存中创建缓冲区。所有送往“流”的数据都要放置在 此缓冲区</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#FileOutputStream">FileOutputStream</a></td>
<td style="text-align:center">用于将信息写入文件</td>
</tr>
<tr>
<td style="text-align:center">FilterOutputStream</td>
<td style="text-align:center">抽象类，作为”装饰器的”接口。其中”装饰器”为其他的InputStream类提供有用功能</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#ObjectOutputStream">ObjectOutputStream</a></td>
<td style="text-align:center">ObjectOutputStream 将 Java 对象的基本数据类型和图形写入 OutputStream。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#PipedInputStream与PipedOutputStream">PipedOutputStream</a></td>
<td style="text-align:center">任何写入其中的信息都会自动作为相关PipedInputStream的输出。实现”管道化”概念</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#BufferedOutputStream">BufferedOutputStream</a></td>
<td style="text-align:center">该类实现缓冲的输出流。通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/26/JavaIO（二）：InputStream与OutputStream/#DataOutputStream">DataOutputStream</a></td>
<td style="text-align:center">数据输出流允许应用程序以适当方式将基本 Java 数据类型写入输出流中。然后，应用程序可以使用数据输入流将数据读入。</td>
</tr>
<tr>
<td style="text-align:center">PrintStream</td>
<td style="text-align:center">PrintStream 为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</td>
</tr>
</tbody>
</table>
<h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><p><img src="/img/20160425000005.png" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">类</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#BufferedWriter">BufferedWriter</a></td>
<td style="text-align:center">将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#CharArrayWriter">CharArrayWriter</a></td>
<td style="text-align:center">此类实现一个可用作 Writer 的字符缓冲区。</td>
</tr>
<tr>
<td style="text-align:center">FilterWriter</td>
<td style="text-align:center">用于写入已过滤的字符流的抽象类。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#OutputStreamWriter">OutputStreamWriter</a></td>
<td style="text-align:center">OutputStreamWriter 是字符流通向字节流的桥梁</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#FileWriter">FileWriter</a></td>
<td style="text-align:center">用来写入字符文件的便捷类。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#PipedReader与PipedWriter">PipedWriter</a></td>
<td style="text-align:center">传送的字符输出流。</td>
</tr>
<tr>
<td style="text-align:center">PrintWriter</td>
<td style="text-align:center">向文本输出流打印对象的格式化表示形式。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#StringWriter">StringWriter</a></td>
<td style="text-align:center">一个字符流，可以用其回收在字符串缓冲区中的输出来构造字符串。</td>
</tr>
</tbody>
</table>
<h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><p><img src="/img/20160425000004.png" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">类</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#BufferedReader">BufferedReader</a></td>
<td style="text-align:center">字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取</td>
</tr>
<tr>
<td style="text-align:center">LineNumberReader</td>
<td style="text-align:center">跟踪行号的缓冲字符输入流</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#CharArrayReader">CharArrayReader</a></td>
<td style="text-align:center">此类实现一个可用作字符输入流的字符缓冲区。</td>
</tr>
<tr>
<td style="text-align:center">FilterReader</td>
<td style="text-align:center">用于读取已过滤的字符流的抽象类</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#PushbackReader">PushbackReader</a></td>
<td style="text-align:center">允许将字符推回到流的字符流 reader</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#InputStreamReader">InputStreamReader</a></td>
<td style="text-align:center">InputStreamReader 是字节流通向字符流的桥梁</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#FileReader">FileReader</a></td>
<td style="text-align:center">用来读取字符文件的便捷类</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#PipedReader与PipedWriter">PipedReader</a></td>
<td style="text-align:center">传送的字符输入流。</td>
</tr>
<tr>
<td style="text-align:center"><a href="/2016/04/28/JavaIO（三）：Reader与Writer/#StringReader">StringReader</a></td>
<td style="text-align:center">其源为一个字符串的字符流。</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/20160425000001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="IO" scheme="https://luoweiguang.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>URI、URL</title>
    <link href="https://luoweiguang.github.io/2016/04/19/URI%E3%80%81URL/"/>
    <id>https://luoweiguang.github.io/2016/04/19/URI、URL/</id>
    <published>2016-04-19T02:00:00.000Z</published>
    <updated>2017-08-06T09:15:14.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>URI（uniform resource identifier）统一资源标识符<br>URL（uniform resource locator）统一资源定位器</p>
<p>URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置</p>
<p>●在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。相反的是，URL类可以打开一个到达资源的流。因此URL类只能作用于那些 Java类库知道该如何处理的模式，例如http：，https：，ftp：，本地文件系统(file：)，和Jar文件(jar：)。</p>
 <a id="more"></a>
<p>●URI一般由三部组成<br>①访问资源的命名机制<br>②存放资源的主机名<br>③资源自身的名称，由路径表示，着重强调于资源。</p>
<p>●URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。<br>URL一般由三部组成<br>①协议(或称为服务方式)<br>②存有该资源的主机IP地址(有时也包括端口号)<br>③主机资源的具体地址。如目录和文件名等</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><strong>URI的结构:</strong><br><strong>[Scheme:][SchemeSpecificPart][#fragment]</strong><br>                ||<br><strong>[Scheme:][//Authority][path][?query][#fragment]</strong><br>                ||<br><strong>[scheme:][//userinfo@][host][:port][path][?query][#fragment]</strong></p>
<p><strong>URL的结构</strong><br><strong>[Protocol:][//Authority][File][#Ref]</strong><br>                ||<br><strong>[Protocol:][//userinfo@][host][:port][?query][#Ref]</strong></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>URI</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> URISyntaxException<span class="token punctuation">,</span> MalformedURLException
    <span class="token punctuation">{</span>
        String str <span class="token operator">=</span> <span class="token string">"http://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR#122345"</span><span class="token punctuation">;</span>

        URI uri1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span><span class="token string">"//www.baidu.com:8080/123?asd=123"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"/123"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"/123"</span><span class="token punctuation">,</span><span class="token string">"asd=123"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"Test%E4%B8%AD%E6%96%87"</span><span class="token punctuation">,</span>  <span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span>  <span class="token number">8080</span><span class="token punctuation">,</span><span class="token string">"/123"</span><span class="token punctuation">,</span><span class="token string">"asd=123"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"x/../123/../456?asd=123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"mailto:java-net@java.sun.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//compareTo(URI that) int 将此 URI 与另一个对象（也必须是 URI）进行比较。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo(URI that):"</span> <span class="token operator">+</span> uri4<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>uri5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//create(String str) static URI 通过解析给定的字符串创建 URI。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create(String str):"</span> <span class="token operator">+</span> URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//equals(Object ob) boolean 测试此 URI 与另一对象的相等性。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals(Object ob):"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getAuthority() String 返回此 URI 的已解码的授权组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getAuthority():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getFragment() String  返回此 URI 的已解码的片段组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getFragment():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getHost() String  返回此 URI 的主机组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getHost():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getPath() String  返回此 URI 的已解码的路径组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getPath():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getPort() int 返回此 URI 的端口号。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getPort():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getQuery() String 返回此 URI 的已解码的查询组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getQuery():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getRawAuthority() String 返回此 URI 的原始授权组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getRawAuthority():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getRawAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getRawFragment() String 返回此 URI 的原始片段组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getRawFragment():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getRawFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getRawPath() String 返回此 URI 的原始路径组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getRawPath():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getRawQuery() String 返回此 URI 的原始查询组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getRawQuery():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getRawQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getRawSchemeSpecificPart() String 返回此 URI 原始的、特定于方案的部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getRawSchemeSpecificPart():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getRawSchemeSpecificPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getRawUserInfo() String 返回此 URI 的原始用户信息组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getRawUserInfo():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getRawUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getScheme() String 返回此 URI 的方案组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getScheme():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getSchemeSpecificPart() String 返回此 URI 的特定于方案的解码部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSchemeSpecificPart():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getSchemeSpecificPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getUserInfo() String  返回此 URI 的已解码的用户信息组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getUserInfo():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//hashCode() int  返回此 URI 的哈希码值。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hashCode():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//isAbsolute() boolean  判断此 URI 是否为绝对的。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isAbsolute():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//isOpaque() boolean 判断此 URI 是否为不透明的。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isOpaque():"</span> <span class="token operator">+</span> uri8<span class="token punctuation">.</span><span class="token function">isOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//normalize()  URI 规范化此 URI 的路径。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"normalize():"</span> <span class="token operator">+</span> uri7<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//parseServerAuthority()  URI 尝试将此 URI 的授权组成部分（如果已定义）解析为用户信息、主机和端口组成部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseServerAuthority():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">parseServerAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//relativize(URI uri)  URI 根据此 URI 将给定 URI 相对化。 即把传入去除的URI路径去掉相同的部分</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"relativize(URI uri):"</span> <span class="token operator">+</span> uri3<span class="token punctuation">.</span><span class="token function">relativize</span><span class="token punctuation">(</span>uri4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//resolve(String str)  URI 解析给定的字符串，然后在此 URI 的基础上构造一个新的 URI。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resolve(String str):"</span> <span class="token operator">+</span> uri6<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"/123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//resolve(URI uri)   URI 根据此 URI 解析给定的 URI。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resolve(URI uri):"</span> <span class="token operator">+</span> uri4<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>uri3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toASCIIString()  String 以 US-ASCII 字符串形式返回此 URI 的内容。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toASCIIString():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">toASCIIString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toString()  String 以字符串形式返回此 URI 的内容。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toURL()  URL 根据此 URI 构造一个 URL。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toURL():"</span> <span class="token operator">+</span> uri1<span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>结果</strong></p>
<pre><code>http://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR#122345
http://www.baidu.com:8080/123?asd=123#123
http://www.baidu.com/123#123
http://www.baidu.com/123?asd=123#123
http://Test%25E4%25B8%25AD%25E6%2596%2587@www.baidu.com:8080/123?asd=123#123
compareTo(URI that):-1
create(String str):http://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR#122345
equals(Object ob):true
getAuthority():Test中文@user.qzone.qq.com:8080
getFragment():122345
getHost():user.qzone.qq.com
getPath():/123456/Test中文
getPort():8080
getQuery():ptsig=中文Test/oR
getRawAuthority():Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080
getRawFragment():122345
getRawPath():/123456/Test%E4%B8%AD%E6%96%87
getRawQuery():ptsig=%E4%B8%AD%E6%96%87Test/oR
getRawSchemeSpecificPart()://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR
getRawUserInfo():Test%E4%B8%AD%E6%96%87
getScheme():http
getSchemeSpecificPart()://Test中文@user.qzone.qq.com:8080/123456/Test中文?ptsig=中文Test/oR
getUserInfo():Test中文
hashCode():1143769884
isAbsolute():true
isOpaque():true
normalize():456?asd=123
parseServerAuthority():http://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR#122345
relativize(URI uri):?asd=123#123
resolve(String str):http://www.baidu.com/123
resolve(URI uri):http://www.baidu.com/123#123
toASCIIString():http://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR#122345
toString():http://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR#122345
toURL():http://Test%E4%B8%AD%E6%96%87@user.qzone.qq.com:8080/123456/Test%E4%B8%AD%E6%96%87?ptsig=%E4%B8%AD%E6%96%87Test/oR#122345
</code></pre><p><strong>URL</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> URISyntaxException
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//根据 String 表示形式创建 URL 对象。</span>
        URL url1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://hao.360.cn:80/?src=360c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//根据指定的 protocol 名称、host 名称和 file 名称创建 URL。</span>
        URL url2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"wwww.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"/123?asd=123#123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//根据指定 protocol、host、port 号和 file 创建 URL 对象。</span>
        URL url3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"baidu?&amp;ie=utf-8&amp;word="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//根据指定的 protocol、host、port 号、file 和 handler 创建 URL 对象。</span>
        URL url4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"wwww.baidu.com"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"baidu?&amp;ie=utf-8&amp;word=123"</span><span class="token punctuation">,</span>null <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//使用基地址和相对URL创建。</span>
        URL url5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url2<span class="token punctuation">,</span> <span class="token string">"/123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url2<span class="token punctuation">,</span> <span class="token string">"/123"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://www.weather.com.cn/data/cityinfo/101010100.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//equals(Object obj) boolean 比较此 URL 是否等于另一个对象。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals(Object obj):"</span> <span class="token operator">+</span> url5<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getAuthority() String  获取此 URL 的授权部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getAuthority():"</span> <span class="token operator">+</span> url1<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getContent() Object 获取此 URL 的内容。</span>
        InputStream in <span class="token operator">=</span> <span class="token punctuation">(</span>InputStream<span class="token punctuation">)</span> url7<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getContent():"</span> <span class="token operator">+</span> <span class="token function">inputStream2String</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getDefaultPort() int 获取与此 URL关联协议的默认端口号。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDefaultPort():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getDefaultPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getFile() String 获取此 URL的文件名。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getFile():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getHost() String 获取此 URL的主机名（如果适用）。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getHost():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getPath() String  获取此 URL 的路径部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getPath():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getPort() int 获取此 URL的端口号。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getPort():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getProtocol() String 获取此 URL的协议名称。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getProtocol():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getQuery() String  获取此 URL的查询部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getQuery():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getRef() String 获取此 URL 的锚点（也称为“引用”）。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getRef():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getUserInfo() String 获取此 URL 的 userInfo 部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getUserInfo():"</span> <span class="token operator">+</span> url2<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//hashCode() int 创建一个适合哈希表索引的整数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hashCode():"</span> <span class="token operator">+</span> url1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//openConnection()  URLConnection 返回一个 URLConnection 对象，它表示到 URL 所引用的远程对象的连接。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"openConnection():"</span> <span class="token operator">+</span> url1<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//openConnection(Proxy proxy)  URLConnection 与 openConnection() 类似，所不同是连接通过指定的代理建立；不支持代理方式的协议处理程序将忽略该代理参数并建立正常的连接。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"openConnection(Proxy proxy):"</span> <span class="token operator">+</span> url1<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span>Proxy<span class="token punctuation">.</span>NO_PROXY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//openStream()  InputStream 打开到此 URL 的连接并返回一个用于从该连接读入的 InputStream。</span>
        InputStream in2 <span class="token operator">=</span>  url7<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"openStream():"</span> <span class="token operator">+</span> <span class="token function">inputStream2String</span><span class="token punctuation">(</span>in2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//sameFile(URL other) boolean 比较两个 URL，不包括片段部分。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sameFile(URL other):"</span> <span class="token operator">+</span> url3<span class="token punctuation">.</span><span class="token function">sameFile</span><span class="token punctuation">(</span>url4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toExternalForm() String 构造此 URL 的字符串表示形式。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toExternalForm():"</span> <span class="token operator">+</span> url1<span class="token punctuation">.</span><span class="token function">toExternalForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toString() String 构造此 URL的字符串表示形式。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString():"</span> <span class="token operator">+</span> url1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toURI() URI 返回与此 URL 等效的 URI</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toURI():"</span> <span class="token operator">+</span> url1<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> String <span class="token function">inputStream2String</span><span class="token punctuation">(</span>InputStream is<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>
        BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StringBuffer buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>结果</strong></p>
<pre><code>equals(Object obj):true
getAuthority():hao.360.cn:80
getContent():{&quot;weatherinfo&quot;:{&quot;city&quot;:&quot;北京&quot;,&quot;cityid&quot;:&quot;101010100&quot;,&quot;temp1&quot;:&quot;-2℃&quot;,&quot;temp2&quot;:&quot;16℃&quot;,&quot;weather&quot;:&quot;晴&quot;,&quot;img1&quot;:&quot;n0.gif&quot;,&quot;img2&quot;:&quot;d0.gif&quot;,&quot;ptime&quot;:&quot;18:00&quot;}}
getDefaultPort():80
getFile():/123?asd=123
getHost():wwww.baidu.com
getPath():/123
getPort():-1
getProtocol():http
getQuery():asd=123
getRef():123
getUserInfo():null
hashCode():-1412650423
openConnection():sun.net.www.protocol.https.DelegateHttpsURLConnection:https://hao.360.cn:80/?src=360c
openConnection(Proxy proxy):sun.net.www.protocol.https.DelegateHttpsURLConnection:https://hao.360.cn:80/?src=360c
openStream():{&quot;weatherinfo&quot;:{&quot;city&quot;:&quot;北京&quot;,&quot;cityid&quot;:&quot;101010100&quot;,&quot;temp1&quot;:&quot;-2℃&quot;,&quot;temp2&quot;:&quot;16℃&quot;,&quot;weather&quot;:&quot;晴&quot;,&quot;img1&quot;:&quot;n0.gif&quot;,&quot;img2&quot;:&quot;d0.gif&quot;,&quot;ptime&quot;:&quot;18:00&quot;}}
sameFile(URL other):false
toExternalForm():https://hao.360.cn:80/?src=360c
toString():https://hao.360.cn:80/?src=360c
toURI():https://hao.360.cn:80/?src=360c
</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/kobejayandy/article/details/9908233" target="_blank" rel="external">URI和URL有什么区别</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;URI（uniform resource identifier）统一资源标识符&lt;br&gt;URL（uniform resource locator）统一资源定位器&lt;/p&gt;
&lt;p&gt;URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置&lt;/p&gt;
&lt;p&gt;●在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。相反的是，URL类可以打开一个到达资源的流。因此URL类只能作用于那些 Java类库知道该如何处理的模式，例如http：，https：，ftp：，本地文件系统(file：)，和Jar文件(jar：)。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="网络" scheme="https://luoweiguang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>File、FileFilter、FilenameFilter</title>
    <link href="https://luoweiguang.github.io/2016/04/17/File%E3%80%81FileFilter%E3%80%81FilenameFilter/"/>
    <id>https://luoweiguang.github.io/2016/04/17/File、FileFilter、FilenameFilter/</id>
    <published>2016-04-17T12:00:00.000Z</published>
    <updated>2017-08-06T09:47:43.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>FileFilter和FilenameFilter都是文件过滤器，都是一个接口，只有方法accept(),accept返回true表示符合所需文件标准，要过滤掉的文件则返回false</p>
 <a id="more"></a>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileFilter</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FilenameFilter</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//dir表示文件的当前目录，name表示文件名；</span>
    <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> URISyntaxException<span class="token punctuation">,</span> IOException
    <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">//通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例</span>
        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。</span>
        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file1<span class="token punctuation">,</span> <span class="token string">"Test2.rar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过将给定的 file: URI 转换为一个抽象路径名来创建一个新的 File 实例。</span>
        URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"file:///E:/Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。</span>
        File file4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\"</span><span class="token punctuation">,</span> <span class="token string">"Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File file5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\"</span><span class="token punctuation">,</span> <span class="token string">"Test3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File file6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File file7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//canExecute() boolean 测试应用程序是否可以执行此抽象路径名表示的文件</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"canExecute():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">canExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//canRead() boolean 测试应用程序是否可以读取此抽象路径名表示的文件</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"canRead():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//canWrite() boolean 测试应用程序是否可以修改此抽象路径名表示的文件</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"canWrite():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//compareTo(File pathname) int 按字母顺序比较两个抽象路径名。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo(File pathname):"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//createNewFile() boolean 当且仅当不存在具有此抽象路径名指定名称的文件时，不可分地创建一个新的空文件。 ture 表示新建成功</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"createNewFile():"</span> <span class="token operator">+</span> file5<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//createTempFile(String prefix, String suffix) static File 在默认临时文件目录中创建一个空文件，使用给定前缀和后缀生成其名称。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"createTempFile(String prefix, String suffix):"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//createTempFile(String prefix, String suffix, File directory) static File 在指定目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"createTempFile(String prefix, String suffix, File directory):"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"txt"</span><span class="token punctuation">,</span> file1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//delete() boolean 删除此抽象路径名表示的文件或目录。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete():"</span> <span class="token operator">+</span> file5<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//deleteOnExit() void 在虚拟机终止时，请求删除此抽象路径名表示的文件或目录。</span>
        file5<span class="token punctuation">.</span><span class="token function">deleteOnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deleteOnExit():"</span> <span class="token operator">+</span> file5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//equals(Object obj) boolean 测试此抽象路径名与给定对象是否相等。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals(Object obj):"</span> <span class="token operator">+</span> file3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>file4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//exists() boolean 测试此抽象路径名表示的文件或目录是否存在。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exists():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getAbsoluteFile() File 返回此抽象路径名的绝对路径名形式。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getAbsoluteFile():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getAbsolutePath() String 返回此抽象路径名的绝对路径名字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getAbsolutePath():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getCanonicalFile() File 返回此抽象路径名的规范形式。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getCanonicalFile():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getCanonicalPath()  String 返回此抽象路径名的规范路径名字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getCanonicalPath():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getFreeSpace() long 返回此抽象路径名指定的分区中未分配的字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getFreeSpace():"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">getFreeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getName()  String 返回由此抽象路径名表示的文件或目录的名称。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getName():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getParent() String 返回此抽象路径名父目录的路径名字符串；如果此路径名没有指定父目录，则返回 null。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getParent():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getParentFile() File  返回此抽象路径名父目录的抽象路径名；如果此路径名没有指定父目录，则返回 null。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getParentFile():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getPath()  String 将此抽象路径名转换为一个路径名字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getPath():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getTotalSpace() long 返回此抽象路径名指定的分区大小。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getTotalSpace():"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getUsableSpace() long 返回此抽象路径名指定的分区上可用于此虚拟机的字节数。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getUsableSpace():"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//hashCode() int 计算此抽象路径名的哈希码。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hashCode():"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//isAbsolute() boolean 测试此抽象路径名是否为绝对路径名。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isAbsolute():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//isDirectory()  boolean 测试此抽象路径名表示的文件是否是一个目录。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isDirectory():"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//isFile() boolean 测试此抽象路径名表示的文件是否是一个标准文件。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isFile():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//isHidden() boolean 测试此抽象路径名指定的文件是否是一个隐藏文件。  假如是文件夹会返回ture</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isHidden():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//lastModified() long 返回此抽象路径名表示的文件最后一次被修改的时间。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastModified():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//length() long 返回由此抽象路径名表示的文件的长度。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"length():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//list()  String[] 返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中的文件和目录。</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs1 <span class="token operator">=</span> file6<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> strs1<span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list():"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//list(FilenameFilter filter)  String[] 返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中满足指定过滤器的文件和目录。</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs2 <span class="token operator">=</span> file6<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> strs2<span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list(FilenameFilter filter):"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//listFiles()  File[] 返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。</span>
        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files1 <span class="token operator">=</span> file6<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> files1<span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"listFiles():"</span> <span class="token operator">+</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//listFiles(FileFilter filter)  File[] 返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。</span>
        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files2 <span class="token operator">=</span> file6<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File pathname<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> files2<span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"listFiles(FileFilter filter):"</span> <span class="token operator">+</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//listFiles(FilenameFilter filter)  File[] 返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。</span>
        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files3 <span class="token operator">=</span> file6<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> files3<span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"listFiles(FilenameFilter filter):"</span> <span class="token operator">+</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//listRoots() static File[] 列出可用的文件系统根。</span>
        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files4 <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">listRoots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> files4<span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"listRoots():"</span> <span class="token operator">+</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//mkdir() boolean  创建此抽象路径名指定的目录。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mkdir():"</span> <span class="token operator">+</span> file6<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//mkdirs() boolean 创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mkdirs():"</span> <span class="token operator">+</span> file6<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//renameTo(File dest) boolean 重新命名此抽象路径名表示的文件。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"renameTo(File dest):"</span> <span class="token operator">+</span> file5<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>file3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setExecutable(boolean executable) boolean 设置此抽象路径名所有者执行权限的一个便捷方法。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setExecutable(boolean executable):"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">setExecutable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setExecutable(boolean executable, boolean ownerOnly) boolean 设置此抽象路径名的所有者或所有用户的执行权限。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setExecutable(boolean executable, boolean ownerOnly):"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">setExecutable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setLastModified(long time) boolean 设置此抽象路径名指定的文件或目录的最后一次修改时间。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setLastModified(long time):"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">setLastModified</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setReadable(boolean readable) boolean 设置此抽象路径名所有者读权限的一个便捷方法。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setReadable(boolean readable):"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setReadable(boolean readable, boolean ownerOnly) boolean 设置此抽象路径名的所有者或所有用户的读权限。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setReadable(boolean readable, boolean ownerOnly):"</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setReadOnly() boolean 标记此抽象路径名指定的文件或目录，从而只能对其进行读操作。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setReadOnly():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setWritable(boolean writable) boolean 设置此抽象路径名所有者写权限的一个便捷方法。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setWritable(boolean writable):"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">setWritable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setWritable(boolean writable, boolean ownerOnly) boolean 设置此抽象路径名的所有者或所有用户的写权限。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setWritable(boolean writable, boolean ownerOnly):"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">setWritable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toString() String 返回此抽象路径名的路径名字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString():"</span> <span class="token operator">+</span> file2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toURI() URI 构造一个表示此抽象路径名的 file: URI。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toURI():"</span> <span class="token operator">+</span> file3<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>                     
<span class="token punctuation">}</span>
</code></pre>
<pre><code>canExecute():true
canRead():true
canWrite():true
compareTo(File pathname):-9
createNewFile():false
createTempFile(String prefix, String suffix):C:\Users\ADMINI~1\AppData\Local\Temp\test6093908792030020865txt
createTempFile(String prefix, String suffix, File directory):E:\test8672086278670390974txt
delete():true
deleteOnExit():E:\Test3.txt
equals(Object obj):true
exists():true
getAbsoluteFile():E:\Test2.rar
getAbsolutePath():E:\Test2.rar
getCanonicalFile():E:\Test2.rar
getCanonicalPath():E:\Test2.rar
getFreeSpace():55538286592
getName():Test2.rar
getParent():E:\
getParentFile():E:\
getPath():E:\Test2.rar
getTotalSpace():200773988352
getUsableSpace():55538286592
hashCode():1267478
isAbsolute():true
isDirectory():true
isFile():true
isHidden():false
lastModified():1460885084640
length():84
list():test
list():test1.txt
list():test2.txt
list(FilenameFilter filter):test1.txt
list(FilenameFilter filter):test2.txt
listFiles():E:\test\test
listFiles():E:\test\test1.txt
listFiles():E:\test\test2.txt
listFiles(FileFilter filter):E:\test\test1.txt
listFiles(FileFilter filter):E:\test\test2.txt
listFiles(FilenameFilter filter):E:\test\test1.txt
listFiles(FilenameFilter filter):E:\test\test2.txt
listRoots():C:\
listRoots():D:\
listRoots():E:\
listRoots():F:\
listRoots():G:\
listRoots():I:\
mkdir():false
mkdirs():false
renameTo(File dest):false
setExecutable(boolean executable):true
setExecutable(boolean executable, boolean ownerOnly):true
setLastModified(long time):true
setReadable(boolean readable):true
setReadable(boolean readable, boolean ownerOnly):true
setReadOnly():true
setWritable(boolean writable):true
setWritable(boolean writable, boolean ownerOnly):true
toString():E:\Test2.rar
toURI():file:/E:/Test.txt
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;FileFilter和FilenameFilter都是文件过滤器，都是一个接口，只有方法accept(),accept返回true表示符合所需文件标准，要过滤掉的文件则返回false&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
      <category term="IO" scheme="https://luoweiguang.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>String、StringBuffer、StringBuilder</title>
    <link href="https://luoweiguang.github.io/2016/04/16/String%E3%80%81StringBuffer%E3%80%81StringBuilder/"/>
    <id>https://luoweiguang.github.io/2016/04/16/String、StringBuffer、StringBuilder/</id>
    <published>2016-04-16T13:00:00.000Z</published>
    <updated>2017-08-06T09:49:43.632Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/20160416000001.png" alt=""></p>
 <a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>String</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException
    <span class="token punctuation">{</span>
        String str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// charAt(int index)  char  返回指定索引处的char值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"charAt(int index):"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// codePointAt(int index)  int   返回指定索引处的字符（Unicode 代码点）。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"codePointAt(int index):"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// codePointBefore(int index)  int  返回指定索引之前的字符（Unicode 代码点）。codePointBefore(index)相当于codePointAt(index - 1);</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"codePointBefore(int index):"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">codePointBefore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// codePointCoubt(int beginIndex,int endIndex) int 返回此 String 的指定文本范围中的 Unicode 代码点数。      //一般用不到</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"codePointCoubt(int beginIndex,int endIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// compareTo(String anotherString) int 按字典顺序比较两个字符串。   正数表示str更大</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo(String anotherString):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// compareToIgnoreCase(String str) int 按字典顺序比较两个字符串，不考虑大小写。 正数表示str更大</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareToIgnoreCase(String str):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// concat(String str) String 将指定字符串连接到此字符串的结尾。  不会改变str的值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"concat(String str):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// contains(CharSequence s) boolean 当且仅当此字符串包含指定的 char 值序列时，返回 true。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contains(CharSequence s):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//contentEquals(CharSequence cs) boolean 将此字符串与指定的 CharSequence 比较。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contentEquals(CharSequence cs):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token string">"He"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//contentEquals(StringBuffer sb) boolean 将此字符串与指定的 StringBuffer 比较。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contentEquals(StringBuffer sb):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//copyValueOf(char[] data) static String  返回指定数组中表示该字符序列的 String。</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyValueOf(char[] data):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">copyValueOf</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//copyValueOf(char[] data, int offset, int count) static String  返回指定数组中表示该字符序列的 String。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyValueOf(char[] data, int offset, int count):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">copyValueOf</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//endsWith(String suffix) boolean 测试此字符串是否以指定的后缀结束。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"endsWith(String suffix):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"World "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//equals(Object anObject) boolean 将此字符串与指定的对象比较。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals(Object anObject):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//equalsIgnoreCase(String anotherString) boolean 将此 String 与另一个 String 比较，不考虑大小写。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equalsIgnoreCase(String anotherString):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//format(Locale l, String format, Object... args) </span>

<span class="token comment" spellcheck="true">//        转  换  符                 说    明                     示    例</span>
<span class="token comment" spellcheck="true">//        %s                    字符串类型                    "mingrisoft"</span>
<span class="token comment" spellcheck="true">//        %c                    字符类型                    'm'</span>
<span class="token comment" spellcheck="true">//        %b                    布尔类型                    true</span>
<span class="token comment" spellcheck="true">//        %d                    整数类型（十进制）                99</span>
<span class="token comment" spellcheck="true">//        %x                    整数类型（十六进制）            FF</span>
<span class="token comment" spellcheck="true">//        %o                    整数类型（八进制）                77</span>
<span class="token comment" spellcheck="true">//        %f                    浮点类型                    99.99</span>
<span class="token comment" spellcheck="true">//        %a                    十六进制浮点类型                FF.35AE</span>
<span class="token comment" spellcheck="true">//        %e                    指数类型                    9.38e+5</span>
<span class="token comment" spellcheck="true">//        %g                    通用浮点类型（f和e类型中较短的）     </span>
<span class="token comment" spellcheck="true">//        %h                    散列码 </span>
<span class="token comment" spellcheck="true">//        %%                    百分比类型                    ％</span>
<span class="token comment" spellcheck="true">//        %n                    换行符</span>
<span class="token comment" spellcheck="true">//        %tx                    日期与时间类型（x代表不同的日期与时间转换符</span>

<span class="token comment" spellcheck="true">//        标    志                说    明                                                示    例                            结    果</span>
<span class="token comment" spellcheck="true">//        +                为正数或者负数添加符号                                    ("%+d",15)                    +15</span>
<span class="token comment" spellcheck="true">//        −                左对齐                                                ("%-5d",15)                    |15   |</span>
<span class="token comment" spellcheck="true">//        0                数字前面补0                                            ("%04d", 99)                0099</span>
<span class="token comment" spellcheck="true">//        空格                在整数之前添加指定数量的空格                                ("% 4d", 99)                |  99| </span>
<span class="token comment" spellcheck="true">//        ,                以“,”对数字分组                                        ("%,f", 9999.99)            9,999.990000</span>
<span class="token comment" spellcheck="true">//        (                使用括号包含负数                                        ("%(f", -99.99)                (99.990000)</span>
<span class="token comment" spellcheck="true">//        #                如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0            ("%#x", 99)                    0x63</span>
<span class="token comment" spellcheck="true">//                                                                        ("%#o", 99)                    0143</span>
<span class="token comment" spellcheck="true">//        &lt;                 格式化前一个转换符所描述的参数                                ("%f和%&lt;3.2f", 99.45)        99.450000和99.45</span>
<span class="token comment" spellcheck="true">//        $                被格式化的参数索引                                        ("%1$d,%2$s", 99,"abc")        99,abc</span>

<span class="token comment" spellcheck="true">//        转  换  符                说    明                        示    例</span>
<span class="token comment" spellcheck="true">//        c                    包括全部日期和时间信息            星期六 十月 27 14:21:20 CST 2007</span>
<span class="token comment" spellcheck="true">//        F                    “年-月-日”格式                2007-10-27</span>
<span class="token comment" spellcheck="true">//        D                    “月/日/年”格式                10/27/07</span>
<span class="token comment" spellcheck="true">//        r                    “HH:MM:SS PM”格式（12时制）    02:25:51 下午</span>
<span class="token comment" spellcheck="true">//        T                    “HH:MM:SS”格式（24时制）        14:28:16</span>
<span class="token comment" spellcheck="true">//        R                    “HH:MM”格式（24时制）        14:28</span>

<span class="token comment" spellcheck="true">//        转  换  符                说    明                                示    例</span>
<span class="token comment" spellcheck="true">//        H                    2位数字24时制的小时（不足2位前面补0）        15</span>
<span class="token comment" spellcheck="true">//        I                    2位数字12时制的小时（不足2位前面补0）        03</span>
<span class="token comment" spellcheck="true">//        k                    2位数字24时制的小时（前面不补0）            15</span>
<span class="token comment" spellcheck="true">//        l                    2位数字12时制的小时（前面不补0）            3</span>
<span class="token comment" spellcheck="true">//        M                    2位数字的分钟（不足2位前面补0）            03</span>
<span class="token comment" spellcheck="true">//        S                    2位数字的秒（不足2位前面补0）                09</span>
<span class="token comment" spellcheck="true">//        L                    3位数字的毫秒（不足3位前面补0）            015</span>
<span class="token comment" spellcheck="true">//        N                    9位数字的毫秒数（不足9位前面补0）            562000000</span>
<span class="token comment" spellcheck="true">//        p                    小写字母的上午或下午标记                    中：下午英：pm</span>
<span class="token comment" spellcheck="true">//        z                    相对于GMT的RFC822时区的偏移量            +0800</span>
<span class="token comment" spellcheck="true">//        Z                    时区缩写字符串                        CST</span>
<span class="token comment" spellcheck="true">//        s                    1970-1-1 00:00:00 到现在所经过的秒数    1193468128</span>
<span class="token comment" spellcheck="true">//        Q                    1970-1-1 00:00:00 到现在所经过的毫秒数    1193468128984</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"format(Locale l, String format, Object... args):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"format(Locale l, String format, Object... args):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">,</span> <span class="token string">"%05d"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"format(Locale l, String format, Object... args):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">,</span> <span class="token string">"%tc"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"format(Locale l, String format, Object... args):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">,</span> <span class="token string">"%tQ"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//format(String format, Object... args) static String 使用指定的格式字符串和参数返回一个格式化字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"format(String format, Object... args):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%#x"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getBytes() byte[] 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getBytes():"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment" spellcheck="true">//getBytes(Charset charset)  byte[] 使用给定的 charset 将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getBytes(Charset charset):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getBytes(String charsetName)  byte[] 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getBytes(String charsetName):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)  void 将字符从此字符串复制到目标字符数组。</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> array2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//hashCode()  int 返回此字符串的哈希码。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hashCode():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//indexOf(int ch) int 返回指定字符在此字符串中第一次出现处的索引。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf(int ch):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//indexOf(int ch, int fromIndex)  int  返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf(int ch, int fromIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//indexOf(String str) </span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf(String str):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//indexOf(String str, int fromIndex) int 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf(String str, int fromIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//intern() String 返回字符串对象的规范化表示形式。即将字符串添加到常量池中(假如常量池中没有)，并返回其引用</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intern():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//isEmpty() boolean 当且仅当 length() 为 0 时返回 true。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isEmpty():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//lastIndexOf(int ch) int 返回指定字符在此字符串中最后一次出现处的索引。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastIndexOf(int ch):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//lastIndexOf(int ch, int fromIndex) int 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastIndexOf(int ch, int fromIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//lastIndexOf(String str) int  返回指定子字符串在此字符串中最右边出现处的索引。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastIndexOf(String str):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//lastIndexOf(String str, int fromIndex) int 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastIndexOf(String str, int fromIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//length() int 返回此字符串的长度。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"length():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//matches(String regex)  boolean 告知此字符串是否匹配给定的正则表达式。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"matches(String regex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"[H]ello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//offsetByCodePoints(int index, int codePointOffset) int 返回此 String 中从给定的 index 处偏移 codePointOffset 个代码点的索引。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"offsetByCodePoints(int index, int codePointOffset):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len) boolean 测试两个字符串区域是否相等。</span>

<span class="token comment" spellcheck="true">//        参数：</span>
<span class="token comment" spellcheck="true">//        ignoreCase - 如果为 true，则比较字符时忽略大小写。</span>
<span class="token comment" spellcheck="true">//        toffset - 此字符串中子区域的起始偏移量。</span>
<span class="token comment" spellcheck="true">//        other - 字符串参数。</span>
<span class="token comment" spellcheck="true">//        toffset - 字符串参数中子区域的起始偏移量。</span>
<span class="token comment" spellcheck="true">//        len - 要比较的字符数。 </span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//regionMatches(int toffset, String other, int ooffset, int len) boolean 测试两个字符串区域是否相等。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"regionMatches(int toffset, String other, int ooffset, int len):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//replace(char oldChar, char newChar) String 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replace(char oldChar, char newChar):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//replace(CharSequence target, CharSequence replacement) String 使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replace(CharSequence target, CharSequence replacement):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Hello  "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//replaceAll(String regex, String replacement) String 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replaceAll(String regex, String replacement):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[l]"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//replaceFirst(String regex, String replacement) String 用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replaceFirst(String regex, String replacement):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"[l]"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//split(String regex)  String[] 根据给定正则表达式的匹配拆分此字符串。</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs1 <span class="token operator">=</span>  str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[l]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> strs1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"split(String regex):"</span> <span class="token operator">+</span>strs1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//split(String regex, int limit)  String[] 根据匹配给定的正则表达式来拆分此字符串。</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs2 <span class="token operator">=</span>  str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[l]"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> strs2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"split(String regex, int limit):"</span> <span class="token operator">+</span>strs2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//startsWith(String prefix) boolean 测试此字符串是否以指定的前缀开始。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"startsWith(String prefix):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//startsWith(String prefix, int toffset) boolean 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"startsWith(String prefix, int toffset):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//subSequence(int beginIndex, int endIndex) CharSequence  返回一个新的字符序列，它是此序列的一个子序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"subSequence(int beginIndex, int endIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment" spellcheck="true">//substring(int beginIndex) String  返回一个新的字符串，它是此字符串的一个子字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"substring(int beginIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//substring(int beginIndex, int endIndex) String  返回一个新的字符串，它是此字符串的一个子字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"substring(int beginIndex, int endIndex):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toCharArray()  char[] 将此字符串转换为一个新的字符数组。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toCharArray():"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toLowerCase()  String 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toLowerCase():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toLowerCase(Locale locale) String 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toLowerCase(Locale locale):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINESE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toString()  String 返回此对象本身（它已经是一个字符串！）。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toUpperCase()  String 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toUpperCase():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toUpperCase(Locale locale) String 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toUpperCase(Locale locale):"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINESE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//trim() String 返回字符串的副本，忽略前导空白和尾部空白。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"trim():"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(boolean b) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(boolean b):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(char c) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(char c):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(char[] data) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(char[] data):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(char[] data, int offset, int count) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(char[] data, int offset, int count):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>array2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(double d) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(double d):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">11.2d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(float f) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(float f):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">11.3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(int i) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(int i):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(long l) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(long l):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>11111111111l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//valueOf(Object obj) static String</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf(Object obj):"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>charAt(int index):H
codePointAt(int index):72
codePointBefore(int index):72
codePointCount(int beginIndex,int endIndex):9
compareTo(String anotherString):0
compareToIgnoreCase(String str):0
concat(String str):Hello World.
contains(CharSequence s):true
contentEquals(CharSequence cs):false
contentEquals(StringBuffer sb):true
copyValueOf(char[] data):Hello World
copyValueOf(char[] data, int offset, int count):Hello
endsWith(String suffix):false
equals(Object anObject):true
equalsIgnoreCase(String anotherString):true
format(Locale l, String format, Object... args):Hello World
format(Locale l, String format, Object... args):00123
format(Locale l, String format, Object... args):星期六 四月 16 20:23:41 CST 2016
format(Locale l, String format, Object... args):1460809421630
format(String format, Object... args):0x7b
getBytes():Hello World
getBytes(Charset charset):Hello World
getBytes(String charsetName):Hello World
getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin):abcdHellojk
hashCode():-862545276
indexOf(int ch):0
indexOf(int ch, int fromIndex):9
indexOf(String str):0
indexOf(String str, int fromIndex):9
intern():Hello World
isEmpty():false
lastIndexOf(int ch):9
lastIndexOf(int ch, int fromIndex):3
lastIndexOf(String str):6
lastIndexOf(String str, int fromIndex):-1
length():11
matches(String regex):true
offsetByCodePoints(int index, int codePointOffset):7
regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len):true
regionMatches(int toffset, String other, int ooffset, int len):true
replace(char oldChar, char newChar):Hell0 W0rld
replace(CharSequence target, CharSequence replacement):Hello   World
replaceAll(String regex, String replacement):HeLLo WorLd
replaceFirst(String regex, String replacement):HeLlo World
split(String regex):He
split(String regex):
split(String regex):o Wor
split(String regex):d
split(String regex, int limit):He
split(String regex, int limit):lo World
startsWith(String prefix):true
startsWith(String prefix, int toffset):true
subSequence(int beginIndex, int endIndex):llo
substring(int beginIndex):World
substring(int beginIndex, int endIndex):l
toCharArray():Hello World
toLowerCase():hello world
toLowerCase(Locale locale):hello world
toString():Hello World
toUpperCase():HELLO WORLD
toUpperCase(Locale locale):HELLO WORLD
trim():Hello World
valueOf(boolean b):false
valueOf(char c):a
valueOf(char[] data):abcdHellojk
valueOf(char[] data, int offset, int count):cdH
valueOf(double d):11.2
valueOf(float f):11.3
valueOf(int i):12
valueOf(long l):11111111111
valueOf(Object obj):Sat Apr 16 20:23:41 CST 2016
</code></pre><p><strong>StringBuffer</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 构造一个其中不带字符的字符串缓冲区，初始容量为 16 个字符。</span>
        StringBuffer sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 构造一个不带字符，但具有指定初始容量的字符串缓冲区。</span>
        StringBuffer sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。</span>
        StringBuffer sb3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//append(boolean b) StringBuffer 将指定的boolean值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(boolean b):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(char c) StringBuffer 将指定的char值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(char c):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(char[] str)  StringBuffer 将指定的char[]值添加到该序列。</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(char[] str) :"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(char[] str, int offset, int len) StringBuffer 将指定的char[]值添加到该序列</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(char[] str, int offset, int len) :"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence s) StringBuffer 将指定的 CharSequence 添加到该序列。</span>
        CharSequence charSequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ghijk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(CharSequence s):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>charSequence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(CharSequence s, int start, int end)  StringBuffer 将指定的 CharSequence 添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(CharSequence s, int start, int end):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>charSequence<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(double d)  StringBuffer 将指定的double值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(double d):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(float f) StringBuffer 将指定的float值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(float f):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">11.3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(int i) StringBuffer 将指定的int值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(int i):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(long lng) StringBuffer 将指定的long值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(long lng):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>11111111111l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(Object obj) StringBuffer 将指定的Object值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(Object obj):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(String str) StringBuffer 将指定的String值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(String str):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//append(StringBuffer sb) StringBuffer 将指定的float值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append(StringBuffer sb):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//appendCodePoint(int codePoint)  StringBuffer 将指定的字符值添加到该序列。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"appendCodePoint(int codePoint):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">appendCodePoint</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token comment" spellcheck="true">//capacity() int 获取字符串缓冲区的容量大小，不是字符串长度。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"capacity():"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//charAt(int index) char 返回指定索引处的char值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"charAt(int index):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//codePointAt(int index) int  返回指定索引处的字符（Unicode 代码点）。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"codePointAt(int index):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//codePointBefore(int index)  int  返回指定索引之前的字符（Unicode 代码点）。codePointBefore(index)相当于codePointAt(index - 1);</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"codePointBefore(int index):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">codePointBefore</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//codePointCount(int beginIndex,int endIndex) int 返回此 String 的指定文本范围中的 Unicode 代码点数。      //一般用不到</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"codePointCount(int beginIndex,int endIndex):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//delete(int start, int end) StringBuffer 删除指定区间以内的所有字符，包含start，不包含end索引值的区间。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete(int start, int end):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//deleteCharAt(int index) StringBuffer 删除指定位置的字符，然后将剩余的内容形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deleteCharAt(int index):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//ensureCapacity(int minimumCapacity) void 重新设置字符串容量的大小,只能设置比之前更大的数</span>
        sb1<span class="token punctuation">.</span><span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ensureCapacity(int minimumCapacity):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)  void 将字符从此字符串复制到目标字符数组。</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        sb1<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> array2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin):"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//indexOf(String str) int 返回指定字符在此字符串中第一次出现处的索引。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf(String str):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//indexOf(int ch, int fromIndex) int  返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf(int ch, int fromIndex):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, boolean b) StringBuffer 在StringBuffer对象指定处插入boolean值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, boolean b):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, char c) StringBuffer 在StringBuffer对象指定处插入char值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, char c):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, char[] str) StringBuffer 在StringBuffer对象指定处插入char[]值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, char[] str):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int index, char[] str, int offset, int len) StringBuffer 在StringBuffer对象指定处插入char[]值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int index, char[] str, int offset, int len):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> array<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int dstOffset, CharSequence s) StringBuffer 在StringBuffer对象指定处插入CharSequence值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int dstOffset, CharSequence s):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> charSequence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int dstOffset, CharSequence s, int start, int end) StringBuffer 在StringBuffer对象指定处插入CharSequence值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int dstOffset, CharSequence s, int start, int end):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> charSequence<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, double d) StringBuffer 在StringBuffer对象指定处插入double值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, double d):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, float f) StringBuffer 在StringBuffer对象指定处插入float值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, float f):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11.3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, int i) StringBuffer 在StringBuffer对象指定处插入int值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, int i):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, long l) StringBuffer 在StringBuffer对象指定处插入long值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, long l):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> 11111111111l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, Object obj) StringBuffer 在StringBuffer对象指定处插入Object值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, Object obj):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//insert(int offset, String str) StringBuffer 在StringBuffer对象指定处插入String值，然后形成新的字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert(int offset, String str):"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//lastIndexOf(String str) int 返回指定子字符串在此字符串中最右边出现处的索引。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastIndexOf(String str):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//lastIndexOf(String str, int fromIndex) int 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastIndexOf(String str, int fromIndex):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//length() int 获取字符串长度 </span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"length():"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//offsetByCodePoints(int index, int codePointOffset) int 返回该序列是从给定的索引由codePointOffset代码点偏移中的索引</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"offsetByCodePoints(int index, int codePointOffset):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//replace(int start, int end, String str) StringBuffer 此方法替换这个序列中的特定字符串的子字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replace(int start, int end, String str):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reverse() StringBuffer 将StringBuffer对象中的内容反转，然后形成新的字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reverse():"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setCharAt(int index, char ch) void 修改对象中索引值为index位置的字符为新的字符ch。</span>
        sb1<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setCharAt(int index, char ch):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//setLength(int newLength) void 设置字符串长度大小。 如果用小于当前字符串长度的值调用setlength()方法，则新长度后面的字符将丢失。</span>
        sb1<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setLength(int newLength):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//subSequence(int start, int end) CharSequence 返回一个新的字符序列，为这个序列的子序列</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"subSequence(int start, int end):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">subSequence</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//substring(int start) String 返回一个新的String，它包含的字符目前包含在此字符序列子序列</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"substring(int start):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//substring(int start, int end) String 返回一个新的String，它包含的字符目前包含在此字符序列子序列</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"substring(int start, int end):"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//toString() String 此方法返回表示此序列中数据的字符串。</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString():"</span> <span class="token operator">+</span> sb1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//trimToSize() void 该方法的作用是将StringBuffer对象的中存储空间缩小到和字符串长度一样的长度，减少空间的浪费</span>
        sb1<span class="token punctuation">.</span><span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"trimToSize():"</span> <span class="token operator">+</span> sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>输出</strong></p>
<pre><code>append(boolean b):true
append(char c):truea
append(char[] str) :trueabcdef
append(char[] str, int offset, int len) :trueabcdefdef
append(CharSequence s):trueabcdefdefghijk
append(CharSequence s, int start, int end):trueabcdefdefghijkijk
append(double d):trueabcdefdefghijkijk11.2
append(float f):trueabcdefdefghijkijk11.211.3
append(int i):trueabcdefdefghijkijk11.211.312
append(long lng):trueabcdefdefghijkijk11.211.31211111111111
append(Object obj):trueabcdefdefghijkijk11.211.31211111111111Sat Apr 16 20:22:16 CST 2016
append(String str):trueabcdefdefghijkijk11.211.31211111111111Sat Apr 16 20:22:16 CST 2016Hello World
append(StringBuffer sb):trueabcdefdefghijkijk11.211.31211111111111Sat Apr 16 20:22:16 CST 2016Hello WorldHello
appendCodePoint(int codePoint):trueabcdefdefghijkijk11.211.31211111111111Sat Apr 16 20:22:16 CST 2016Hello WorldHelloa
capacity():512
charAt(int index):a
codePointAt(int index):97
codePointBefore(int index):97
codePointCount(int beginIndex,int endIndex):2
delete(int start, int end):abcdefdefghijkijk11.211.31211111111111Sat Apr 16 20:22:16 CST 2016Hello WorldHelloa
deleteCharAt(int index):bcdefdefghijkijk11.211.31211111111111Sat Apr 16 20:22:16 CST 2016Hello WorldHelloa
ensureCapacity(int minimumCapacity):1024
getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin):abcdbcdefjk
indexOf(String str):65
indexOf(int ch, int fromIndex):76
insert(int offset, boolean b):true
insert(int offset, char c):truea
insert(int offset, char[] str):truebcdefa
insert(int index, char[] str, int offset, int len):trueefbcdefa
insert(int dstOffset, CharSequence s):trueghijkefbcdefa
insert(int dstOffset, CharSequence s, int start, int end):trueijghijkefbcdefa
insert(int offset, double d):true11.2ijghijkefbcdefa
insert(int offset, float f):true11.311.2ijghijkefbcdefa
insert(int offset, int i):true1311.311.2ijghijkefbcdefa
insert(int offset, long l):true111111111111311.311.2ijghijkefbcdefa
insert(int offset, Object obj):trueSat Apr 16 20:22:16 CST 2016111111111111311.311.2ijghijkefbcdefa
insert(int offset, String str):trueHello WorldSat Apr 16 20:22:16 CST 2016111111111111311.311.2ijghijkefbcdefa
lastIndexOf(String str):76
lastIndexOf(String str, int fromIndex):76
length():82
offsetByCodePoints(int index, int codePointOffset):28
replace(int start, int end, String str):Hellodefghijkijk11.211.31211111111111Sat Apr 16 20:22:16 CST 2016Hello WorldHelloa
reverse():aolleHdlroW olleH6102 TSC 61:22:02 61 rpA taS11111111111213.112.11kjikjihgfedolleH
setCharAt(int index, char ch):aolleHdlroW olleH6102 TSC 61:22:02 61 rpA taS11111111111213.112.11kjikjihgfedolleH
setLength(int newLength):10
subSequence(int start, int end):aolle
substring(int start):Hdlro
substring(int start, int end):aolle
toString():aolleHdlro
trimToSize():aolleHdlro
</code></pre><p>StringBuilder与StringBuffer的API相同</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>●String是不可变的对象</p>
<p>●在switch语句中使用String作为case条件?<br>从 JDK7 开始,这是可以的,啰嗦一句,Java 6 及以前的版本都不支持这样做.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 只在java 7及更高版本有效!  </span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">case</span> <span class="token string">"a"</span><span class="token operator">:</span>  
           value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
           <span class="token keyword">break</span><span class="token punctuation">;</span>  
      <span class="token keyword">case</span> <span class="token string">"b"</span><span class="token operator">:</span>  
           value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  
           <span class="token keyword">break</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>●StringBuffer 中的方法大都采用了 synchronized 关键字进行修饰，因此是线程安全的，而 StringBuilder 没有这个修饰，可以被认为是线程不安全的</p>
<p>●如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。</p>
<p>●不要使用String类的”+”来进行频繁的拼接，因为那样的性能极差的，应该使用StringBuffer或StringBuilder类</p>
<p>●为了获得更好的性能，在构造 StirngBuffer 或 StirngBuilder 时应尽可能指定它们的容量</p>
<p>●相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/lonely_fireworks/article/details/7962171" target="_blank" rel="external">JAVA字符串格式化-String.format()的使用</a><br><a href="http://blog.csdn.net/kingzone_2008/article/details/9220691" target="_blank" rel="external">Java：String、StringBuffer和StringBuilder的区别</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/20160416000001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型模式</title>
    <link href="https://luoweiguang.github.io/2016/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://luoweiguang.github.io/2016/04/10/设计模式之创建型模式/</id>
    <published>2016-04-10T13:00:00.000Z</published>
    <updated>2017-08-06T09:56:24.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单工厂（Simple-Factory）"><a href="#简单工厂（Simple-Factory）" class="headerlink" title="简单工厂（Simple Factory）"></a>简单工厂（Simple Factory）</h2><blockquote>
<p>定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态(static)方法，因此简单工厂模式又被称为静态工厂方法(Static Factory Method)模式</p>
</blockquote>
<p><strong>一般性结构</strong></p>
<blockquote>
<ul>
<li><strong>工厂角色:</strong>担任这个角色的是工厂方法模式的核心，含有与应用紧密相关的商业逻辑。工厂类在客户端的直接调用下创建产品对象，它往往由一个具体的Java类实现</li>
<li><strong>抽象产品:</strong>担任这个角色的类是由工厂模式所创建的对象的父类，或它们共同拥有的接口。抽象产品角色可以用一个Java接口或者Java抽象类实现</li>
<li><strong>具体产品:</strong>工厂模式所创建的任何对象都是这个角色的实例，具体产品角色由一个具体Java类实现。</li>
</ul>
</blockquote>
<a id="more"></a>
<p><strong>优点:</strong></p>
<ul>
<li>将创建对象与使用对象的职责分开</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>因为工厂类集中了所有产品的创建逻辑，那么工厂类出现问题，会导致所有需要工厂类创建对象的调用都会出现问题。</li>
<li>由于使用静态方法，所以无法被子类继承</li>
<li>每次扩展产品类时，都必须对工厂方法进行修改</li>
</ul>
<p><strong>适用场景</strong></p>
<ul>
<li>工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂</li>
<li>客户端只知道传入工厂类的参数，对于如何创建对象并不关心</li>
</ul>
<p><strong>例子:</strong></p>
<p><img src="/img/20160410000001.png" alt=""></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Product <span class="token function">FactoryMethod</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Aplle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Pear"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Aplle</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Pear</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃梨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Product product <span class="token operator">=</span> Factory<span class="token punctuation">.</span><span class="token function">FactoryMethod</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        product<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="工厂方法（Factory-Method）"><a href="#工厂方法（Factory-Method）" class="headerlink" title="工厂方法（Factory Method）"></a>工厂方法（Factory Method）</h2><blockquote>
<p>定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式又简称为工厂模式(Factory Pattern)，又可称作虚拟构造器模式(Virtual Constructor Pattern)或多态工厂模式(Polymorphic Factory Pattern)。工厂方法模式是一种类创建型模式。</p>
</blockquote>
<p><strong>一般性结构</strong></p>
<blockquote>
<ul>
<li><strong>抽象工厂:</strong>担任这个角色的是工厂方法模式的核心，它是与应用程序无关的，任何在模式中创建对象的工厂类必须实现这个接口。在实际的系统中，这个角色也常常使用抽象Java类实现。</li>
<li><strong>具体工厂:</strong>担任这个角色的是实现了抽象工厂接口的具体Java类。具体工厂角色含有与应用密切相关的逻辑，并且受到应用程序的调用以创建产品对象。</li>
<li><strong>抽象产品:</strong>工厂方法模式所创建的对象的超类型，也就是产品对象的共有父类或共同拥有的接口。在实际的系统中。常常使用抽象Java类实现。</li>
<li><strong>具体产品:</strong>这个角色实现了抽象产品角色所声明的接口。工厂方法模式所创建的每一个对象都是某个具体产品角色的实例。</li>
</ul>
</blockquote>
<p><strong>优点:</strong></p>
<ul>
<li>将创建对象与使用对象的职责分开</li>
<li>无需修改客户端的逻辑代码就可以添加具体的产品</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>每次扩展产品类时，都必须添加新的具体工厂类</li>
<li>增加了系统的抽象性与理解难度</li>
</ul>
<p><strong>适用场景</strong></p>
<ul>
<li>客户端不知道它所需要的对象的类</li>
<li>抽象工厂类通过其子类来指定创建哪个对象</li>
</ul>
<p><strong>例子</strong></p>
<p><img src="/img/20160410000002.png" alt=""></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> FruitCreator mFruitCreator<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mFruitCreator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mFruitCreator<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FruitCreator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> Fruit <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Fruit</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AppleCreator</span> <span class="token keyword">implements</span> <span class="token class-name">FruitCreator</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Fruit <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PearCreator</span> <span class="token keyword">implements</span> <span class="token class-name">FruitCreator</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Fruit <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">implements</span> <span class="token class-name">Fruit</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Pear</span> <span class="token keyword">implements</span> <span class="token class-name">Fruit</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃梨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="抽象工厂（Abstract-Factory）"><a href="#抽象工厂（Abstract-Factory）" class="headerlink" title="抽象工厂（Abstract Factory）"></a>抽象工厂（Abstract Factory）</h2><blockquote>
<p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式</p>
</blockquote>
<p><strong>一般性结构</strong></p>
<blockquote>
<ul>
<li><strong>抽象工厂:</strong>担任这个角色的是工厂方法模式的核心，它是与应用系统的商业逻辑无关的。通常使用Java接口或者抽象Java类实现，而所有的具体工厂类必须实现这个Java接口或继承这个抽象Java类</li>
<li><strong>具体工厂:</strong>这个角色直接在客户端的调用下创建产品的实例的实例。这个角色含有选择合适的产品对象的逻辑，而这个逻辑是与应用系统的商业逻辑紧密相关的。通常使用具体Java类实现这个角色。</li>
<li><strong>抽象产品:</strong>担任这个角色的类是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。通常使用Java接口或抽象Java类实现。</li>
<li><strong>具体产品:</strong>抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例，这个客户端最终需要的东西，其内部一定充满了应用系统的商业逻辑。通常使用具体Java类实现这个角色。</li>
</ul>
</blockquote>
<p><strong>优点:</strong></p>
<ul>
<li>将创建对象与使用对象的职责分开</li>
<li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象</li>
<li>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</li>
</ul>
<p><strong>适用场景</strong></p>
<ul>
<li>客户端不知道它所需要的对象的类</li>
<li>系统中有多于一个的产品族，而每次只使用其中某一产品族</li>
<li>产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构</li>
</ul>
<p><strong>例子:</strong></p>
<p><img src="/img/20160410000003.png" alt=""></p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        SkinFactory mSkinFactory<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedSkinFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mSkinFactory<span class="token punctuation">.</span><span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mSkinFactory<span class="token punctuation">.</span><span class="token function">createTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">SkinFactory</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> Button <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> TextView <span class="token function">createTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RedSkinFactory</span> <span class="token keyword">implements</span> <span class="token class-name">SkinFactory</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Button <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> TextView <span class="token function">createTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">GreenSkinFactory</span> <span class="token keyword">implements</span> <span class="token class-name">SkinFactory</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Button <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GreenButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> TextView <span class="token function">createTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GreenTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Button</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">TextView</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RedButton</span> <span class="token keyword">implements</span> <span class="token class-name">Button</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"画一个红色按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">GreenButton</span> <span class="token keyword">implements</span> <span class="token class-name">Button</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"画一个绿色按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RedTextView</span> <span class="token keyword">implements</span> <span class="token class-name">TextView</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"画一个红色文本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">GreenTextView</span> <span class="token keyword">implements</span> <span class="token class-name">TextView</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"画一个绿色文本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="单例（Singleton）"><a href="#单例（Singleton）" class="headerlink" title="单例（Singleton）"></a>单例（Singleton）</h2><blockquote>
<p>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p>
</blockquote>
<p><strong>优点:</strong></p>
<ul>
<li>单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它</li>
<li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能</li>
<li>允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难</li>
<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起</li>
<li>现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致共享的单例对象状态的丢失</li>
</ul>
<p><strong>适用场景</strong></p>
<ul>
<li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗太大而只允许创建一个对象</li>
<li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例</li>
</ul>
<p><strong>例子:</strong></p>
<p>饿汉式单例</p>
<p><img src="/img/20160410000004.png" alt=""></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">EagerSingleton</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EagerSingleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> EagerSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>懒汉式单例(DCL方式)</p>
<p><img src="/img/20160410000005.png" alt=""></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">{</span>   
    <span class="token comment" spellcheck="true">//没有volatile修饰符，可能出现Java中的另一个线程看到个初始化了一半的LazySingleton的情况</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazySingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>   

    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>   

    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>   
        <span class="token comment" spellcheck="true">//第一重判断  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>  
            <span class="token comment" spellcheck="true">//锁定代码块  </span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">//第二重判断  </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建单例实例  </span>
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>登记式单例</p>
<p><img src="/img/20160410000006.png" alt=""></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RegSingleton</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> RegSingleton<span class="token operator">></span> mRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> RegSingleton<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> 
    <span class="token punctuation">{</span>
        RegSingleton x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mRegistry<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token function">RegSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">public</span> RegSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token string">"com.singleton.RegSingleton"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//即包名</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mRegistry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                mRegistry<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>RegSingleton<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mRegistry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RegSingletonChild</span> <span class="token keyword">extends</span> <span class="token class-name">RegSingleton</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">RegSingletonChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">public</span> RegSingletonChild <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>RegSingletonChild<span class="token punctuation">)</span> RegSingletonChild<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"com.singleton.RegSingletonChild"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>IoDH单例</p>
<pre class=" language-Java"><code class="language-Java">
//IoDH，即使用内部类(与编程语言本身的特性相关，很多面向对象语言不支持IoDH)
class Singleton {  
    private Singleton() {  
    }  

    private static class HolderClass {  
            private final static Singleton instance = new Singleton();  
    }  

    public static Singleton getInstance() {  
        return HolderClass.instance;  
    }  

}
</code></pre>
<h2 id="原型（Prototype）"><a href="#原型（Prototype）" class="headerlink" title="原型（Prototype）"></a>原型（Prototype）</h2><p>使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<p><strong>简单形式的原始模型的一般性结构</strong></p>
<blockquote>
<ul>
<li><strong>抽象原型:</strong>它是声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽象类也可以是接口，甚至还可以是具体实现类。</li>
<li><strong>具体原型:</strong>它实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象</li>
<li><strong>客户:</strong>：让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。由于客户类针对抽象原型类Prototype编程，因此用户可以根据需要选择具体原型类，系统具有较好的可扩展性，增加或更换具体原型类都很方便。</li>
</ul>
</blockquote>
<p><strong>登记形式的原始模型的一般性结构</strong></p>
<blockquote>
<ul>
<li><strong>客户:</strong>客户端类向管理员提出创建对象的请求</li>
<li><strong>抽象原型:</strong>这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体原型类所需的接口</li>
<li><strong>具体原型:</strong>被复制的对象。需要实现抽象的原型角色所要求的接口</li>
<li><strong>原型管理器:</strong>创建具体原型类的对象，并记录每一个被创建的对象，<br><strong>优点</strong></li>
</ul>
</blockquote>
<ul>
<li>当创建新的对象实例比较复杂时，使用原型模式可以简化对象的创建过程，通过复制一个已有实例可以提高新实例的创建效率</li>
<li>扩展性较好，由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，而将具体原型类写在配置文件中，增加或减少产品类对原有系统都没有任何影响</li>
<li>原型模式提供了简化的创建结构，工厂方法模式常常需要有一个与产品类登记结构相同的工厂等级结构，而原型模式就不要这样，原型模式中产品的复制是通过封装在原型类中的克隆方法实现的，无须专门的工厂类来创建产品</li>
<li>可以使用深克隆的方法保存对象的状态，使用原型模式将对象复制一份并将其状态保存起来，以便在需要的时候使用（如恢复到某一历史状态），可辅助实现撤销操作。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，但对已有的类进行改造时，需要修改源代码，违背”开闭原则”</li>
<li>在实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦。</li>
</ul>
<p><strong>适应场景</strong></p>
<ul>
<li>创建新对象成本较大（如初始化需要占用较长的时间，占用太多的CPU资源或网络资源），新的对象可以通过原型模式对已有对象进行复制来获得，如果是相似对象，则可以对其成员变量稍作修改。</li>
<li>如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占用内存较少时，可以使用原型模式配合备忘录模式来实现。</li>
<li>需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。</li>
</ul>
<p><strong>简单形式的例子</strong></p>
<p><img src="/img/20160410000007.png" alt=""></p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> Prototype prototype<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>Prototype example<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Prototype p <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Prototype</span> <span class="token keyword">extends</span> <span class="token class-name">Cloneable</span>
<span class="token punctuation">{</span>
    Prototype <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcretePrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Prototype</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> Prototype <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>登记形式的例子</strong></p>
<p><img src="/img/20160410000008.png" alt=""></p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span>
<span class="token punctuation">{</span>

    <span class="token keyword">private</span> PrototypeManager pm<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Prototype prototype<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Prototype copytype <span class="token operator">=</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span> prototype<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pm<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>copytype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Prototype</span> <span class="token keyword">extends</span> <span class="token class-name">Cloneable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcretePrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Prototype</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Prototype temp <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            temp <span class="token operator">=</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Clone failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PrototypeManager</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> Vector<span class="token operator">&lt;</span>Prototype<span class="token operator">></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>Prototype<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Prototype object<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Prototype <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="建造者（Builder）"><a href="#建造者（Builder）" class="headerlink" title="建造者（Builder）"></a>建造者（Builder）</h2><blockquote>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p>
</blockquote>
<p><strong>一般性结构</strong></p>
<blockquote>
<ul>
<li><strong>Builder（抽象建造者）：</strong>它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。</li>
<li><strong>ConcreteBuilder（具体建造者）：</strong>它实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。</li>
<li><strong>Product（产品角色）：</strong>它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程。</li>
<li><strong>Director（指挥者）：</strong>指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。</li>
</ul>
</blockquote>
<p><strong>优点:</strong></p>
<ul>
<li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li>
<li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则”</li>
<li>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。</li>
<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。</li>
</ul>
<p><strong>适用场景</strong></p>
<ul>
<li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li>
<li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li>
<li>对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中。</li>
<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li>
</ul>
<p><strong>例子:</strong></p>
<p><img src="/img/20160410000009.png" alt=""></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Director director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MacbookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Computer computer <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token string">"英特尔主板"</span><span class="token punctuation">,</span> <span class="token string">"Retina显示器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> String mBoard<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> String mDisplay<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> String mOS<span class="token punctuation">;</span>


    <span class="token keyword">protected</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mBoard <span class="token operator">=</span> board<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mDisplay <span class="token operator">=</span> display<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOS</span><span class="token punctuation">(</span>String OS<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mOS <span class="token operator">=</span> OS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Macbook</span> <span class="token keyword">extends</span> <span class="token class-name">Computer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token function">Macbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Lenovo</span> <span class="token keyword">extends</span> <span class="token class-name">Computer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token function">Lenovo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span>  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Computer <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MacbookBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MACOSX <span class="token operator">=</span> <span class="token string">"Mac OS X 10.10"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Computer mComputer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Macbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mComputer<span class="token punctuation">.</span><span class="token function">setBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mComputer<span class="token punctuation">.</span><span class="token function">setDisplay</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mComputer<span class="token punctuation">.</span><span class="token function">setOS</span><span class="token punctuation">(</span>MACOSX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Computer <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mComputer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LenovoBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String WINDOWS <span class="token operator">=</span> <span class="token string">"Windows 10"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Computer mComputer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Macbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mComputer<span class="token punctuation">.</span><span class="token function">setBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mComputer<span class="token punctuation">.</span><span class="token function">setDisplay</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mComputer<span class="token punctuation">.</span><span class="token function">setOS</span><span class="token punctuation">(</span>WINDOWS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Computer <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mComputer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Director</span>
<span class="token punctuation">{</span>
    Builder mBuilder <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Director</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mBuilder <span class="token operator">=</span> builder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Computer <span class="token function">construct</span><span class="token punctuation">(</span>String board<span class="token punctuation">,</span>String display<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mBuilder<span class="token punctuation">.</span><span class="token function">buildBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mBuilder<span class="token punctuation">.</span><span class="token function">buildDisplay</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mBuilder<span class="token punctuation">.</span><span class="token function">buildOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>省略指挥者与抽象建造者</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NutritionFacts<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        NutritionFacts nutritionFacts <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">calories</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">NutritionFacts</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servngSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servings<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> calories<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fat<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> sodiun<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> carbohydrate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servingSize<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servings<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">int</span> calories <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> fat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> carbohydrate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> sodium <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">int</span> servingSize<span class="token punctuation">,</span><span class="token keyword">int</span> servings<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>servingSize <span class="token operator">=</span> servingSize<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>servings <span class="token operator">=</span> servings<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> Builder <span class="token function">calories</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            calories <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> Builder <span class="token function">fat</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            fat <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> Builder <span class="token function">carbohydrate</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            carbohydrate <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> Builder <span class="token function">sodium</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sodium <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> NutritionFacts <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">NutritionFacts</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        servngSize <span class="token operator">=</span> builder<span class="token punctuation">.</span>servingSize<span class="token punctuation">;</span>
        servings <span class="token operator">=</span> builder<span class="token punctuation">.</span>servings<span class="token punctuation">;</span>
        calories <span class="token operator">=</span> builder<span class="token punctuation">.</span>calories<span class="token punctuation">;</span>
        fat <span class="token operator">=</span> builder<span class="token punctuation">.</span>fat<span class="token punctuation">;</span>
        sodiun <span class="token operator">=</span> builder<span class="token punctuation">.</span>sodium<span class="token punctuation">;</span>
        carbohydrate <span class="token operator">=</span> builder<span class="token punctuation">.</span>carbohydrate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单工厂（Simple-Factory）&quot;&gt;&lt;a href=&quot;#简单工厂（Simple-Factory）&quot; class=&quot;headerlink&quot; title=&quot;简单工厂（Simple Factory）&quot;&gt;&lt;/a&gt;简单工厂（Simple Factory）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态(static)方法，因此简单工厂模式又被称为静态工厂方法(Static Factory Method)模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;一般性结构&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂角色:&lt;/strong&gt;担任这个角色的是工厂方法模式的核心，含有与应用紧密相关的商业逻辑。工厂类在客户端的直接调用下创建产品对象，它往往由一个具体的Java类实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象产品:&lt;/strong&gt;担任这个角色的类是由工厂模式所创建的对象的父类，或它们共同拥有的接口。抽象产品角色可以用一个Java接口或者Java抽象类实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体产品:&lt;/strong&gt;工厂模式所创建的任何对象都是这个角色的实例，具体产品角色由一个具体Java类实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://luoweiguang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="总结" scheme="https://luoweiguang.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="设计模式" scheme="https://luoweiguang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java</title>
    <link href="https://luoweiguang.github.io/2016/04/08/Effective%20Java/"/>
    <id>https://luoweiguang.github.io/2016/04/08/Effective Java/</id>
    <published>2016-04-08T14:00:00.000Z</published>
    <updated>2017-08-06T10:00:10.882Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. 考虑用静态工厂方法代替构造器</strong><br><strong>优点：</strong></p>
<ul>
<li>拥有名称，更容易识别</li>
<li>不必每次调用时，都创建一个新的对象</li>
<li>可以返回返回类型的任何子类型对象</li>
<li>使代码更简洁</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>类如果不含共有的或者受保护的构造器，就不能被子类化。</li>
<li>它们与其他的静态方法实际上没有任何区别。</li>
</ul>
<p><strong>应用：</strong></p>
<ul>
<li>服务提供者框架</li>
</ul>
<a id="more"></a>
<p><strong>2. 遇到多个构造器参数时要考虑用构建器</strong></p>
<ul>
<li>当有很多参数的时候，重叠构造器模式可行，客户端代码会很难编写，并且仍然较难以阅读</li>
<li>使用javabeans模式，在构造过程中JavaBean可能处于不一定的状态</li>
<li>使用Builder 模式的客户端代码将更易于阅读与编写，构建器也比JavaBeans更加安全。</li>
</ul>
<p><strong>3. 用私有构造器或者枚举类型强化Singleton属性</strong></p>
<ul>
<li>使类成为Singleton会是它的客户端测试变得十分困难，因为无法给Singleton替换模拟实现，除非它实现一个充当其类型的接口。</li>
<li>序列化Singleton类使用implement Serializable是不够的，为了维护并保证Singleton，必须声明所有实例域都是瞬时（transient）的，并提供一个readResolve方法，否则每次反序列化一个序列化的实例时，都会创建一个新的实例。</li>
<li><p>单元素的枚举类型已经成为Singleton的最佳方法<br><strong>例子：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Elvis
<span class="token punctuation">{</span>
  INSTANCE<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leaveTheBuilding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>4. 通过私有构造器强化不可实例化的能力</strong></p>
</li>
<li><p>导致一个类不能被子类化。所有的构造器都必须显示或隐式的调用超类的构造器。如此一来子类就没有可访问的超类构造器可用了</p>
</li>
</ul>
<p><strong>5. 避免创建不必要的对象</strong></p>
<ul>
<li>使用静态工厂方法而不是构造器，以避免创建不必要的对象</li>
<li>要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱。</li>
</ul>
<p><strong>6. 消除过期的对象引用</strong></p>
<ul>
<li>只要类是自己管理内存，就应该警惕内存泄露问题</li>
<li>内存泄露的另一个常见来源是缓存</li>
<li>内存泄露的第三个常见来源是监听器和其他回调</li>
</ul>
<p><strong>7. 避免使用终结方法</strong></p>
<ul>
<li>不应该依赖终结方法来更新重要的持久状态</li>
<li>使用终结方法有一个非常严重的性能损失</li>
<li>如果终结方法发现资源还未被终止，则应该在日志中记录一条警告</li>
<li>如果类有终结方法，并且子类覆盖了终结方法，子类的终结方法就必须手工调用超类的终结方法，应该在try块中终结子类，并在相应的finally块中调用超类的终结方法</li>
</ul>
<p><strong>8. 覆盖equals时请遵守通用约定</strong></p>
<ul>
<li>类的每个实例本质上都是唯一的</li>
<li>不关心类是否提供了”逻辑相等”的测试功能</li>
<li>超类已经覆盖了equals，从超类继承过来的行为对于子类也是合适的</li>
<li>类是私有的或是包级私有的，可以确定它的equals方法永远不会被调用</li>
</ul>
<p><strong>equals方法实现了等价关系</strong></p>
<ul>
<li>自反性。对于任何非null的引用值x,x.equals(x)必须返回true</li>
<li>对称性。对于任何非null的引用值x和y,当且仅当y.equals(x)返回true时，x.equals(y)必须返回true.</li>
<li>传递性。对于任何非null的引用值x、y和z,如果x.equals(y)返回true，并且y.equals(z)也返回true，那么x.equals(z)也必须返回true。</li>
<li>一致性。对于任何非null的引用值x和y，只要equals的比较操作在对象中所用的信息没有被修改，多次调用x.equals(y)就会一致地返回true，或者一致的返回false。</li>
<li>非空性。对于任何非null的引用值x，x.equals(null)必须返回false。</li>
</ul>
<hr>
<ul>
<li>无法在扩展可实例化的类的同时，即增加新的组件，同时又保留equals约定</li>
</ul>
<p><strong>实现高质量equals方法的诀窍</strong></p>
<ul>
<li>使用==操作符检查”参数是否为这个对象的引用”</li>
<li>使用instanceof操作符检查”参数是否为正确的类型”</li>
<li>把参数转换成正确的类型</li>
<li>对于该类中的每个”关键””域，检查参数中的域是否与该对象中对应的域相匹配</li>
<li>当编写完equals方法之后，应该问自己三个问题，它是否是对称的，传递的，一致的？</li>
</ul>
<p><strong>告诫：</strong></p>
<ul>
<li>覆盖equals时总要覆盖hashCode。</li>
<li>不要企图让equals方法过于智能</li>
<li>不要将equals声明中的Object对象替换为其他的类型</li>
</ul>
<p><strong>9. 覆盖equals时总要覆盖hashCode</strong></p>
<ul>
<li>相等的对象必须具有相等的散列码</li>
<li>不要试图从散列码计算中排除掉一个对象的关键部分来提高性能</li>
</ul>
<p><strong>10. 始终覆盖toString</strong></p>
<ul>
<li>toString()方法应该返回对象中包含的所有值得关注的信息</li>
</ul>
<p><strong>11. 谨慎的覆盖clone</strong></p>
<ul>
<li>永远不要让客户去做类库能够替客户完成的事情</li>
<li>必须确保它不会伤害到原始的对象，并确保正确地创建被克隆对象中的约束条件</li>
</ul>
<p><strong>12. 考虑实现Comparable接口</strong></p>
<p><strong>13. 使类和成员的可访问性最小化</strong></p>
<ul>
<li>尽可能地使每个类或者成员不被外界访问</li>
</ul>
<p><strong>14. 在公有类中使用访问方法而非公有域</strong></p>
<ul>
<li>如果类可以在它所在的包的外部进行访问，就提供访问方法。</li>
</ul>
<p><strong>15. 使可变性最小化</strong></p>
<p><strong>使类成为不可变，要遵循下面五条规则</strong></p>
<ul>
<li>不要提供改变对象属性的方法</li>
<li>保证类不会被扩展</li>
<li>使所有的域都是final的</li>
<li>使所有的域都成为私有的</li>
<li>确保对于任何可变组件的互斥访问</li>
</ul>
<p><strong>优点</strong></p>
<ul>
<li>不可变对象比较简单</li>
<li>不可变对象本质上是线程安全的，它们不要求同步</li>
<li>不可变对象可以被自由地共享</li>
<li>不仅可以共享不可变对象，甚至也可以共享它们的内部信息。</li>
<li>不可变对象为其他对象提供了大量的构件</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>对于每个不同的值都需要一个单独的对象、</li>
</ul>
<p><strong>16. 复合优先于继承</strong></p>
<p><strong>17. 要么为继承而设计，并提供文档说明，要么就禁止继承</strong></p>
<ul>
<li>构造器决不能调用可被覆盖的方法</li>
</ul>
<p><strong>18. 接口优于抽象类</strong></p>
<ul>
<li>现有的类可以很容易被更新，以实现新的接口</li>
<li>接口是定义混合类型的理想选择</li>
<li>接口允许我们构造非层次结构的类型框架</li>
<li>接口使得安全的增强类的功能成为可能</li>
<li>抽象类的演变比接口的演变要容易的多</li>
<li>接口一旦被公开发行，并且已被广泛实现，再想改变这个接口几乎是不可能的</li>
</ul>
<p><strong>19. 接口只用于定义类型</strong></p>
<p><strong>20. 类层次优于标签类</strong></p>
<ul>
<li>标签类过于冗长、容易出错、并且效率低下</li>
</ul>
<p><strong>21. 用函数对象表示策略</strong></p>
<p><strong>22. 优先考虑静态成员类</strong></p>
<p><strong>23. 请不要在新代码中使用原生态类型</strong></p>
<ul>
<li>如果使用原生态类型。就失掉了泛型在安全性和表述性方面的所有优势</li>
<li>如果使用像List这样的原生态类型，就会失掉类型安全性，但是如果使用像<br>List<object>这样的参数化类型，则不会</object></li>
</ul>
<p><strong>24. 消除非受检警告</strong></p>
<ul>
<li>要尽可能地消除每一个非受检警告</li>
<li>如果无法消除警告，同时可以证明引起警告的代码是类型安全的，（只有在这种情况下才）可以用一个人@SuppressWarnings(“unchecked”)注解来禁止这条警告</li>
<li>应该始终在尽可能小的范围中使用@SuppressWarnings注解</li>
<li>每当使用SuppressWarnings(“unchecked”)注解时，都要添加一条注释，说明为什么这么做是安全的</li>
</ul>
<p><strong>25. 列表优先于数组</strong></p>
<ul>
<li>数组是协变的（convariant）。相反泛型则是不可变的（invariant）。即如果Sub为Super的子类型，那么数组类型Sub[]就是Super[]的子类型；</li>
<li>数组是具体化的（reified）。因此数组会在运行时才知道并检查他们的元素类型约束。泛型是通过擦除来实现的。因此泛型只在编译时强化他们的类型信息，并在运行时丢弃（或者擦除）他们元素的类型信息。</li>
<li>创建泛型数组是非法的：</li>
</ul>
<p><strong>26. 优先考虑泛型</strong></p>
<ul>
<li>使用泛型比使用需要在客户端代码中进行转换的类型来得更加安全，也更加容易。</li>
<li>再设计新类型的时候，要确保他们不需要这种转换就可以使用</li>
</ul>
<p><strong>27. 优先考虑泛型方法</strong></p>
<p><strong>28. 利用有限制通配符来提升API的灵活性</strong></p>
<ul>
<li>为了获得最大限度的灵活性，要在表示生产者或者消费者的输入参数上使用通配符类型。</li>
<li>如果参数化类型表示一个T生产者，就使用《？ extends T&gt;,如果它表示一个T消费者，就使用&lt;? super T&gt;</li>
<li>不要使用通配符类型作为返回类型</li>
</ul>
<p><strong>29. 优先考虑类型安全的异构容器</strong></p>
<p><strong>30. 用enum代替int常量</strong></p>
<ul>
<li>枚举提供了编译时的类型安全。</li>
</ul>
<p><strong>31. 用实例域代替序数</strong></p>
<ul>
<li>永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中</li>
</ul>
<p><strong>32. 用EnumSet代替位域</strong></p>
<p><strong>33. 用EnumMap代替序数索引</strong></p>
<p><strong>34. 用接口模拟可伸缩的枚举</strong></p>
<p><strong>35. 注解优先于命名模式</strong></p>
<p><strong>命名模式的缺点：</strong></p>
<ul>
<li>无法处理命名失误的情况。</li>
<li>无法确保它们只用于响应的程序元素上</li>
<li>他们没有提供将参数值与程序元素关联起来的好方法。</li>
</ul>
<p><strong>36. 坚持使用Override注解</strong></p>
<p><strong>37. 用标记接口定义类型</strong></p>
<ul>
<li>标记接口定义的类型是由被标记类的实例实现的；标记注解则没有定义这样的类型</li>
<li>使用标记接口的方法能够更加精确的对实现它的类型进行锁定。</li>
<li>标记注解胜过标记结构的最大优点在于，他可以通过默认的方式添加一个或多个注解类型元素，给已被使用的注解类型添加更多的信息</li>
</ul>
<p><strong>38. 检查参数的有效性</strong></p>
<p><strong>39. 必要时进行保护性拷贝</strong></p>
<ul>
<li>假设类的客户端会尽其所能来破坏这个类的约束条件，因此你必须保护性地设计程序</li>
<li>保护性拷贝是在检查参数的有效性之前进行的，并且有效性检查是针对拷贝之后的对象，而不是针对原始的对象</li>
<li>对于参数类型可以被不信任方子类化的参数，请不要使用clone方法进行保护性拷贝</li>
</ul>
<p><strong>40. 谨慎设计方法签名</strong></p>
<ul>
<li>谨慎的选择方法的名称</li>
<li>不要过于追求提供便利的方法</li>
<li>避免过长的参数列表</li>
<li>分解成多个方法</li>
<li>创建辅助类</li>
<li>对于参数类型，要优先使用接口而不是类</li>
<li>对于boolean参数，要优先使用两个元素的枚举类型</li>
</ul>
<p><strong>41. 慎用重载</strong></p>
<ul>
<li>永远不要导出两个具有相同参数数目的重载方法。</li>
<li>必须要保证当传递同样当参数时，所有的重载方法的行为必须一致。</li>
</ul>
<p><strong>42. 慎用可变参数</strong></p>
<ul>
<li>不必改造具有final数组参数的每个方法，只当确定是在数量不定的值上执行调用时才使用可变参数</li>
</ul>
<p><strong>43. 返回零长度的数组或者集合，而不是null</strong></p>
<p><strong>44. 为所有导出的API元素编写文档注释</strong></p>
<p><strong>45. 将局部变量的作用域最小化</strong></p>
<ul>
<li>要使用局部变量的作用域最小化，最有力的方法就是在第一次使用它的地方声明</li>
<li>几乎每个局部变量的声明都应该包含一个初始化表达式</li>
</ul>
<p><strong>46. for-each循环优先于传统的for循环</strong></p>
<p><strong>三种常见的情况无法使用for-each循环</strong></p>
<ul>
<li><strong>过滤</strong>–如果需要遍历集合，并删除选定的元素，就需要使用显示的迭代器，以便可以调用它的remove方法。</li>
<li><strong>转换</strong>–如果需要遍历列表或者数组，并取代它部分或者全部的元素值，就需要列表迭代器或者数组索引，以便设定元素的值</li>
<li><strong>平行迭代</strong>–如果需要并行地遍历多个集合，就需要显示地控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以得到同步前移</li>
</ul>
<p><strong>47. 了解和使用类库</strong></p>
<p><strong>48. 如果需要精确的答案，请避免使用float和double</strong></p>
<p><strong>49. 基本类型优先于装箱基本类型</strong></p>
<ul>
<li>对装箱基本类型运行==操作符几乎总是错误的</li>
<li>当在一项操作中混合使用基本类型和装箱基本类型时，装箱基本类型就会自动拆箱</li>
<li>自动装箱减少了使用装箱基本类型的繁琐性，但是并没有减少它的风险</li>
</ul>
<p><strong>基本类型和装箱基本类型有三个主要区别：</strong></p>
<ul>
<li>基本类型只有值，装箱基本类型则具有与它们的值不同的同一性。</li>
<li>基本类型只有功能完备的值，而每个装箱基本类型除了它对应基本类型的所有功能值之外，还有个非功能值null</li>
<li>基本类型通常比装箱基本类型更节省时间和空间。</li>
</ul>
<p><strong>什么时候应该使用装箱基本类型：</strong></p>
<ul>
<li>作为集合中的元素，键和值</li>
<li>在参数化类型中，必须使用装箱基本类型作为类型参数</li>
<li>反射的方法调用时，必须使用装箱基本类型</li>
</ul>
<p><strong>50. 如果其他类型更适合，则尽量避免使用字符串</strong></p>
<ul>
<li>字符串不适合代替其他的值类型</li>
<li>字符串不适合代替枚举类型</li>
<li>字符串不适合代替聚集类型</li>
<li>字符串不适合代替能力表</li>
</ul>
<p><strong>51. 当心字符串连接的性能</strong></p>
<ul>
<li>为连接n个字符串而重复第使用字符串连接操作符，需要n的平方级的时间。</li>
</ul>
<p><strong>52. 通过接口引用对象</strong></p>
<ul>
<li>如果有合适的接口类型存在，那么对于参数、返回值、变量和域来说，就都应该使用接口类型进行声明</li>
</ul>
<p><strong>53. 接口优先于反射机制</strong></p>
<p><strong>反射机制的缺点：</strong></p>
<ul>
<li>丧失了编译时类型检查的好处</li>
<li>执行反射访问所需要的代码非常笨拙与冗长</li>
<li>性能损失</li>
</ul>
<p><strong>54. 谨慎地使用本地方法</strong></p>
<ul>
<li>使用本地方法来提高性能的做法不值得提倡</li>
</ul>
<p><strong>本地方法的三种用途：</strong></p>
<ul>
<li>它们提供了“访问特定于平台的机制”的能力</li>
<li>提供了访问遗留代码库的能力，从而访问遗留数据。</li>
<li>可以通过本地语言，编写应用程序中注重性能的部分，以提高系统的性能。</li>
</ul>
<p><strong>55. 谨慎地进行优化</strong></p>
<ul>
<li>要努力编写好的程序而不是快的程序</li>
<li>努力避免那些限制性能的设计决策</li>
<li>要考虑API设计决策的性能后果</li>
<li>在每次试图做优化之前和之后，要对性能进行测量</li>
</ul>
<p><strong>56. 遵守普遍接受的命名惯例</strong></p>
<p><strong>57. 只针对异常的情况才使用异常</strong></p>
<p><strong>58. 对可恢复的情况使用受检异常，对编程错误使用运行时异常</strong></p>
<ul>
<li>如果期望调用者能够适当地恢复，对于这种情况就应该使用受检的异常</li>
<li>用运行时异常来表面编程错误</li>
<li>实现的所有未受检的抛出结构都应该是RuntimeExecption的子类</li>
</ul>
<p><strong>59. 避免不必要地使用受检的异常</strong></p>
<p><strong>60. 优先使用标准的异常</strong></p>
<p><strong>61. 抛出与抽象相对应的异常</strong></p>
<ul>
<li>更高层的实现应该捕获低层的异常，同时抛出可以按照高层抽象进行解释的异常，这种做法称为异常转译</li>
<li>尽管异常转译与不加选择的从低层传递异常的做法相比有所改进，但是它也不能被滥用</li>
</ul>
<p><strong>62. 每个方法抛出的异常都要有文档</strong></p>
<ul>
<li>始终要单独地声明受检的异常，并且利用Javadoc的@throws标记，准确地记录下抛出每个异常的条件</li>
</ul>
<p><strong>63. 在细节消息中包含能捕获失败的而信息</strong></p>
<ul>
<li>异常的toString方法应该尽可能多地返回有关失败原因的信息</li>
<li>为了捕获失败，异常的细节消息应该包含所有“对该异常有贡献”的参数和域的值</li>
</ul>
<p><strong>64. 努力使失败保持原子性</strong></p>
<p><strong>65. 不要忽略异常</strong></p>
<ul>
<li>空的catch块会使异常达不到应有的目的，至少应当包含一条说明，解释为什么可以忽略这个异常</li>
</ul>
<p><strong>66. 同步访问共享的可变数据</strong></p>
<ul>
<li>为了在线程之间进行可靠的通信，也为了互斥访问，同步是必要的</li>
<li>如果读和写操作没有都被同步，同步就不会起作用</li>
<li>将可变数据限制在单个线程中</li>
</ul>
<p><strong>67. 避免过度同步</strong></p>
<p><strong>68. executor和task优先于线程</strong></p>
<p><strong>69. 并发工具优先于wait和notify</strong></p>
<p><strong>70. 线程安全性的文档化</strong></p>
<p><strong>71. 慎用延迟初始化</strong></p>
<p><strong>72. 不要依赖于线程调度器</strong></p>
<p><strong>73. 避免使用线程组</strong></p>
<p><strong>74. 谨慎地实现Serializable接口</strong></p>
<ul>
<li>为了继承而设计的类应该尽可能少的实现Serializable接口，用户的接口也应该尽可能少地继承Serializable接口</li>
<li>对于为继承而设计的不可序列化的类，你应该考虑提供一个无参构造器</li>
</ul>
<p><strong>序列化的缺点：</strong></p>
<ul>
<li>一旦一个类被发布，就大大降低了”改变这个类的实现”的灵活性</li>
<li>它增加了出现Bug和安全漏洞的可能性</li>
<li>随着类发行新的版本，相关的测试负担也增加了</li>
</ul>
<p><strong>75. 考虑使用自定义的序列化形式</strong></p>
<p><strong>76. 保护性地编写readObject方法</strong></p>
<p><strong>77. 对于实例控制，枚举类型优先于readResolve</strong></p>
<p><strong>78. 考虑用序列化代理代替序列化实例</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1. 考虑用静态工厂方法代替构造器&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有名称，更容易识别&lt;/li&gt;
&lt;li&gt;不必每次调用时，都创建一个新的对象&lt;/li&gt;
&lt;li&gt;可以返回返回类型的任何子类型对象&lt;/li&gt;
&lt;li&gt;使代码更简洁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类如果不含共有的或者受保护的构造器，就不能被子类化。&lt;/li&gt;
&lt;li&gt;它们与其他的静态方法实际上没有任何区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;应用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务提供者框架&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://luoweiguang.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>线程池简介</title>
    <link href="https://luoweiguang.github.io/2016/03/26/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AE%80%E4%BB%8B/"/>
    <id>https://luoweiguang.github.io/2016/03/26/线程池简介/</id>
    <published>2016-03-26T07:00:00.000Z</published>
    <updated>2017-08-06T10:02:58.761Z</updated>
    
    <content type="html"><![CDATA[<p>一个线程的生命周期由三方面组成</p>
<ol>
<li>创建线程的时间</li>
<li>线程执行的时间</li>
<li>执行销毁的时间</li>
</ol>
<p>那么只要这三方面中的某一个所需的时间减少，就能够提高程序的性能<br>而线程池技术就是缩短创建与销毁线程的时间。</p>
<a id="more"></a>
<p>线程池由至少四部分组成</p>
<ol>
<li>线程池管理器：用于创建并管理线程池</li>
<li>工作线程：线程池中的线程</li>
<li>任务接口：每个任务必须实现的而接口，以供工作线程调度任务的执行</li>
<li>任务队列：用于存放没有处理的任务。提供一种缓冲机制</li>
</ol>
<h2 id="简单线程池的实现"><a href="#简单线程池的实现" class="headerlink" title="简单线程池的实现"></a>简单线程池的实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>LinkedBlockingQueue<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ThreadPool t <span class="token operator">=</span> ThreadPool<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TestTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TestTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TestTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TestTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TestTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TestTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 所有线程都执行完成才destory</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestTask</span> <span class="token keyword">extends</span> <span class="token class-name">Task</span>
    <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程编号"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程产生时间："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGenerateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程提交到任务队列时间："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSubmitTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程从任务队列移除的时间:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRemoveFinishTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程开始执行时间："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeginExceuteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span>
<span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// 线程池中线程的默认数</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> worker_num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 工作线程</span>
    <span class="token keyword">private</span> WorkThread<span class="token punctuation">[</span><span class="token punctuation">]</span> workThreads<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 未处理的任务</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> removefinished_task <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> taskID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 任务队列</span>
    <span class="token keyword">private</span> BlockingQueue<span class="token operator">&lt;</span>Task<span class="token operator">></span> taskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> ThreadPool threadPool<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 创建具有默认线程个数的线程池</span>
    <span class="token keyword">private</span> <span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>worker_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 创建线程池,worker_num为线程池中工作线程的个数</span>
    <span class="token keyword">private</span> <span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> worker_num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ThreadPool<span class="token punctuation">.</span>worker_num <span class="token operator">=</span> worker_num<span class="token punctuation">;</span>
        workThreads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkThread</span><span class="token punctuation">[</span>worker_num<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> worker_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            workThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开启线程池中的线程</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 单态模式，获得一个默认线程个数的线程池</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadPool <span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getThreadPool</span><span class="token punctuation">(</span>ThreadPool<span class="token punctuation">.</span>worker_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 单态模式，获得一个指定线程个数的线程池,worker_num(>0)为线程池中工作线程的个数</span>
    <span class="token comment" spellcheck="true">// worker_num&lt;=0创建默认的工作线程个数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadPool <span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> worker_num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>worker_num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            worker_num <span class="token operator">=</span> ThreadPool<span class="token punctuation">.</span>worker_num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadPool <span class="token operator">==</span> null<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span>worker_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> threadPool<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器觉定</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>taskQueue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            task<span class="token punctuation">.</span><span class="token function">setTaskId</span><span class="token punctuation">(</span>taskID<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            task<span class="token punctuation">.</span><span class="token function">setSubmitTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            taskQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
            taskQueue<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 批量执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器觉定</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Task<span class="token punctuation">[</span><span class="token punctuation">]</span> task<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>taskQueue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Task t <span class="token operator">:</span> task<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span><span class="token function">setTaskId</span><span class="token punctuation">(</span>taskID<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                t<span class="token punctuation">.</span><span class="token function">setSubmitTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                taskQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            taskQueue<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 批量执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器觉定</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Task<span class="token operator">></span> task<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>taskQueue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Task t <span class="token operator">:</span> task<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span><span class="token function">setTaskId</span><span class="token punctuation">(</span>taskID<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                t<span class="token punctuation">.</span><span class="token function">setSubmitTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                taskQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            taskQueue<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 销毁线程池,该方法保证在所有任务都完成的情况下才销毁所有线程，否则等待任务完成才销毁</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>taskQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果还有任务没执行完成，就先睡会吧</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 工作线程停止工作，且置为null</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> worker_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            workThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">stopWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        threadPool <span class="token operator">=</span> null<span class="token punctuation">;</span>
        taskQueue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清空任务队列</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 返回工作线程的个数</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWorkThreadNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> worker_num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 返回已完成任务的个数,这里的已完成是只出了任务队列的任务个数，可能该任务并没有实际执行完成</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFinishedTasknumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> removefinished_task<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 返回任务队列的长度，即还没处理的任务个数</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWaitTasknumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> taskQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"WorkThread number:"</span> <span class="token operator">+</span> worker_num <span class="token operator">+</span> <span class="token string">"  finished task number:"</span>
                <span class="token operator">+</span> removefinished_task <span class="token operator">+</span> <span class="token string">"  wait task number:"</span> <span class="token operator">+</span> <span class="token function">getWaitTasknumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 内部类，工作线程
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">WorkThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 该工作线程是否有效，用于结束该工作线程</span>
        <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*
         * 关键所在啊，如果任务队列不空，则取出任务执行，若任务队列空，则等待
         */</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Task r <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注意，若线程无效则自然结束run方法，该线程就没用了</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>taskQueue<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>isRunning <span class="token operator">&amp;&amp;</span> taskQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 队列为空</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">try</span>
                        <span class="token punctuation">{</span>
                            taskQueue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>taskQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        removefinished_task<span class="token operator">++</span><span class="token punctuation">;</span>
                        r <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取出任务</span>
                        r<span class="token punctuation">.</span><span class="token function">setRemoveFinishTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    r<span class="token punctuation">.</span><span class="token function">setBeginExceuteTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行任务</span>
                <span class="token punctuation">}</span>
                r <span class="token operator">=</span> null<span class="token punctuation">;</span>

            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 停止工作，让该线程自然执行完run方法，自然结束</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stopWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * 所有任务接口 其他任务必须继承访类
 * 
 * @author obullxl
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* 产生时间 */</span>
    <span class="token keyword">private</span> Date generateTime <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 提交执行时间 */</span>
    <span class="token keyword">private</span> Date submitTime <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 开始执行时间 */</span>
    <span class="token keyword">private</span> Date beginExceuteTime <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 出任务队列的时间 */</span>
    <span class="token keyword">private</span> Date removeFinishTime <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> taskId<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>generateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 任务执行入口
     */</span>
     <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> Date <span class="token function">getGenerateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> generateTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Date <span class="token function">getBeginExceuteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> beginExceuteTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeginExceuteTime</span><span class="token punctuation">(</span>Date beginExceuteTime<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beginExceuteTime <span class="token operator">=</span> beginExceuteTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Date <span class="token function">getRemoveFinishTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> removeFinishTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemoveFinishTime</span><span class="token punctuation">(</span>Date finishTime<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>removeFinishTime <span class="token operator">=</span> finishTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Date <span class="token function">getSubmitTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> submitTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSubmitTime</span><span class="token punctuation">(</span>Date submitTime<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>submitTime <span class="token operator">=</span> submitTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> taskId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTaskId</span><span class="token punctuation">(</span><span class="token keyword">long</span> taskId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>taskId <span class="token operator">=</span> taskId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="Java中的线程池"><a href="#Java中的线程池" class="headerlink" title="Java中的线程池"></a>Java中的线程池</h2><p>Java中的几种线程池最终都会调用此方法。<br>    public ThreadPoolExecutor(int corePoolSize,<br>                              int maximumPoolSize,<br>                              long keepAliveTime,<br>                              TimeUnit unit,<br>                              BlockingQueue<runnable> workQueue,<br>                              ThreadFactory threadFactory,<br>                              RejectedExecutionHandler handler)</runnable></p>
<blockquote>
<ul>
<li><strong>corePoolSize：</strong>核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li>
<li><strong>maximumPoolSize：</strong>线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li>
<li><strong>keepAliveTime：</strong>表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</li>
<li><strong>unit：</strong>参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：<ul>
<li>TimeUnit.DAYS;               //天</li>
<li>TimeUnit.HOURS;             //小时</li>
<li>TimeUnit.MINUTES;           //分钟</li>
<li>TimeUnit.SECONDS;           //秒</li>
<li>TimeUnit.MILLISECONDS;      //毫秒</li>
<li>TimeUnit.MICROSECONDS;      //微妙</li>
<li>TimeUnit.NANOSECONDS;       //纳秒</li>
</ul>
</li>
<li><strong>workQueue：</strong>线程池所使用的缓冲队列，该缓冲队列的长度决定了能够缓冲的最大数量，缓冲队列有三种通用策略：</li>
</ul>
<ol>
<li>直接提交。工作队列的默认选项是 SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性;</li>
<li>无界队列。使用无界队列（例如，不具有预定义容量的LinkedBlockingQueue）将导致在所有 corePoolSize线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性;</li>
<li>有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量.</li>
</ol>
<ul>
<li><strong>threadFactory：</strong>线程工厂，主要用来创建线程；</li>
<li><strong>handler：</strong>表示当拒绝处理任务时的策略，有以下四种取值：<ul>
<li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 </li>
<li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </li>
<li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li>
<li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 </li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>corePoolSize与maximumPoolSize</strong><br>由于ThreadPoolExecutor 将根据 corePoolSize和 maximumPoolSize设置的边界自动调整池大小，当新任务在方法 execute(java.lang.Runnable) 中提交时：</p>
<pre><code>1. 如果运行的线程少于 corePoolSize，则创建新线程来处理请求，即使其他辅助线程是空闲的；
2. 如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池是大小固定的，如果运行的线程与corePoolSize相同，当有新请求过来时，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理
3. 如果运行的线程多于 corePoolSize 而少于 maximumPoolSize，则仅当队列满时才创建新的线程去处理请求；
4. 如果运行的线程多于corePoolSize 并且等于maximumPoolSize，若队列已经满了，则通过handler所指定的策略来处理新请求；
5. 如果将 maximumPoolSize 设置为基本的无界值（如 Integer.MAX_VALUE），则允许池适应任意数量的并发任务
</code></pre><p>也就是说，处理任务的优先级为： </p>
<pre><code>- 核心线程corePoolSize &gt; 任务队列workQueue &gt; 最大线程maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。
- 当池中的线程数大于corePoolSize的时候，多余的线程会等待keepAliveTime长的时间，如果无请求可处理就自行销毁。
</code></pre></blockquote>
<p><strong>newCachedThreadPool()</strong></p>
<blockquote>
<p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程.<br>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>
                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">参数名</th>
<th style="text-align:center">参数值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">corePoolSize</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">maximumPoolSize</td>
<td style="text-align:center">Integer.MAX_VALUE</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">keepAliveTime</td>
<td style="text-align:center">60L</td>
</tr>
<tr>
<td style="text-align:center">TimeUnit</td>
<td style="text-align:center">unit</td>
<td style="text-align:center">TimeUnit.SECONDS</td>
</tr>
<tr>
<td style="text-align:center">BlockingQueue<runnable></runnable></td>
<td style="text-align:center">workQueue</td>
<td style="text-align:center">new SynchronousQueue<runnable>()</runnable></td>
</tr>
<tr>
<td style="text-align:center">ThreadFactory</td>
<td style="text-align:center">threadFactory</td>
<td style="text-align:center">Executors.defaultThreadFactory()</td>
</tr>
<tr>
<td style="text-align:center">RejectedExecutionHandler</td>
<td style="text-align:center">handler</td>
<td style="text-align:center">defaultHandler</td>
</tr>
</tbody>
</table>
<p><strong>newFixedThreadPool(int nThreads)</strong></p>
<blockquote>
<p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。定长线程池的大小最好根据系统资源进行设置。</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>
                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">参数名</th>
<th style="text-align:center">参数值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">corePoolSize</td>
<td style="text-align:center">nThreads</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">maximumPoolSize</td>
<td style="text-align:center">nThreads</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">keepAliveTime</td>
<td style="text-align:center">0L</td>
</tr>
<tr>
<td style="text-align:center">TimeUnit</td>
<td style="text-align:center">unit</td>
<td style="text-align:center">TimeUnit.MILLISECONDS</td>
</tr>
<tr>
<td style="text-align:center">BlockingQueue<runnable></runnable></td>
<td style="text-align:center">workQueue</td>
<td style="text-align:center">new LinkedBlockingQueue<runnable>()</runnable></td>
</tr>
<tr>
<td style="text-align:center">ThreadFactory</td>
<td style="text-align:center">threadFactory</td>
<td style="text-align:center">Executors.defaultThreadFactory()</td>
</tr>
<tr>
<td style="text-align:center">RejectedExecutionHandler</td>
<td style="text-align:center">handler</td>
<td style="text-align:center">defaultHandler</td>
</tr>
</tbody>
</table>
</blockquote>
<p><strong>newScheduledThreadPool(int corePoolSize)</strong></p>
<blockquote>
<p>创建一个定长线程池，支持定时及周期性任务执行。<br>``` java<br>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)<br>{<br>        return new ScheduledThreadPoolExecutor(corePoolSize);<br>}</p>
</blockquote>
<p>public class ScheduledThreadPoolExecutorextends ThreadPoolExecutorimplements ScheduledExecutorService<br>{<br>    public ScheduledThreadPoolExecutor(int corePoolSize)<br>    {<br>    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,new DelayedWorkQueue());<br>    }<br>}</p>
<pre><code>|参数类型|参数名|参数值|
|:---:|:----:|:---:|
|int|corePoolSize|corePoolSize|
|int|maximumPoolSize|Integer.MAX_VALUE|
|long|keepAliveTime|0|
|TimeUnit|unit|NANOSECONDS|
|BlockingQueue&lt;Runnable&gt;|workQueue|new DelayedWorkQueue()|
|ThreadFactory|threadFactory| Executors.defaultThreadFactory()|
|RejectedExecutionHandler|handler|defaultHandler|


**newSingleThreadExecutor()**
&gt; 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
``` java
public static ExecutorService newSingleThreadExecutor() {
    return new FinalizableDelegatedExecutorService
        (new ThreadPoolExecutor(1, 1,0L, TimeUnit.MILLISECONDS,
            new LinkedBlockingQueue&lt;Runnable&gt;()));
}
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">参数名</th>
<th style="text-align:center">参数值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">corePoolSize</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">maximumPoolSize</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">keepAliveTime</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">TimeUnit</td>
<td style="text-align:center">unit</td>
<td style="text-align:center">TimeUnit.MILLISECONDS</td>
</tr>
<tr>
<td style="text-align:center">BlockingQueue<runnable></runnable></td>
<td style="text-align:center">workQueue</td>
<td style="text-align:center">new LinkedBlockingQueue<runnable>()</runnable></td>
</tr>
<tr>
<td style="text-align:center">ThreadFactory</td>
<td style="text-align:center">threadFactory</td>
<td style="text-align:center">Executors.defaultThreadFactory()</td>
</tr>
<tr>
<td style="text-align:center">RejectedExecutionHandler</td>
<td style="text-align:center">handler</td>
<td style="text-align:center">defaultHandler</td>
</tr>
</tbody>
</table>
<p>※defaultHandler即AbortPolicy<br>※threadFactory也可以自定义，以下是默认线程工厂的源码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger poolNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">final</span> ThreadGroup group<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">final</span> String namePrefix<span class="token punctuation">;</span>  

    <span class="token function">DefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        SecurityManager s <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        group <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>  Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        namePrefix <span class="token operator">=</span> <span class="token string">"pool-"</span> <span class="token operator">+</span>  poolNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">"-thread-"</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token comment" spellcheck="true">// 为线程池创建新的任务执行线程  </span>
    <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// 线程对应的任务是Runnable对象r  </span>
        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> r<span class="token punctuation">,</span>namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment" spellcheck="true">// 设为非守护线程  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment" spellcheck="true">// 将优先级设为Thread.NORM_PRIORITY  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span>  
            t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/lixiaolun/p/5252057.html" target="_blank" rel="external">线程池的实现原理</a><br><a href="http://www.cnblogs.com/dolphin0520/p/3932921.html" target="_blank" rel="external">Java并发编程：线程池的使用</a><br><a href="http://blog.csdn.net/mazhimazh/article/details/19243889" target="_blank" rel="external">Java 7之多线程线程池 - 线程池原理(1)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个线程的生命周期由三方面组成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建线程的时间&lt;/li&gt;
&lt;li&gt;线程执行的时间&lt;/li&gt;
&lt;li&gt;执行销毁的时间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么只要这三方面中的某一个所需的时间减少，就能够提高程序的性能&lt;br&gt;而线程池技术就是缩短创建与销毁线程的时间。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse的使用</title>
    <link href="https://luoweiguang.github.io/2016/03/21/Eclipse%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://luoweiguang.github.io/2016/03/21/Eclipse的使用/</id>
    <published>2016-03-21T12:00:00.000Z</published>
    <updated>2017-08-06T10:04:53.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul>
<li><strong>Ctrl + Shift + F        格式排版</strong> </li>
<li><strong>Ctrl + 1                快速修正</strong></li>
<li><strong>Ctrl + /                注释</strong></li>
<li><strong>Ctrl + Shift + /        添加块注释</strong></li>
<li><strong>Ctrl + Shift + \        除去块注释</strong></li>
<li><strong>Ctrl + Shift + Space    方法参数提示</strong></li>
<li><strong>Ctril + F6              页面切换</strong></li>
<li><strong>Ctrl + Shift + O        去掉没用到的包</strong></li>
<li><strong>F2                      显示提示</strong></li>
<li><strong>F4                      打开元素继承列表</strong></li>
<li><strong>Ctrl + 鼠标点击         查看源码</strong></li>
<li><strong>Ctrl + Z                撤销</strong></li>
<li><strong>Ctrl + Y                重做</strong></li>
</ul>
<a id="more"></a>
<h2 id="跳转查询"><a href="#跳转查询" class="headerlink" title="跳转查询"></a>跳转查询</h2><ul>
<li><strong>Ctrl + T                列出接口的实现类列表或继承的父类</strong></li>
<li><strong>F3                      查看源码</strong></li>
<li><strong>Ctrl + O                查看当前文件的结构</strong></li>
<li><strong>Ctrl + Q                回到最后一次编辑的地方</strong></li>
<li><strong>Ctrl + Alt + H          打开调用层次结构</strong></li>
<li><strong>Ctrl + Shift + R        打开资源</strong></li>
<li><strong>Ctrl + Shift + T        打开类型</strong></li>
</ul>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul>
<li><strong>Ctrl + H                打开搜索对话框</strong></li>
<li><strong>Ctrl + F                打开文本搜索对话框</strong></li>
<li><strong>Ctrl + G                在workspace中搜索选中元素的声明</strong></li>
<li><strong>Ctrl + Alt + G          在workspace中搜索选中的文本</strong></li>
<li><strong>Ctrl + Shift + G        在workspace中搜索选中元素的引用</strong></li>
</ul>
<h2 id="编辑页面操作"><a href="#编辑页面操作" class="headerlink" title="编辑页面操作"></a>编辑页面操作</h2><ul>
<li><strong>Ctrl + W                关闭当前页面</strong></li>
<li><strong>Ctrl + E                查看所有页面目录</strong></li>
<li><strong>Alt + ←                 前一个编辑的页面</strong></li>
<li><strong>Alt + →                 后一个编辑的页面</strong></li>
<li><strong>Ctrl + ↑                上滚行</strong></li>
<li><strong>Ctrl + ↓                下滚行</strong></li>
<li><strong>Ctrl + Shift + -        双编辑窗口</strong></li>
</ul>
<h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><ul>
<li><strong>Ctrl + D                删除行:</strong></li>
<li><strong>Tab                     把当前选中的文本向右推进</strong></li>
<li><strong>Shift + Tab             把当前选中的文本向左缩进</strong></li>
<li><strong>Ctrl + Shift + Y        把当前选中的文本全部变为小写</strong> </li>
<li><strong>Ctrl + Shift + X        把当前选中的文本全部变为大写</strong></li>
<li><strong>Alt + ↑                 将行上移</strong></li>
<li><strong>Alt + ↓                 将行下移</strong></li>
<li><strong>Ctrl + Shift + Enter    在当前行上插入一行</strong></li>
<li><strong>Shift + Enter           在当前行下插入一行</strong></li>
</ul>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><ul>
<li><strong>Alt + Shift + T         打开重构菜单</strong></li>
<li><strong>Alt + Shift + R         重命名</strong></li>
<li><strong>Alt + Shift + M         选中内容生成一个方法</strong>         </li>
<li><strong>Alt + Shift + V         移动</strong></li>
<li><strong>Alt + Shift + C         改变方法参数</strong></li>
<li><strong>Alt + Shift + L         抽取本地变量</strong></li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul>
<li><strong>F5                      单步跳入</strong></li>
<li><strong>F6                      单步跳过</strong></li>
<li><strong>F7                      单步返回</strong></li>
<li><strong>F8                      继续</strong></li>
<li><strong>Ctrl + Shift + D        显示变量的值</strong></li>
<li><strong>Ctrl + Shift + B        在当前行设置或者去掉断点</strong></li>
<li><strong>Ctrl + R                运行至行</strong></li>
</ul>
<h2 id="设置字体与字体大小"><a href="#设置字体与字体大小" class="headerlink" title="设置字体与字体大小"></a>设置字体与字体大小</h2><p><strong>Window -&gt; Preferences -&gt; General -&gt; Appearance -&gt; Colors and Fonts右边Basic中的TextFont，再点击Edit进行修改</strong></p>
<h2 id="java智能提示"><a href="#java智能提示" class="headerlink" title="java智能提示"></a>java智能提示</h2><ol>
<li><strong>Window -&gt; Preferences</strong></li>
<li><strong>Java －&gt; Editor －&gt; Content Assist</strong></li>
<li><strong>右侧的”Auto-Activation”找到”Auto Activation triggers for java”选项</strong></li>
<li><strong>填入会提示的字符，如”.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ”</strong></li>
</ol>
<h2 id="XML智能提示"><a href="#XML智能提示" class="headerlink" title="XML智能提示"></a>XML智能提示</h2><ol>
<li><strong>Window -&gt; Preferences</strong></li>
<li><strong>XML －&gt; XML Files -&gt; Editor －&gt; Content Assist</strong></li>
<li><strong>右侧的”Auto-Activation”找到”Prompt when these characters are inserted “选项</strong></li>
<li><strong>填入会提示的字符，如”&lt;=:.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ”</strong></li>
</ol>
<h2 id="设置默认编码"><a href="#设置默认编码" class="headerlink" title="设置默认编码"></a>设置默认编码</h2><ol>
<li><strong>Window -&gt; Preferences -&gt; General -&gt; Workspace 面板Text file encoding</strong></li>
</ol>
<h2 id="设置代码风格"><a href="#设置代码风格" class="headerlink" title="设置代码风格"></a>设置代码风格</h2><ol>
<li><strong>Window -&gt; Preferences</strong></li>
<li><strong>Java -&gt; Code Style -&gt; Formatter</strong></li>
<li><strong>点击面板的Edit</strong></li>
<li><strong>在Profile name:中输入一个名称</strong></li>
<li><strong>在下面的设置中设置属性，如果是设置换行，点击Braces设置，完成后点击OK</strong></li>
</ol>
<h2 id="安装主题（Color-Theme）"><a href="#安装主题（Color-Theme）" class="headerlink" title="安装主题（Color Theme）"></a>安装主题（Color Theme）</h2><ol>
<li><strong>Help-&gt;Install New Software</strong></li>
<li><strong>在Work with中输入<a href="http://eclipse-color-theme.github.io/update/" target="_blank" rel="external">http://eclipse-color-theme.github.io/update/</a></strong></li>
<li><strong>下方会出现Eclipse Color Theme,在项目前点勾</strong></li>
<li><strong>点击Next &gt;,再点Next &gt;</strong></li>
<li><strong>选择I accept the terms of the license agreements</strong></li>
<li><strong>点击Finish</strong></li>
</ol>
<h2 id="导入JavaDOC与源码"><a href="#导入JavaDOC与源码" class="headerlink" title="导入JavaDOC与源码"></a>导入JavaDOC与源码</h2><ol>
<li><strong>Window -&gt; Preferences</strong></li>
<li><strong>Java -&gt; Installed JREs</strong></li>
<li><strong>选中使用的Jre包，点击Edit</strong></li>
<li><strong>Ctrl + A 全选中Jre包</strong></li>
<li><strong>点击Source Attachment..</strong></li>
<li><strong>点击External location,点击External File</strong></li>
<li><strong>选择Jdk文件夹下的src.zip文件</strong></li>
<li><strong>点击打开，点击OK</strong></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用&quot;&gt;&lt;a href=&quot;#常用&quot; class=&quot;headerlink&quot; title=&quot;常用&quot;&gt;&lt;/a&gt;常用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + Shift + F        格式排版&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + 1                快速修正&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + /                注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + Shift + /        添加块注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + Shift + \        除去块注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + Shift + Space    方法参数提示&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctril + F6              页面切换&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + Shift + O        去掉没用到的包&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F2                      显示提示&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F4                      打开元素继承列表&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + 鼠标点击         查看源码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + Z                撤销&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + Y                重做&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://luoweiguang.github.io/categories/Tool/"/>
    
    
      <category term="Tool" scheme="https://luoweiguang.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>UML之类图</title>
    <link href="https://luoweiguang.github.io/2016/03/19/UML%E4%B9%8B%E7%B1%BB%E5%9B%BE/"/>
    <id>https://luoweiguang.github.io/2016/03/19/UML之类图/</id>
    <published>2016-03-19T09:00:00.000Z</published>
    <updated>2017-08-06T10:08:35.683Z</updated>
    
    <content type="html"><![CDATA[<p>摘自<a href="http://blog.chinaunix.net/uid-26111972-id-3326225.html" target="_blank" rel="external">学习UML实现、泛化、依赖、关联、聚合、组合</a></p>
<p><strong>实现(Realization):</strong><br>指的是一个类实现接口（可以是多个）的功能；实现是类与接口之间最常见的关系；</p>
 <a id="more"></a>
<p><strong>泛化(Generalization):</strong><br>表现为继承或实现关系(is a)。具体形式为类与类之间的继承 关系，接口与接口之间的继承关系，类对接口的实现关系</p>
<p><strong>依赖 (Dependency):</strong><br>表现为函数中的参数(use a)。<br>是类与类之间的连接，表示一个类依赖于另一个类的定义，其中一个类的变化将影响另外一个类。例如如果A依赖于B，则B体现为局部变量，方法的参数、或静态方法的调用。常见的依赖关系如下：</p>
<ol>
<li>类B以参数的形式传入类A的方法。</li>
<li>类B以局部变量的形式存在于类A的方法中。</li>
<li>类A调用类B的静态方法。</li>
</ol>
<p><strong>关联（Association）:</strong><br>表现为变量(has a )。<br>类与类之间的联接，它使一个类知道另一个类的属性和方法。例如如果A依赖于B，则B体现为A的成员变量。<br>关联关系有双向关联和单向关联。<br>双向关联：两个类都知道另一个类的公共属性和操作。<br>单向关联：只有一个类知道另外一个类的公共属性和操作。<br>大多数关联应该是单向的，单向关系更容易建立和维护，有助于寻找可服用的类。</p>
<p><strong>聚合(Aggregat ion):</strong><br>是关联关系的一种，是强的关联关系。聚合关系是整体和个体的关系。普通关联关系的两个类处于同一层次上，而聚合关系的两个类处于不同的层次，一个是整体，一个是部分。同时，是一种弱的“拥有”关系。此时整体与部分之间是可分离的，他们可以具有各自的生命周期， 部分可以属于多个整体对象，也可以为多个整体对象共享；</p>
<p><strong>组合(Composition):</strong><br>是关联关系的一种，是比聚合关系强的关联关系。它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。Composition(组合关系)是一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一致。他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束；</p>
<p><img src="/img/20160319000001.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘自&lt;a href=&quot;http://blog.chinaunix.net/uid-26111972-id-3326225.html&quot;&gt;学习UML实现、泛化、依赖、关联、聚合、组合&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现(Realization):&lt;/strong&gt;&lt;br&gt;指的是一个类实现接口（可以是多个）的功能；实现是类与接口之间最常见的关系；&lt;/p&gt;
    
    </summary>
    
      <category term="UML" scheme="https://luoweiguang.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://luoweiguang.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概述|面向对象设计原则</title>
    <link href="https://luoweiguang.github.io/2016/03/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://luoweiguang.github.io/2016/03/18/设计模式概述面向对象设计原则/</id>
    <published>2016-03-18T13:00:00.000Z</published>
    <updated>2017-08-06T10:10:32.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式的4个主要优点"><a href="#设计模式的4个主要优点" class="headerlink" title="设计模式的4个主要优点"></a>设计模式的4个主要优点</h2><ol>
<li>它们提炼出专家的经验和智慧，为普通开发人员所用。</li>
<li>它们的名字组成了一个词汇表，有助于开发人员更好地交流。</li>
<li>系统的文档若记载了该系统所使用的模式，则有助于人们更快地理解系统。</li>
<li><p>它们使得对系统进行改造变得更加容易，无论系统原来的设计是否采用了模式。</p>
<a id="more"></a>
</li>
</ol>
<p>设计模式用于在特定的条件下为一些重复出现的软件设计问题提供合理的、有效的解决方案</p>
<p>设计模式(Design Pattern)是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结，使用设计模式是为了可重用代码、让代码更容易被他人理解并且保证代码可靠性。</p>
<p>设计模式一般包含模式名称、问题、目的、解决方案、效果等组成要素，其中关键要素是<strong>模式名称、问题、解决方案和效果</strong>。<br><strong>模式名称(Pattern Name)</strong><br>通过一两个词来描述模式的问题、解决方案和效果，以便更好地理解模式并方便开发人员之间的交流，绝大多数模式都是根据其功能或模式结构来命名的（GoF设计模式中没有一个模式用人名命名，微笑）；<br><strong>问题(Problem)</strong><br>描述了应该在何时使用模式，它包含了设计中存在的问题以及问题存在的原因；<br><strong>解决方案(Solution)</strong><br>描述了一个设计模式的组成成分，以及这些组成成分之间的相互关系，各自的职责和协作方式，通常解决方案通过UML类图和核心代码来进行描述；<br><strong>效果(Consequences)</strong><br>描述了模式的优缺点以及在使用模式时应权衡的问题。</p>
<p>根据它们的用途，设计模式可分为<strong>创建型(Creational)</strong>，<strong>结构型(Structural)</strong>和<strong>行为型(Behavioral)</strong>三种。<br><strong>创建型模式</strong>主要用于描述如何创建对象<br><strong>结构型模式</strong>主要用于描述如何实现类或对象的组合<br><strong>行为型模式</strong>主要用于描述类或对象怎样交互以及怎样分配职责</p>
<h2 id="设计模式遵循的七个原则"><a href="#设计模式遵循的七个原则" class="headerlink" title="设计模式遵循的七个原则:"></a>设计模式遵循的七个原则:</h2><ol>
<li>单一职责原则（Single Responsibility Principle）</li>
<li>里氏替换原则（Liskov Substitution Principle）</li>
<li>依赖倒置原则（Dependence Inversion Principle）</li>
<li>接口隔离原则（Interface Segregation Principle）</li>
<li>迪米特法则（Law Of Demeter）</li>
<li>开闭原则（Open Close Principle）</li>
<li>合成/聚合复用原则（Composite/Aggregate Reuse Principle）</li>
</ol>
<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><blockquote>
<p><strong>定义:</strong><br>不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。或者说就一个类而言，应该只有一个引起它变化的原因。</p>
<p><strong>问题由来:</strong>类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。<br><strong>解决方案:</strong>遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。</p>
</blockquote>
<p><strong>个人理解：</strong><br>程序设计其实是对复杂性的管理，当复杂性过高，项目将难以开发与维护，据说C语言的项目当代码超过50K后，项目的复杂度就急剧上升，而采取面向对象语言编程，通过对现实世界理解和抽象的方法，极大的帮助我们理解项目，使我们能够顺利的开发大型项目，而Java的出现，又帮助我们减少了开发健壮代码所需的时间以及困难。</p>
<p>面向对象的基本原则是：多聚合，少继承。低耦合，高内聚.</p>
<ul>
<li>内聚：内聚是从功能角度来度量模块内的联系，它描述的是模块内的功能联系</li>
<li>耦合：耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。</li>
</ul>
<p>一个模块的耦合性越强。那么模块的独立性越差，则越难以修改，对一个地方的修改，必然导致其他的地方需要修改。而内聚性越高，则说明模块各个元素的联系越紧密。低内聚的模块说明模块的职责不明确，比较松散，说明对其他模块的依赖程度高。不容易对模块进行修改。而高内聚，低耦合的系统具有更好的重用性，维护性，扩展性。</p>
<blockquote>
<p>单一职责原则可以看作是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起变化的原因就越多，这将是导致职责依赖，相互之间就产生影响，从而极大的损伤其内聚性和耦合度。单一职责通常意味着单一的功能，因此不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因</p>
</blockquote>
<p>按照职责来控制软件的可维护性和复杂性</p>
<p><strong>单一职责原则的好处：</strong></p>
<blockquote>
<p>降低类的复杂性，实现什么样的职责都有清晰的定义<br>提高可读性<br>提高可维护性<br>降低变更引起的风险，对系统扩展性和维护性很有帮助</p>
</blockquote>
<p><strong>注意:</strong><br>职责扩散:职责扩散，就是因为某种原因，职责P被分化为粒度更细的职责P1和P2。</p>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><blockquote>
<p><strong>定义:</strong><br>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。<br>定义2：子类型必须能够替换掉它们的父类型。</p>
<p><strong>问题由来:</strong>有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。<br><strong>解决方案:</strong>当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。</p>
</blockquote>
<p><strong>个人理解:</strong><br>继承是面向对象的三大特性之一，但继承破坏了类的封装性，并且耦合性太大，如果只是通过继承父类的方法与变量来达到减少代码的书写，明显继承是得不偿失的。并且继承使得子类可以重写父类的方法，但这可能造成乱用使子类方法偏离父类方法的意图，使得代码内聚性降低，且不利于代码的扩展与复用。</p>
<p>里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。(对扩展开放，对修改关闭)</p>
<blockquote>
<p>它包含以下4层含义：<br>1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。<br>2.子类中可以增加自己特有的方法。<br>3.当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。<br>4.当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</p>
</blockquote>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p><strong>定义:</strong><br>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。即针对接口编程，不要针对实现编程</p>
<blockquote>
<p>问题由来：类A直接依赖类B，假如要将类A改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原子操作；假如修改类A，会给程序带来不必要的风险。<br>解决方案：将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率。</p>
</blockquote>
<hr>
<p><strong>个人理解:</strong><br>在传统的软件开发中，常常会把项目进行分层，通过一层层不断的叠加来实现最终的效果，而高层次依赖与低层次的接口。有句话大概是这么说的，计算机世界没有什么不能模拟的，如果没有的话，那就再加一层。这种方式能够帮助我们理清各个功能模块。而且越是大型的系统，层次划分越明确，但是这也造成一个缺点，如果低层次进行了修改，甚至是删除某些Api,那么就会造成高层次的不兼容问题，那么假如我们在高层次与低层次之间定义好统一接口，只要低层次的修改遵守了定义好的接口，那么就会极大的减少高层不兼容问题的发生。</p>
<blockquote>
<p>依赖倒置原则基于这样一个事实：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。在java中，抽象指的是接口或者抽象类，细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成<br>依赖倒置原则的核心思想是面向接口编程.</p>
</blockquote>
<hr>
<blockquote>
<p>依赖倒置有三种方式来实现</p>
<ol>
<li>通过构造函数传递依赖对象；<br>比如在构造函数中的需要传递的参数是抽象类或接口的方式实现。</li>
<li>通过setter方法传递依赖对象；<br>即在我们设置的setXXX方法中的参数为抽象类或接口，来实现传递依赖对象。</li>
<li>接口声明实现依赖对象，也叫接口注入；<br>即在函数声明中参数为抽象类或接口，来实现传递依赖对象，从而达到直接使用依赖对象的目的。</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>在实际编程中，我们一般需要做到如下3点：<br>低层模块尽量都要有抽象类或接口，或者两者都有。<br>变量的声明类型尽量是抽象类或接口。<br>使用继承时遵循里氏替换原则。</p>
</blockquote>
<hr>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><blockquote>
<p><strong>定义:</strong>客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。<br><strong>问题由来:</strong>类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是最小接口，则类B和类D必须去实现他们不需要的方法。<br><strong>解决方案:</strong>将臃肿的接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。</p>
</blockquote>
<p><strong>个人理解:</strong><br>在Java开发中，有种说法是面向接口编程，因为所谓的面向接口就是定义了一个开发规范，是我们对软件系统某一方面的抽象，使我们更容易对软件系统进行修改，维护与更新。而面向接口编程就是通过面向对象语言提供的多态性与接口或抽象类相结合的方式提供支持的。通过接口我们能够知道实现此接口的类有那些功能。假如我们将所有的规范都放入到一个接口中，那么就会造成这个接口的臃肿，使我们不清楚实现此接口的类所具有的功能与特性，并且造成大量的空方法实现。使得我们原本希望通过接口规范进行约束与抽象实现类的功能的作用大大削弱，使得项目的维护难度大大提升，也不利于团队的开发。所以每个接口都应该划分清自己的职责，避免类实现的混乱与对不需要的接口的依赖。</p>
<hr>
<blockquote>
<p>   接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。本文例子中，将一个庞大的接口变更为3个专用的接口所采用的就是接口隔离原则。在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p>
</blockquote>
<hr>
<blockquote>
<p>说到这里，很多人会觉的接口隔离原则跟之前的单一职责原则很相似，其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。</p>
</blockquote>
<hr>
<blockquote>
<p>采用接口隔离原则对接口进行约束时，要注意以下几点：<br>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。<br>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。<br>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。<br>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p>
</blockquote>
<hr>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><blockquote>
<p><strong>定义:</strong>一个对象应该对其他对象保持最少的了解。<br><strong>问题由来:</strong>类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。<br><strong>解决方案:</strong>尽量降低类与类之间的耦合。</p>
</blockquote>
<hr>
<blockquote>
<p>自从我们接触编程开始，就知道了软件编程的总的原则：低耦合，高内聚。无论是面向过程编程还是面向对象编程，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。低耦合的优点不言而喻，但是怎么样编程才能做到低耦合呢？那正是迪米特法则要去完成的。</p>
</blockquote>
<hr>
<blockquote>
<p>迪米特法则又叫最少知道原则，最早是在1987年由美国Northeastern University的Ian Holland提出。通俗的来讲，就是一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。迪米特法则还有一个更简单的定义：只与直接的朋友通信。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。</p>
</blockquote>
<hr>
<blockquote>
<p> 迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖，因此的确可以降低耦合关系。但是凡事都有度，虽然可以避免与非直接的类通信，但是要通信，必然会通过一个“中介”来发生联系。过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大。所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合。</p>
</blockquote>
<hr>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><blockquote>
<p><strong>定义:</strong>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。<br><strong>问题由来:</strong>在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。<br><strong>解决方案:</strong>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p>
</blockquote>
<p><strong>个人理解:</strong><br>当我们写项目时，因为需求的不确定性与业务的发展等原因，要经常会对原有的项目进行不断的修改与添加新的功能，软件工程的出现很大一部分原因就是为了解决这种不确定性。当我们项目的模块之间如果依赖程度较高，或者说耦合性比较大时，那么对与原有项目代码的进行修改，那就会出现噩梦般的情况，一个方法的修改可能会出现一连串的连锁反应。即一个方法的改变就会造成多个类的多个方法发生错误，这时候要排除问题也比较麻烦。所以好的项目就应该少修改原有项目的代码，尤其是一些与业务直接相关的模块，那么不对原有项目进行修改，怎么实现新的需求呢，其实我们可以借助于抽象性对项目进行扩充与替换，而不需要修改原有代码，假如我们在开发时就定义好了接口，那么在后续开发中，我们只要遵循原先定义好的类，就可以将原有的项目模块进行替换与添加，软件开发要写文档的原因很重要的是为了写好规范，让后来者能通过文档快速的了解<br>原有的项目，但跟文档比起来，先设计出有良好的接口更能让开发者快速的对原项目进行修改，而不是陷入到无休止的修改BUG上。很明显要实现开闭原则，其实就是要尽量实现其他的原则。</p>
<hr>
<blockquote>
<p>开闭原则是面向对象设计中最基础的设计原则，它指导我们如何建立稳定灵活的系统。开闭原则可能是设计模式六项原则中定义最模糊的一个了，它只告诉我们对扩展开放，对修改关闭，可是到底如何才能做到对扩展开放，对修改关闭，并没有明确的告诉我们。以前，如果有人告诉我“你进行设计的时候一定要遵守开闭原则”，我会觉的他什么都没说，但貌似又什么都说了。因为开闭原则真的太虚了。</p>
</blockquote>
<hr>
<blockquote>
<p>在仔细思考以及仔细阅读很多设计模式的文章后，终于对开闭原则有了一点认识。其实，我们遵循设计模式前面5大原则，以及使用23种设计模式的目的就是遵循开闭原则。也就是说，只要我们对前面5项原则遵守的好了，设计出的软件自然是符合开闭原则的，这个开闭原则更像是前面五项原则遵守程度的“平均得分”，前面5项原则遵守的好，平均分自然就高，说明软件设计开闭原则遵守的好；如果前面5项原则遵守的不好，则说明开闭原则遵守的不好。</p>
</blockquote>
<hr>
<blockquote>
<p>开闭原则无非就是想表达这样一层意思：<strong>用抽象构建框架，用实现扩展细节</strong>。因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节，我们用从抽象派生的实现类来进行扩展，当软件需要发生变化时，我们只需要根据需求重新派生一个实现类来扩展就可以了。当然前提是我们的抽象要合理，要对需求的变更有前瞻性和预见性才行。</p>
</blockquote>
<hr>
<blockquote>
<p>说到这里，再回想一下前面说的5项原则，恰恰是告诉我们用抽象构建框架，用实现扩展细节的注意事项而已：单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合。而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭。</p>
</blockquote>
<hr>
<blockquote>
<p>最后说明一下如何去遵守这六个原则。对这六个原则的遵守并不是是和否的问题，而是多和少的问题，也就是说，我们一般不会说有没有遵守，而是说遵守程度的多少。任何事都是过犹不及，设计模式的六个设计原则也是一样，制定这六个原则的目的并不是要我们刻板的遵守他们，而需要根据实际情况灵活运用。对他们的遵守程度只要在一个合理的范围内，就算是良好的设计。</p>
</blockquote>
<hr>
<h2 id="合成-聚合复用原则"><a href="#合成-聚合复用原则" class="headerlink" title="合成/聚合复用原则"></a>合成/聚合复用原则</h2><blockquote>
<p><strong>定义:</strong>尽量使用对象组合，而不是继承来达到复用的目的。</p>
</blockquote>
<hr>
<blockquote>
<p>合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合/聚合关系（关联关系），少用继承。</p>
</blockquote>
<hr>
<blockquote>
<p>在面向对象设计中，可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p>
</blockquote>
<hr>
<blockquote>
<p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）。</p>
</blockquote>
<hr>
<blockquote>
<p>由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。</p>
</blockquote>
<hr>
<blockquote>
<p>一般而言，如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不同，它表示某一个角色具有某一项责任。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>继承复用</strong><br><strong>优点:</strong></p>
<ol>
<li>新的实现较为容易，因为基类的大部分功能可以通过继承关系自动进入派生类</li>
<li>修改或扩展继承而来的实现较为容易<br><strong>缺点:</strong></li>
<li>继承复用破坏包装，因为继承将基类的实现细节暴露给派生类，这种复用也称为白箱复用</li>
<li>如果基类的实现发生改变，那么派生类的实现也不得不发生改变</li>
<li>从基类继承而来的实现是静态的，不可能在运行时发生改变，不够灵活</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p><strong>合成/聚合复用</strong><br><strong>优点:</strong></p>
<ol>
<li>新对象存取成分对象的唯一方法是通过成分对象的接口；</li>
<li>这种复用是黑箱复用，因为成分对象的内部细节是新对象所看不见的；</li>
<li>这种复用支持包装；</li>
<li>这种复用所需的依赖较少；</li>
<li>每一个新的类可以将焦点集中在一个任务上；</li>
<li>这种复用可以在运行时动态进行，新对象可以使用合成/聚合关系将新的责任委派到合适的对象。<br><strong>缺点:</strong></li>
<li>通过这种方式复用建造的系统会有较多的对象需要管理。</li>
</ol>
</blockquote>
<hr>
<h2 id="耦合内聚分类"><a href="#耦合内聚分类" class="headerlink" title="耦合内聚分类"></a>耦合内聚分类</h2><blockquote>
<p>耦合性分类(低――高): 无直接耦合;数据耦合;标记耦合;控制耦合;公共耦合;内容耦合;<br>1 无直接耦合:<br>2 数据耦合: 指两个模块之间有调用关系，传递的是简单的数据值，相当于高级语言的值传递;<br>3 标记耦合: 指两个模块之间传递的是数据结构，如高级语言中的数组名、记录名、文件名等这些名字即标记，其实传递的是这个数据结构的地址;<br>4 控制耦合: 指一个模块调用另一个模块时，传递的是控制变量（如开关、标志等），被调模块通过该控制变量的值有选择地执行块内某一功能;<br>5 公共耦合: 指通过一个公共数据环境相互作用的那些模块间的耦合。公共耦合的复杂程序随耦合模块的个数增加而增加。<br>6 内容耦合: 这是最高程度的耦合，也是最差的耦合。当一个模块直接使用另一个模块的内部数据，或通过非正常入口而转入另一个模块内部。</p>
</blockquote>
<hr>
<blockquote>
<p>内聚性分类(低――高): 偶然内聚;逻辑内聚;时间内聚;通信内聚;顺序内聚;功能内聚;<br>1 偶然内聚: 指一个模块内的各处理元素之间没有任何联系。<br>2 逻辑内聚: 指模块内执行几个逻辑上相似的功能，通过参数确定该模块完成哪一个功能。<br>3 时间内聚: 把需要同时执行的动作组合在一起形成的模块为时间内聚模块。<br>4 通信内聚: 指模块内所有处理元素都在同一个数据结构上操作（有时称之为信息内聚），或者指各处理使用相同的输入数据或者产生相同的输出数据。<br>5 顺序内聚: 指一个模块中各个处理元素都密切相关于同一功能且必须顺序执行，前一功能元素输出就是下一功能元素的输入。<br>6 功能内聚: 这是最强的内聚，指模块内所有元素共同完成一个功能，缺一不可。与其他模块的耦合是最弱的。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/robnetcn/archive/2012/04/15/2449008.html" target="_blank" rel="external">什么是高内聚、低耦合</a><br><a href="http://blog.csdn.net/column/details/pattern.html?&amp;page=2" target="_blank" rel="external">设计模式专栏</a><br><a href="http://blog.csdn.net/yuluows/article/details/7013343" target="_blank" rel="external">设计模式6大原则之-单一职责原则</a><br><a href="http://blog.csdn.net/LoveLion/article/category/738450" target="_blank" rel="external">设计模式</a><br><a href="http://blog.csdn.net/plusir/article/details/1099824" target="_blank" rel="external">《java与模式》笔记(六) 合成/聚合复用原则</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式的4个主要优点&quot;&gt;&lt;a href=&quot;#设计模式的4个主要优点&quot; class=&quot;headerlink&quot; title=&quot;设计模式的4个主要优点&quot;&gt;&lt;/a&gt;设计模式的4个主要优点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;它们提炼出专家的经验和智慧，为普通开发人员所用。&lt;/li&gt;
&lt;li&gt;它们的名字组成了一个词汇表，有助于开发人员更好地交流。&lt;/li&gt;
&lt;li&gt;系统的文档若记载了该系统所使用的模式，则有助于人们更快地理解系统。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它们使得对系统进行改造变得更加容易，无论系统原来的设计是否采用了模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://luoweiguang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="总结" scheme="https://luoweiguang.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="设计模式" scheme="https://luoweiguang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="https://luoweiguang.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接SQLServer的配置问题</title>
    <link href="https://luoweiguang.github.io/2016/03/15/JDBC%E8%BF%9E%E6%8E%A5SQLServer%E7%9A%84%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://luoweiguang.github.io/2016/03/15/JDBC连接SQLServer的配置问题/</id>
    <published>2016-03-15T01:00:00.000Z</published>
    <updated>2017-08-06T10:14:16.430Z</updated>
    
    <content type="html"><![CDATA[<p><strong>背景：Microsoft SQL Server 2008 R2</strong></p>
<h2 id="建立SQl-Server身份验证账户"><a href="#建立SQl-Server身份验证账户" class="headerlink" title="建立SQl Server身份验证账户"></a>建立SQl Server身份验证账户</h2> <a id="more"></a>
<ol>
<li>先通过Window 身份验证登录数据库</li>
<li>点击安全性 -&gt; 登录名 ，右键新建登录名</li>
<li>在弹出框中，填写登录名：（即账号名）</li>
<li>点选SQL Server身份验证</li>
<li>填写密码与确认密码</li>
<li>点击选择页的状态</li>
<li>是否允许连接到数据库引擎，选择授予</li>
<li>登录选择启用</li>
<li>点击选择页的用户映射</li>
<li>选择映射的数据库（打钩）并点击</li>
<li>在下方的数据库角色成员身份选择db_datareader（可读）与db_datawriter(可写)（更多选择，请见下方列表）</li>
<li>点击确定</li>
<li>服务器右键属性</li>
<li>在选择页中选择安全性</li>
<li>在服务器身份验证中选择SQL Server 和Window 身份验证模式</li>
<li>点击确定</li>
<li>重启SQl Server服务</li>
</ol>
<h2 id="重启SQl-Server服务"><a href="#重启SQl-Server服务" class="headerlink" title="重启SQl Server服务"></a>重启SQl Server服务</h2><ol>
<li>开始菜单 -&gt; 所有程序 -&gt; Microsoft SQL Server 2008 R2 -&gt; 配置工具 -&gt;SQL Server配置管理器</li>
<li>选择SQL Server服务 -&gt; SQl Server(SQLEXPRESS)</li>
<li>点击右键 -&gt; 重新启动</li>
</ol>
<h2 id="设置连接端口"><a href="#设置连接端口" class="headerlink" title="设置连接端口"></a>设置连接端口</h2><p><strong>（解决”通过端口 1433 连接到主机 127.0.0.1 的 TCP/IP 连接失败””的问题）</strong></p>
<ol>
<li>开始菜单 -&gt; 所有程序 -&gt; Microsoft SQL Server 2008 R2 -&gt; 配置工具 -&gt;SQL Server配置管理器</li>
<li>选择SQL Server网络配置 -&gt; SQLEXPRESS的协议</li>
<li>点击TCP/IP，右键属性</li>
<li>点击IP地址，输入TCP端口号，并把TCP动态端口的数据删除</li>
<li>点击确定</li>
<li>再右键,点击启动</li>
<li>重启SQl Server服务<h2 id="导入JDBC的jar包"><a href="#导入JDBC的jar包" class="headerlink" title="导入JDBC的jar包"></a>导入JDBC的jar包</h2></li>
</ol>
<p>※下载JDBC的jar包,需要把jar包复制到lib目录下，如果只是通过Build Path方式导入JDBC的jar包，运行时会报ClassNotFoundException异常</p>
<h2 id="SQL-Server中角色与权限管理"><a href="#SQL-Server中角色与权限管理" class="headerlink" title="SQL Server中角色与权限管理"></a>SQL Server中角色与权限管理</h2><blockquote>
<p><strong>服务器角色:</strong><br>按照从最低级别角色(bulkadmin)到最高级别角色(sysadmin)的顺序进行描述:</p>
<ol>
<li><strong>bulkadmin</strong>:这个角色可以运行BULK INSERT语句.该语句允许从文本文件中将数据导入到SQL Server2008数据库中,为需要执行大容量插入到数据库的域帐号而设计.</li>
<li><strong>dbcreator</strong>:这个角色可以创建,更改,删除和还原任何数据库.不仅适合助理DBA角色,也可能适合开发人员角色.</li>
<li><strong>diskadmin</strong>:这个角色用于管理磁盘文件,比如镜像数据库和添加备份设备适合助理DBA</li>
<li><strong>processadmin</strong>:SQL Server 2008可以同时多进程处理.这个角色可以结束进程(在SQL Server 2008中称为”删除”)</li>
<li><strong>public</strong>:有两大特点:第一,初始状态时没有权限;第二,所有数据库用户都是它的成员</li>
<li><strong>securityadmin</strong>:这个角色将管理登录名及其属性.可以授权,拒绝和撤销服务器级/数据库级权限.可以重置登录名和密码</li>
<li><strong>serveradmin</strong>:这个角色可以更改服务器范围的配置选项和关闭服务器</li>
<li><strong>setupadmin</strong>:为需要管理联接服务器和控制启动的存储过程的用户而设计</li>
<li><strong>sysadmin</strong>:这个角色有权在SQL Server 2008 中执行任何操作.</li>
</ol>
<p><strong>数据库角色成员身份:</strong></p>
<ol>
<li><strong>db_accessadmin</strong>:可以在数据库中添加和删除数据库用户, 组及角色</li>
<li><strong>db_backupoperator</strong>:可以备份数据库</li>
<li><strong>db_datareader</strong> 可以读取任何表中的数据</li>
<li><strong>db_datawriter</strong> 可以添加、更改或删除所有表中的数据</li>
<li><strong>db_ddladmin</strong> 可以添加、更改或删除数据库对象(即可以执行任何DDL语句)</li>
<li><strong>db_denydatareader</strong> 不能读取任何表中的数据,但仍然可以通过存储过程来查看</li>
<li><strong>db_denydatawriter</strong> 不能更改任何表中的数据,但仍然可以通过存储过程来修改</li>
<li><strong>db_owner</strong> 执行任何操作</li>
<li><strong>db_securityadmin</strong> 可以更改数据中的权限和角色</li>
<li><strong>public</strong>:每个数据库用户都属于public角色.未对用户授权之前,该用户将被授予public角色的权限.该角色不能被删除</li>
</ol>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/bigheadsheep/article/details/8722175" target="_blank" rel="external">SQL Server中角色与权限管理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;背景：Microsoft SQL Server 2008 R2&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;建立SQl-Server身份验证账户&quot;&gt;&lt;a href=&quot;#建立SQl-Server身份验证账户&quot; class=&quot;headerlink&quot; title=&quot;建立SQl Server身份验证账户&quot;&gt;&lt;/a&gt;建立SQl Server身份验证账户&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://luoweiguang.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://luoweiguang.github.io/tags/JavaWeb/"/>
    
      <category term="配置" scheme="https://luoweiguang.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="坑" scheme="https://luoweiguang.github.io/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>反射|Class|Field|Method|Constructor类</title>
    <link href="https://luoweiguang.github.io/2016/03/14/%E5%8F%8D%E5%B0%84ClassFieldMethodConstructor%E7%B1%BB/"/>
    <id>https://luoweiguang.github.io/2016/03/14/反射ClassFieldMethodConstructor类/</id>
    <published>2016-03-14T12:00:00.000Z</published>
    <updated>2017-08-06T09:14:52.728Z</updated>
    
    <content type="html"><![CDATA[<p>反射的概念是指程序可以访问、检测和修改它本身状态或行为的一种能力，通俗来说就是获得自身的信息并能够进行修改。</p>
<p>要弄懂反射就要弄懂Java的类加载器机制。在Java中每个，class文件都有一个对应的Class对象，类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个这个类的java.lang.Class对象，用来封装类在方法区类的对象。通过Class对象我们就可以知道这个Clas文件的所有信息，如字段，方法，构造方法，父类，注释等。</p>
  <a id="more"></a>
<p><strong>Class:</strong><br>Java程序在运行时，Java运行时系统一直对所有的对象进行所谓的运行时类型标识。这项信息纪录了每个对象所属的类。虚拟机通常使用运行时类型信息选准正确方法去执行，用来保存这些类型信息的类是Class类。Class类封装一个对象和接口运行时的状态，当装载类时，Class类型的对象自动创建。</p>
<p>Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的，因此不能显式地声明一个Class对象。</p>
<p>虚拟机为每种类型管理一个独一无二的Class对象。也就是说，每个类（型）都有一个Class对象。运行程序时，Java虚拟机(JVM)首先检查是否所要加载的类对应的Class对象是否已经加载。如果没有加载，JVM就会根据类名查找.class文件，并将其Class对象载入。</p>
<p>基本的 Java 类型（boolean、byte、char、short、int、long、float 和 double）和关键字 void 也都对应一个 Class 对象。 </p>
<p>每个数组属于被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。</p>
<p>一般某个类的Class对象被载入内存，它就用来创建这个类的所有对象。</p>
<p><strong>获取Class对象的方式</strong></p>
<ol>
<li>运用static method Class.forName(),参数name为Class对应的类的全名(包括包名);<pre class=" language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lwg.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>调用类的class属性得到类对应的Class对象<pre class=" language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test2 <span class="token operator">=</span> Cat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>调用类的实例化对象的getClass()方法<pre class=" language-java"><code class="language-java">Cat mCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test3 <span class="token operator">=</span> mCat<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>运用primitive wrapper classes的TYPE 语法（这里返回的是原生类型，和Boolean.class返回的不同）<pre><code>Class&lt;?&gt; Test4 = Integer.TYPE;
</code></pre></li>
</ol>
<p>得到对应类的Class对象对应后，我们就可以通过该Class对象得到它所对应的类的一些信息，比如该类的构造函数、成员(属性)、方法(函数)；</p>
<p><strong>Class类API(部分):</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>static Class&lt; ? &gt;</td>
<td>forName(String  className)</td>
</tr>
<tr>
<td></td>
<td>返回与带有给定字符串名的类或接口相关联的 Class 对象</td>
</tr>
<tr>
<td>ClassLoader</td>
<td>getClassLoader()</td>
</tr>
<tr>
<td></td>
<td>返回该类的类加载器</td>
</tr>
<tr>
<td>Constructor&lt; T &gt;</td>
<td>getConstructor(Class&lt;?&gt;… parameterTypes)</td>
</tr>
<tr>
<td></td>
<td>返回一个 Constructor 对象，它反映此 Class对象所表示的类的指定公共构造方法</td>
</tr>
<tr>
<td>Constructor&lt; T &gt;</td>
<td>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
</tr>
<tr>
<td></td>
<td>返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类或接口的指定构造方法</td>
</tr>
<tr>
<td>Constructor&lt; ? &gt;[]</td>
<td>getDeclaredConstructors()</td>
</tr>
<tr>
<td></td>
<td>返回 Constructor 对象的一个数组，这些对象反映此 Class对象表示的类声明的所有构造方法</td>
</tr>
<tr>
<td>Constructor&lt; ? &gt;[]</td>
<td>getConstructors()</td>
</tr>
<tr>
<td></td>
<td>返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class对象所表示的类的所有公共构造方法</td>
</tr>
<tr>
<td>Class&lt; ? &gt;</td>
<td>getDeclaringClass()</td>
</tr>
<tr>
<td></td>
<td>如果此 Class 对象所表示的类或接口是另一个类的成员，则返回的 Class 对象表示该对象的声明类。</td>
</tr>
<tr>
<td>Class&lt; ? &gt;[]</td>
<td>getDeclaredClasses()</td>
</tr>
<tr>
<td></td>
<td>返回类中定义的所有公共、私有、保护的内部类</td>
</tr>
<tr>
<td>Class&lt; ? &gt;[]</td>
<td>getClasses()</td>
</tr>
<tr>
<td></td>
<td>返回类定义的所有公共的内部类,以及从父类、父接口那里继承来的内部类</td>
</tr>
<tr>
<td>Field</td>
<td>getDeclaredField(String name)</td>
</tr>
<tr>
<td></td>
<td>返回一个 Field 对象，该对象反映此 Class对象所表示的类或接口的指定已声明字段</td>
</tr>
<tr>
<td>Field</td>
<td>getField(String name)</td>
</tr>
<tr>
<td></td>
<td>返回一个 Field 对象，它反映此 Class对象所表示的类或接口的指定公共成员字段</td>
</tr>
<tr>
<td>Field[]</td>
<td>getDeclaredFields()</td>
</tr>
<tr>
<td></td>
<td>返回 Field 对象的一个数组，这些对象反映此 Class对象所表示的类或接口所声明的所有字段</td>
</tr>
<tr>
<td>Field[]</td>
<td>getFields()</td>
</tr>
<tr>
<td></td>
<td>返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段</td>
</tr>
<tr>
<td>Method</td>
<td>getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes)</td>
</tr>
<tr>
<td></td>
<td>返回一个 Method 对象，该对象反映此 Class对象所表示的类或接口的指定已声明方法</td>
</tr>
<tr>
<td>Method</td>
<td>getMethod(String name,Class&lt;?&gt;… parameterTypes)</td>
</tr>
<tr>
<td></td>
<td>返回一个 Method 对象，它反回此 Class对象所表示的类或接口的指定公共成员方法</td>
</tr>
<tr>
<td>Method[]</td>
<td>getDeclaredMethods()</td>
</tr>
<tr>
<td></td>
<td>返回 Method 对象的一个数组，这些对象反映此 Class对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法</td>
</tr>
<tr>
<td>Method[]</td>
<td>getMethods()</td>
</tr>
<tr>
<td></td>
<td>返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法</td>
</tr>
<tr>
<td>boolean</td>
<td>isInterface()</td>
</tr>
<tr>
<td></td>
<td>判定指定的 Class 对象是否表示一个接口类型</td>
</tr>
<tr>
<td>T</td>
<td>newInstance()</td>
</tr>
<tr>
<td></td>
<td>创建此Class对象所表示的类的一个新实例（必须带有默认的构造器）</td>
</tr>
<tr>
<td>Class&lt; ? super T &gt;</td>
<td>getSuperclass()</td>
</tr>
<tr>
<td></td>
<td>返回超类</td>
</tr>
<tr>
<td>Package</td>
<td>getPackage()</td>
</tr>
<tr>
<td></td>
<td>获取此类的包</td>
</tr>
</tbody>
</table>
<p><strong>Field:</strong><br>Field类型的对象就是描述Class对象对应类的出现包括public、protected、private属性)；一个Field对象对应描述一个类的字段；<br>Field类中定义了一些方法，可以用来查询字段的类型以及设置或读取字段的值。将这些方法与继承而来的member方法结合在一起.就可以使我们能够找出有关字段声明的全部信息，并且能够操纵某个特定对象或类的字段。<br><strong>Field类API(部分):</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th style="text-align:left">方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td style="text-align:left">setAccessible(boolean flag)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">参数为true，只要是在类中声明的目标属性均可访问，为false，只有public目标属性可访问</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">set(Object object, Object value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">给目标属性设置值(private、protected属性均不能访问，但可以通过先调用setAccessible(true)实现访问)，第一个参数为目标属性所在类的对象，第二个参数为传入的值</td>
</tr>
<tr>
<td>Object</td>
<td style="text-align:left">get(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">得到目标属性的值(private、protected属性均不能访问，但可以通过调用setAccessible(true)实现访问)，参数为目标属性所在类的对象</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setBoolean(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为boolean</td>
</tr>
<tr>
<td>boolean</td>
<td style="text-align:left">getBoolean(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为boolean</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setByte(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为byte</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:left">getByte(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为byte</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setShort(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为short</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:left">getShort(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为short</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setInt(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为int</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:left">getInt(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为int</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setLong(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为long</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:left">getLong(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为long</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setFloat(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为float</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:left">getFloat(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为float</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setDouble(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为double</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:left">getDouble(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为double</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">setChar(Object object, boolean value)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同set(Object object, Object value)，只不过操作的数据类型为char</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:left">getChar(Object object)</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">同get(Object object)，只不过得到的数据类型为char</td>
</tr>
<tr>
<td>String</td>
<td style="text-align:left">getName()</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">得到目标属性的名字，不局限于private修饰符，只要是类中声明的属性</td>
</tr>
<tr>
<td>Type</td>
<td style="text-align:left">getGenericType()</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">得到目标属性的类型，不局限于private修饰符</td>
</tr>
<tr>
<td>Class&lt; ? &gt;</td>
<td style="text-align:left">getType()</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">得到目标属性的类型对应的Class对象</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:left">getModifiers()</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">得到目标属性的修饰符值(private为2、protected为4、public为1、static为8、final为16,结果为相加，例如public static final为25)</td>
</tr>
<tr>
<td>Class&lt; ? &gt;</td>
<td style="text-align:left">getDeclaringClass()</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">得到目标属性所在类对应的Class对象</td>
</tr>
</tbody>
</table>
<p><strong>Method:</strong><br> 同Fiel一样，一个Method对象对应描述一个类的方法；<br><strong>Method类API(部分):</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>setAccessible(boolean flag)</td>
</tr>
<tr>
<td></td>
<td>参数为true，只要是在类中声明的目标方法均可访问，为false，只有public目标属性可访问</td>
</tr>
<tr>
<td>Object</td>
<td>invoke(Object receiver, Object… args)</td>
</tr>
<tr>
<td></td>
<td>动态执行调用目标方法，第一个参数为Class对象或者类的实例，第二个参数为可变实参的对象(多个实参)</td>
</tr>
<tr>
<td>Class&lt; ? &gt;</td>
<td>getDeclaringClass()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法所在类对应的Class对象</td>
</tr>
<tr>
<td>Class&lt; ? &gt;</td>
<td>getExceptionTypes()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法抛出的异常类型对应的Class对象</td>
</tr>
<tr>
<td>Type[]</td>
<td>getGenericExceptionTypes()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法抛出的异常类型对应的Type对象</td>
</tr>
<tr>
<td>Class&lt; ? &gt;</td>
<td>getReturnType()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法返回类型对应的Class对象</td>
</tr>
<tr>
<td>Type</td>
<td>getGenericReturnType()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法返回类型对应的Type对象</td>
</tr>
<tr>
<td>Class&lt; ? &gt;[]</td>
<td>getParameterTypes()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法各参数类型对应的Class对象</td>
</tr>
<tr>
<td>Type[]</td>
<td>getGenericParameterTypes()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法各参数类型对应的Type对象</td>
</tr>
<tr>
<td>int</td>
<td>getModifiers()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法修饰符的值</td>
</tr>
<tr>
<td>String</td>
<td>getName()</td>
</tr>
<tr>
<td></td>
<td>得到目标方法的名字</td>
</tr>
</tbody>
</table>
<p><strong>Constructor:</strong><br>Constructor对象对应于类的构造方法。<br><strong>Constructor类API(部分):</strong></p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>getName()</td>
</tr>
<tr>
<td></td>
<td>以字符串形式返回此构造方法的名称</td>
</tr>
<tr>
<td>int</td>
<td>getModifiers()</td>
</tr>
<tr>
<td></td>
<td>以整数形式返回此 Constructor 对象所表示构造方法的 Java 语言修饰符</td>
</tr>
<tr>
<td>Class&lt; ? &gt;[]</td>
<td>getParameterTypes()</td>
</tr>
<tr>
<td></td>
<td>按照声明顺序返回一组 Class 对象，这些对象表示此 Constructor 对象所表示构造方法的形参类型</td>
</tr>
<tr>
<td>T</td>
<td>newInstance(Object… initargs)</td>
</tr>
<tr>
<td></td>
<td>使用此 Constructor 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例</td>
</tr>
<tr>
<td>void</td>
<td>setAccessible(boolean flag)</td>
</tr>
<tr>
<td></td>
<td>参数为true，只要是在类中声明的构造方法均可访问，为false，只有public目标属性可访问</td>
</tr>
</tbody>
</table>
<p><strong>代码:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lwg<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lwg<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUMBER <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> String Color <span class="token operator">=</span> <span class="token string">"白色"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String Sex <span class="token operator">=</span><span class="token string">"公"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String Color<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Color <span class="token operator">=</span> Color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"瞄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"瞄...瞄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Smile</span><span class="token punctuation">(</span><span class="token keyword">int</span> fish<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> fish<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"瞄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lwg<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">;</span>

<span class="token keyword">import</span> jdk<span class="token punctuation">.</span>nashorn<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>linker<span class="token punctuation">.</span>InvokeByName<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//运用static method Class.forName(),参数name为Class对应的类的全名(包括包名);</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lwg.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//运用static method Class.forName(),参数name为Class对应的类的全名(包括包名);</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test2 <span class="token operator">=</span> Cat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//调用类的实例化对象的getClass()方法</span>
        Cat mCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test3 <span class="token operator">=</span> mCat<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//运用primitive wrapper classes的TYPE</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test4 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//通过ClassLoader获得Class对象</span>
        ClassLoader mClassLoader <span class="token operator">=</span> Test1<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test5 <span class="token operator">=</span> mClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.lwg.Animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//获得父类的Class对象</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test6 <span class="token operator">=</span> Test1<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Test7 <span class="token operator">=</span> mClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.lwg.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过newInstance()创建对象</span>
        Cat mCat1 <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> Test1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCat1<span class="token punctuation">.</span><span class="token function">Shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------Constructor----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得指定公共构造方法</span>
        Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span>  constructor1 <span class="token operator">=</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">)</span> Test2<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//返回Java语音修饰符</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回Java语音修饰符:"</span><span class="token operator">+</span>constructor1<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得类名</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得类名:"</span><span class="token operator">+</span>constructor1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得所有公共构造方法</span>
        Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructor2 <span class="token operator">=</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Test2<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"公共的构造方法数为："</span><span class="token operator">+</span>constructor2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span> constructor3 <span class="token operator">:</span> constructor2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//获得所有参数的类</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructorclasses1 <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> constructor3<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructorclass1 <span class="token operator">:</span> constructorclasses1<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>constructorclass1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
         <span class="token comment" spellcheck="true">//获得指定构造方法</span>
        Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span> constructor4 <span class="token operator">=</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">)</span> Test2<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//返回Java语音修饰符</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回Java语音修饰符:"</span><span class="token operator">+</span>constructor4<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得所有构造方法</span>
        Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructor5 <span class="token operator">=</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Test2<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"公共的构造方法数为："</span><span class="token operator">+</span>constructor5<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span>Cat<span class="token operator">></span> constructor6 <span class="token operator">:</span> constructor5<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructorclasses2 <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> constructor6<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructorclass2 <span class="token operator">:</span> constructorclasses2<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>constructorclass2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//为ture表示类中声明的构造方法均可访问</span>
        constructor4<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//构造有参数的类</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"构造有参数的类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Cat mCat2 <span class="token operator">=</span> constructor4<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"小黑"</span><span class="token punctuation">,</span><span class="token string">"黑色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mCat2<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"是"</span><span class="token operator">+</span>mCat2<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------Field----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得指定的公共字段</span>
        Field field1 <span class="token operator">=</span> Test3<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"NUMBER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//得到目标属性的修饰符值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到目标属性的修饰符值:"</span><span class="token operator">+</span>field1<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//得到目标属性的类型</span>
        Type  type<span class="token operator">=</span> field1<span class="token punctuation">.</span><span class="token function">getGenericType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到目标属性的类型:"</span><span class="token operator">+</span>type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//得到目标属性的类型对应的Class对象</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fieldClass1 <span class="token operator">=</span> field1<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldClass1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得属性值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得属性值:"</span><span class="token operator">+</span>field1<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">//获得所有的字段</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> field2 <span class="token operator">=</span> Test3<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得指定的字段</span>
        Field field3 <span class="token operator">=</span> Test3<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"Sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置为均可访问，即使只是访问私有字段而不是修改，也要设置为true</span>
        field3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得静态字段</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得静态字段:"</span><span class="token operator">+</span>field3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置属性值</span>
        field3<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"母"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改为:"</span><span class="token operator">+</span>field3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得所有的字段</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> field4 <span class="token operator">=</span> Test3<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Field field5 <span class="token operator">=</span> Test3<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得非静态字段："</span><span class="token operator">+</span>field5<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------Method----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得指定公共方法</span>
        Method method1 <span class="token operator">=</span> Test7<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"Cry"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//执行静态无参无返回值方法</span>
        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//得到返回类型的类</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> methodClass1 <span class="token operator">=</span> method1<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到返回类型的类"</span><span class="token operator">+</span>methodClass1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//获得指定带参数的公共方法</span>
        Method method2 <span class="token operator">=</span> Test7<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"Smile"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//执行非静态有参无返回值方法</span>
        method2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Test7<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//得到目标方法各参数类型对应的Class对象</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> methodClass2 <span class="token operator">=</span> method2<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> methodClass2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodClass2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//获得所有公共方法，包括继承父类的方法</span>
        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> method3 <span class="token operator">=</span> Test7<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"公共方法总数："</span><span class="token operator">+</span>method3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> method3<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//获得指定方法</span>
        Method method4 <span class="token operator">=</span> Test7<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setSize"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Cat mCat3 <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> Test7<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//执行私有非静态方法</span>
        method4<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        method4<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mCat3<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行私有非静态方法:"</span><span class="token operator">+</span>mCat3<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获得所有方法,包括重写的方法但不包括父类的其他方法</span>
        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> method5 <span class="token operator">=</span> Test7<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法总数："</span><span class="token operator">+</span>method5<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> method5<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>结果:</strong></p>
<pre><code>瞄
-----------Constructor----------
返回Java语音修饰符:1
获得类名:com.lwg.Cat
公共的构造方法数为：2
java.lang.String

返回Java语音修饰符:2
公共的构造方法数为：3
java.lang.String、

java.lang.String、java.lang.String、
构造有参数的类:小黑是黑色
-----------Field----------
得到目标属性的修饰符值:25
得到目标属性的类型:int
int
获得属性值:1
获得静态字段:公
修改为:母
获得非静态字段：白色
-----------Method----------
瞄...瞄
得到返回类型的类void
瞄瞄瞄瞄瞄瞄瞄瞄瞄瞄
int
公共方法总数：14
getSize
Shout
Cry
Smile
a
wait
wait
wait
equals
toString
hashCode
getClass
notify
notifyAll
执行私有非静态方法:20
方法总数：5
getSize
setSize
Shout
Cry
Smile
</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/stevenhu_223/article/details/9286121" target="_blank" rel="external">Java反射机制知识点</a><br><a href="http://lavasoft.blog.51cto.com/62575/15433/" target="_blank" rel="external">深入研究java.lang.Class类</a><br><a href="http://www.jb51.net/article/77271.htm" target="_blank" rel="external">解析Java中的Field类和Method类</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反射的概念是指程序可以访问、检测和修改它本身状态或行为的一种能力，通俗来说就是获得自身的信息并能够进行修改。&lt;/p&gt;
&lt;p&gt;要弄懂反射就要弄懂Java的类加载器机制。在Java中每个，class文件都有一个对应的Class对象，类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个这个类的java.lang.Class对象，用来封装类在方法区类的对象。通过Class对象我们就可以知道这个Clas文件的所有信息，如字段，方法，构造方法，父类，注释等。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="API" scheme="https://luoweiguang.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>异常丢失</title>
    <link href="https://luoweiguang.github.io/2016/03/11/%E5%BC%82%E5%B8%B8%E4%B8%A2%E5%A4%B1/"/>
    <id>https://luoweiguang.github.io/2016/03/11/异常丢失/</id>
    <published>2016-03-11T13:00:00.000Z</published>
    <updated>2017-08-06T10:16:25.868Z</updated>
    
    <content type="html"><![CDATA[<p><strong>异常丢失</strong>指的是在finally的代码块里有return或throw语句时，此语句会覆盖前面的return语句或throw语句，但在eclipse中，在finally的代码块加入return或throw语句时，会报“finally block does not complete normally”警告，所以稍微知道一下就好了。</p>
  <a id="more"></a>
<p><strong>代码:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestException</span> 
<span class="token punctuation">{</span>  

    <span class="token keyword">void</span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Test1Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">Test1Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1Test,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>



    <span class="token punctuation">}</span>



    <span class="token keyword">void</span> <span class="token function">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Test2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">Test2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2Test,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>



    <span class="token punctuation">}</span>


    <span class="token keyword">void</span> <span class="token function">Test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Test3Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test3,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test3,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">Test3Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test3Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test3Test,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>



    <span class="token punctuation">}</span>


    <span class="token keyword">void</span> <span class="token function">Test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Test4Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test4,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test4,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">Test4Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test4Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"aaaTest4Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1Test,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>



    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">Test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Test5Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test5,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test5,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">Test5Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test5Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test5Test,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"bbbTest5Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>



    <span class="token punctuation">}</span>





    <span class="token keyword">void</span> <span class="token function">Test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Test6Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test6,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test6,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">Test6Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test6Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"aaaTest6Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1Test,finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"bbbTest1Test,catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>



    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>   
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p><strong>运行结果</strong></p>
<pre><code>--------------------------------------------------
Test1Test,catch
Test1Test,finally
Test1,catch
Test1,finally
--------------------------------------------------
Test2Test,catch
Test2Test,finally
Test2,finally
--------------------------------------------------
Test3Test,catch
Test3Test,finally
Test3,finally
--------------------------------------------------
Test4Test,catch
Test1Test,finally
Test4,finally
--------------------------------------------------
Test5Test,catch
Test5Test,finally
Test5,catch
java.lang.Exception: bbbTest5Test,catch
Test5,finally
--------------------------------------------------
Test6Test,catch
Test1Test,finally
Test6,catch
java.lang.Exception: bbbTest1Test,catch
Test6,finally
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;异常丢失&lt;/strong&gt;指的是在finally的代码块里有return或throw语句时，此语句会覆盖前面的return语句或throw语句，但在eclipse中，在finally的代码块加入return或throw语句时，会报“finally block does not complete normally”警告，所以稍微知道一下就好了。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://luoweiguang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java注释</title>
    <link href="https://luoweiguang.github.io/2016/03/05/Java%E6%B3%A8%E9%87%8A/"/>
    <id>https://luoweiguang.github.io/2016/03/05/Java注释/</id>
    <published>2016-03-05T07:00:00.000Z</published>
    <updated>2017-08-06T09:22:39.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java注释"><a href="#java注释" class="headerlink" title="java注释"></a>java注释</h2><p><code>//</code>注释一行<br><code>/*.....*/</code>注释若干行<br><code>/**.....*/</code>注释若干行，并写入javadoc文档</p>
<h2 id="javadoc标记"><a href="#javadoc标记" class="headerlink" title="javadoc标记"></a>javadoc标记</h2><p>javadoc中可以插入html标签</p>
  <a id="more"></a>
<p><strong>通用注释</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@author</td>
<td style="text-align:center">作者名</td>
</tr>
<tr>
<td style="text-align:center">@version</td>
<td style="text-align:center">版本标识</td>
</tr>
<tr>
<td style="text-align:center">@since</td>
<td style="text-align:center">最早出现的JDK版本</td>
</tr>
<tr>
<td style="text-align:center">@deprecated</td>
<td style="text-align:center">引用不推荐使用的警告</td>
</tr>
<tr>
<td style="text-align:center">@see</td>
<td style="text-align:center">引用其他类</td>
</tr>
</tbody>
</table>
<p><strong>注释内使用</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@link</td>
<td style="text-align:center">链接到类</td>
</tr>
<tr>
<td style="text-align:center">@linkplain</td>
<td style="text-align:center">链接到类</td>
</tr>
<tr>
<td style="text-align:center">@code</td>
<td style="text-align:center">代码</td>
</tr>
</tbody>
</table>
<p><strong>方法注释</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@return</td>
<td style="text-align:center">返回值</td>
</tr>
<tr>
<td style="text-align:center">@throws</td>
<td style="text-align:center">异常类及抛出条件</td>
</tr>
<tr>
<td style="text-align:center">@param</td>
<td style="text-align:center">参数名及其意义</td>
</tr>
</tbody>
</table>
<h2 id="导出javadoc"><a href="#导出javadoc" class="headerlink" title="导出javadoc"></a>导出javadoc</h2><p>eclipse，在项目列表中按右键，选择Export(导出) -&gt; java -&gt; javadoc<br>点击Next&gt;(下一步)，在javadoc command中选择javadoc.exe程序的路径（jdk目录下的bin\javadoc.exe）;<br>再Use standard doclet中选择javadoc的生成路径。点击Finish(完成)。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lwg<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 
 * @author Luoweigaung
 * @version 1.0.1
 * @since JDK1.7
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicles</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 速度
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">float</span> speed<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 
     * @return speed {@link #speed}
     * @see #setSpeed()
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> speed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 
     * @param speed {@linkplain #speed 速度}
     * @see #getSpeed()
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSpeed</span><span class="token punctuation">(</span><span class="token keyword">float</span> speed<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lwg<span class="token punctuation">.</span>bean<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>lwg<span class="token punctuation">.</span>Vehicles<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>Car简介&lt;/p>
 * {@code Car}继承至{@link Vehicles},请参考{@linkplain Bicycle 自行车}与{@linkplain Bus 巴士}等
 * 
 * 
 * @author Luoweiguang
 * @version 1.0.1
 * @see Vehicles
 * @since JDK1.7
 * 
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicles</span>
<span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 花费
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 该方法用于获取价格
     * @throws IOException &lt;p>如果money为0,则报异常&lt;/p>
     * @return {@link #money}
     * @see #setMoney(int)
     * @throws 
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>money <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 该方法用于修改价格
     * @deprecated &lt;p>使用此方法可能使数据异常&lt;/p>
     * @param {@link #money}
     * @see #getMoney()
     * @see &lt;a href="www.baidu.com">百度&lt;/a>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">//入口方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre>
<p><img src="/img/20160305164730.png" alt="截图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java注释&quot;&gt;&lt;a href=&quot;#java注释&quot; class=&quot;headerlink&quot; title=&quot;java注释&quot;&gt;&lt;/a&gt;java注释&lt;/h2&gt;&lt;p&gt;&lt;code&gt;//&lt;/code&gt;注释一行&lt;br&gt;&lt;code&gt;/*.....*/&lt;/code&gt;注释若干行&lt;br&gt;&lt;code&gt;/**.....*/&lt;/code&gt;注释若干行，并写入javadoc文档&lt;/p&gt;
&lt;h2 id=&quot;javadoc标记&quot;&gt;&lt;a href=&quot;#javadoc标记&quot; class=&quot;headerlink&quot; title=&quot;javadoc标记&quot;&gt;&lt;/a&gt;javadoc标记&lt;/h2&gt;&lt;p&gt;javadoc中可以插入html标签&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luoweiguang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://luoweiguang.github.io/tags/Java/"/>
    
      <category term="规范" scheme="https://luoweiguang.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>个人收藏</title>
    <link href="https://luoweiguang.github.io/2016/02/17/%E4%B8%AA%E4%BA%BA%E6%94%B6%E8%97%8F/"/>
    <id>https://luoweiguang.github.io/2016/02/17/个人收藏/</id>
    <published>2016-02-17T14:50:00.000Z</published>
    <updated>2017-07-31T14:02:01.768Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">
.center {
        text-align: center;
        }
</style>

<h2 id="网站-主要"><a href="#网站-主要" class="headerlink" title="网站 | 主要"></a>网站 | 主要</h2>  <p class="center"><br>  <a href="https://github.com" target="_blank" rel="external">github</a><br>  <a href="http://stackoverflow.com" target="_blank" rel="external">stackoverflow</a><br>  <a href="http://developer.android.com/index.html" target="_blank" rel="external">Android Developers</a><br>  <a href="http://android.xsoftlab.net/index.html" target="_blank" rel="external">Android Developers镜像</a><br>  </p>

  <a id="more"></a>
<h2 id="网站-技术"><a href="#网站-技术" class="headerlink" title="网站 | 技术"></a>网站 | 技术</h2>  <p class="center"><br>  <a href="http://gold.xitu.io" target="_blank" rel="external">掘金</a><br>  <a href="http://www.imooc.com" target="_blank" rel="external">慕课网</a><br>  <a href="http://blog.jobbole.com" target="_blank" rel="external">伯乐在线</a><br>  <a href="http://www.importnew.com" target="_blank" rel="external">importnew</a><br>  <a href="http://www.jcodecraeer.com/plus/list.php?tid=18" target="_blank" rel="external">泡在网上的日子</a><br>  <a href="http://www.apkbus.com" target="_blank" rel="external">安卓巴士</a><br>  <a href="http://www.open-open.com/lib/list/177" target="_blank" rel="external">open-open</a><br>  <a href="https://www.youtube.com/user/androiddevelopers/videos" target="_blank" rel="external">Android Developers视频</a><br>  <a href="http://www.devtf.cn/?cat=2" target="_blank" rel="external">开发技术前线</a><br>  <a href="http://www.droidsec.cn/" target="_blank" rel="external">DroidSec</a><br>  </p>

<h2 id="网站-工具-代码"><a href="#网站-工具-代码" class="headerlink" title="网站 | 工具 | 代码"></a>网站 | 工具 | 代码</h2>  <p class="center"><br>  <a href="https://github.com/Trinea/android-open-project/tree/master/%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="external">android开源项目汇总</a><br>  <a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a><br>  <a href="http://www.javaapk.com/" target="_blank" rel="external">javaapk</a><br>  <a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">awesome-android</a><br>  <a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">awesome-android-libraries</a><br>  <a href="http://android-arsenal.com" target="_blank" rel="external">android-arsenal</a><br>  <a href="https://www.codota.com" target="_blank" rel="external">Codota</a><br>  <a href="https://searchcode.com" target="_blank" rel="external">searchcode</a><br>  </p>

<h2 id="网站-工具-设计"><a href="#网站-工具-设计" class="headerlink" title="网站 | 工具 | 设计"></a>网站 | 工具 | 设计</h2>  <p class="center"><br>  <a href="http://image.baidu.com/?fr=shitu" target="_blank" rel="external">百度识图</a><br>  <a href="http://romannurik.github.io/AndroidAssetStudio/index.html" target="_blank" rel="external">AndroidAssetStudio</a><br>  <a href="http://www.materialpalette.com/cyan/teal" target="_blank" rel="external">材料设计调色板</a><br>  <a href="https://color.adobe.com/zh/create/color-wheel" target="_blank" rel="external">Adobe Color CC</a><br>  <a href="http://www.colorhunter.com" target="_blank" rel="external">colorhunter</a><br>  <a href="http://mcolor.sinaapp.com" target="_blank" rel="external">摩秀创意在线配色</a><br>  <a href="http://color.uisdc.com" target="_blank" rel="external">中国传统色彩</a><br>  <a href="http://color.uisdc.com/jp" target="_blank" rel="external">日本传统色彩</a><br>  </p>

<h2 id="网站-资源-书籍"><a href="#网站-资源-书籍" class="headerlink" title="网站 | 资源 | 书籍"></a>网站 | 资源 | 书籍</h2>  <p class="center"><br>  <a href="http://adchs.github.io" target="_blank" rel="external">Android Design</a><br>  <a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android的官方培训课程中文版</a><br>  <a href="http://www.jb51.net/do/book_class.html" target="_blank" rel="external">脚本之家</a><br>  <a href="http://pan.java1234.com" target="_blank" rel="external">百度云搜索</a><br>  </p>

<h2 id="网站-资源-API"><a href="#网站-资源-API" class="headerlink" title="网站 | 资源 | API"></a>网站 | 资源 | API</h2>  <p class="center"><br>  <a href="http://www.webxml.com.cn/zh_cn/web_services.aspx?offset=1" target="_blank" rel="external">webxml</a><br>  </p> 

<h2 id="网站-资源-设计-图标"><a href="#网站-资源-设计-图标" class="headerlink" title="网站 | 资源 | 设计 | 图标"></a>网站 | 资源 | 设计 | 图标</h2>  <p class="center"><br>  <a href="http://sucai.zcool.com.cn/?from=zcoolindex" target="_blank" rel="external">站酷搜素材</a><br>  <a href="https://icons8.com" target="_blank" rel="external">icons8</a><br>  <a href="http://iconmonstr.com" target="_blank" rel="external">iconmonstr</a><br>  <a href="http://www.iconfont.cn" target="_blank" rel="external">阿里巴巴矢量图标库</a><br>  <a href="https://www.icondeposit.com" target="_blank" rel="external">icondeposit</a><br>  </p>

<h2 id="网站-资源-图片"><a href="#网站-资源-图片" class="headerlink" title="网站 | 资源 | 图片"></a>网站 | 资源 | 图片</h2>  <p class="center"><br>  <a href="http://cn.365psd.com" target="_blank" rel="external">365psd</a><br>  <a href="http://www.ivsky.com" target="_blank" rel="external">天堂图片网</a><br>  <a href="http://699pic.com" target="_blank" rel="external">摄图网</a><br>  <a href="http://cn.forwallpaper.com" target="_blank" rel="external">forwallpaper</a><br>  <a href="http://www.sitebuilderreport.com/stock-up" target="_blank" rel="external">sitebuilderreport</a><br>  <a href="https://www.pexels.com" target="_blank" rel="external">pexels</a><br>  <a href="https://pixabay.com" target="_blank" rel="external">pixabay</a><br>  <a href="http://finda.photo" target="_blank" rel="external">finda</a><br>  <a href="http://www.cssauthor.com" target="_blank" rel="external">cssauthor</a><br>  <a href="http://foter.com" target="_blank" rel="external">foter</a><br>  <a href="http://alpha.wallhaven.cc" target="_blank" rel="external">wallhaven</a><br>  <a href="https://stocksnap.io" target="_blank" rel="external">stocksnap</a><br>  <a href="http://www.designerspics.com" target="_blank" rel="external">designerspics</a><br>  <a href="http://pickupimage.com" target="_blank" rel="external">pickupimage</a><br>  <a href="https://freeimages.red" target="_blank" rel="external">freeimages</a><br>  <a href="http://www.4freephotos.com" target="_blank" rel="external">4freephotos</a><br>  <a href="http://zerospace.asika.tw" target="_blank" rel="external">zerospace</a><br>  <a href="http://www.stockvault.net" target="_blank" rel="external">stockvault</a><br>  <a href="https://canweimage.com" target="_blank" rel="external">canweimage</a><br>  <a href="http://www.publicdomainfiles.com/browse.php?q=all&amp;s=0&amp;o=popular&amp;a=all&amp;m=0" target="_blank" rel="external">publicdomainfiles</a><br>  </p>

<h2 id="网站-设计-欣赏"><a href="#网站-设计-欣赏" class="headerlink" title="网站 | 设计 | 欣赏"></a>网站 | 设计 | 欣赏</h2>  <p class="center"><br>  <a href="http://www.zcool.com.cn" target="_blank" rel="external">站酷</a><br>  <a href="https://dribbble.com" target="_blank" rel="external">Dribbble</a><br>  </p>

<h2 id="网站-设计-界面-欣赏"><a href="#网站-设计-界面-欣赏" class="headerlink" title="网站 | 设计 | 界面 | 欣赏"></a>网站 | 设计 | 界面 | 欣赏</h2>  <p class="center"><br>  <a href="http://app.xueui.cn" target="_blank" rel="external">学UI</a><br>  <a href="http://www.lovelyui.com/tagged/android" target="_blank" rel="external">lovelyui</a><br>  <a href="http://www.apkui.com" target="_blank" rel="external">apkui</a><br>  <a href="http://android.inspired-ui.com" target="_blank" rel="external">inspired-ui</a><br>  <a href="http://www.mobile-patterns.com" target="_blank" rel="external">mobile-patterns</a><br>  <a href="http://capptivate.co" target="_blank" rel="external">capptivate</a><br>  <a href="http://www.uiparade.com" target="_blank" rel="external">uiparade</a><br>  </p>

<h2 id="博客-Android"><a href="#博客-Android" class="headerlink" title="博客 | Android"></a>博客 | Android</h2>  <p class="center"><br>  <a href="http://www.androidweekly.cn" target="_blank" rel="external">Android开发技术周报</a><br>  <a href="http://gank.io" target="_blank" rel="external">干货集中营</a><br>  <a href="http://blog.csdn.net/liyuanjinglyj" target="_blank" rel="external">李元静</a><br>  <a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖</a><br>  <a href="http://blog.daimajia.com" target="_blank" rel="external">代码家</a><br>  <a href="http://blog.fangjie.info" target="_blank" rel="external">方杰</a><br>  <a href="http://blog.csdn.net/singwhatiwanna" target="_blank" rel="external">任玉刚</a><br>  <a href="http://droidyue.com" target="_blank" rel="external">技术小黑屋</a><br>  <a href="http://blog.isming.me" target="_blank" rel="external">码农明明桑</a><br>  <a href="http://blog.dreamtobe.cn" target="_blank" rel="external">Jacksgong</a><br>  <a href="http://blog.csdn.net/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a><br>  <a href="http://www.kymjs.com" target="_blank" rel="external">kymjs张涛</a><br>  <a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">eclipse_xu</a><br>  <a href="http://drakeet.me" target="_blank" rel="external">Drakeet</a><br>  <a href="http://zmywly8866.github.io" target="_blank" rel="external">张明云</a><br>  <a href="http://androidperformance.com" target="_blank" rel="external">Gracker</a><br>  <a href="http://blog.csdn.net/innost" target="_blank" rel="external">邓老师</a><br>  <a href="http://www.trinea.cn" target="_blank" rel="external">Trinea</a><br>  <a href="http://www.race604.com" target="_blank" rel="external">Jlog</a><br>  <a href="http://hujiaweibujidao.github.io" target="_blank" rel="external">hujiaweibujidao</a><br>  <a href="http://blog.csdn.net/xyz_lmn" target="_blank" rel="external">张兴业</a><br>  <a href="http://blog.csdn.net/lmj623565791" target="_blank" rel="external">鸿洋_</a><br>  <a href="http://blog.csdn.net/flowingflying" target="_blank" rel="external">恺风</a><br>  <a href="http://blog.csdn.net/Android_Tutor" target="_blank" rel="external">Android_Tutor</a><br>  <a href="http://stormzhang.com/timeline.html" target="_blank" rel="external">stormzhang</a><br>  <a href="http://blog.csdn.net/Luoshengyang" target="_blank" rel="external">罗升阳</a><br>  <a href="http://blog.zhaiyifan.cn" target="_blank" rel="external">markzhai</a><br>  <a href="http://blog.csdn.net/liguojin1230" target="_blank" rel="external">liguojin1230</a><br>  <a href="http://blog.csdn.net/hudashi" target="_blank" rel="external">hudashi</a><br>  <a href="http://www.cnblogs.com/xingfuzzhd" target="_blank" rel="external">xingfuzzhd</a><br>  <a href="http://www.cnblogs.com/linjiqin" target="_blank" rel="external">Ruthless</a><br>  <a href="http://www.cnblogs.com/devinzhang" target="_blank" rel="external">Devin Zhang</a><br>  <a href="http://blog.csdn.net/banketree" target="_blank" rel="external">半棵树</a><br>  <a href="http://coolshell.info/" target="_blank" rel="external">Lippi-浮生志</a><br>  <a href="http://blog.csdn.net/yanbober" target="_blank" rel="external">工匠若水</a><br>  <a href="http://blog.csdn.net/lovexieyuan520" target="_blank" rel="external">moble_xie</a><br>  <a href="http://blog.csdn.net/yudajun" target="_blank" rel="external">yudajun</a><br>  <a href="http://blog.csdn.net/feiduclear_up" target="_blank" rel="external">废墟的树</a><br>  <a href="http://blog.csdn.net/lincyang" target="_blank" rel="external">全速前行</a><br>  <a href="http://blog.csdn.net/harvic880925" target="_blank" rel="external">harvic880925</a><br>  <a href="http://blog.csdn.net/cankingapp" target="_blank" rel="external">CankingApp</a><br>  <a href="http://blog.csdn.net/aigestudio" target="_blank" rel="external">AigeStudio</a><br>  <a href="https://greenrobot.me/" target="_blank" rel="external">greenrobot</a><br>  <a href="http://blog.csdn.net/sbsujjbcy" target="_blank" rel="external">安卓弟</a><br>  <a href="http://blog.csdn.net/ljphhj" target="_blank" rel="external">ljphhj</a><br>  <a href="http://yanghui.name/" target="_blank" rel="external">杨辉</a><br>  <a href="http://blog.csdn.net/feelang" target="_blank" rel="external">feelang</a><br>  <a href="http://blog.csdn.net/zhaokaiqiang1992" target="_blank" rel="external">赵凯强</a><br>  <a href="http://waylenw.github.io/" target="_blank" rel="external">WaylenWang</a><br>  <a href="http://ticktick.blog.51cto.com/" target="_blank" rel="external">卢俊</a><br>  <a href="http://blog.csdn.net/coder_pig" target="_blank" rel="external">coder-pig</a><br>  <a href="http://keeganlee.me/" target="_blank" rel="external">Keegan小钢</a><br>  </p>

<h2 id="博客-Java"><a href="#博客-Java" class="headerlink" title="博客 | Java"></a>博客 | Java</h2> <p class="center"><br> <a href="http://blog.csdn.net/zhangerqing" target="_blank" rel="external">终点</a><br> <a href="http://blog.csdn.net/longronglin" target="_blank" rel="external">rulinma</a><br> <a href="http://blog.csdn.net/xiaoxian8023" target="_blank" rel="external">xiaoxian8023</a><br> <a href="http://www.cnblogs.com/xdp-gacl" target="_blank" rel="external">xdp-gacl</a><br> <a href="http://blog.csdn.net/ns_code" target="_blank" rel="external">兰亭风雨</a><br> </p>

<h2 id="博客-其他"><a href="#博客-其他" class="headerlink" title="博客 | 其他"></a>博客 | 其他</h2> <p class="center"><br> <a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰</a><br> <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰</a><br> </p>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
.center {
        text-align: center;
        }
&lt;/style&gt;

&lt;h2 id=&quot;网站-主要&quot;&gt;&lt;a href=&quot;#网站-主要&quot; class=&quot;headerlink&quot; title=&quot;网站 | 主要&quot;&gt;&lt;/a&gt;网站 | 主要&lt;/h2&gt;  &lt;p class=&quot;center&quot;&gt;&lt;br&gt;  &lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;http://stackoverflow.com&quot;&gt;stackoverflow&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;http://developer.android.com/index.html&quot;&gt;Android Developers&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;http://android.xsoftlab.net/index.html&quot;&gt;Android Developers镜像&lt;/a&gt;&lt;br&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://luoweiguang.github.io/categories/Tool/"/>
    
    
      <category term="Blog" scheme="https://luoweiguang.github.io/tags/Blog/"/>
    
      <category term="Website" scheme="https://luoweiguang.github.io/tags/Website/"/>
    
  </entry>
  
  <entry>
    <title>Hello World | Markdown使用 | hexo</title>
    <link href="https://luoweiguang.github.io/2016/02/16/hello-world/"/>
    <id>https://luoweiguang.github.io/2016/02/16/hello-world/</id>
    <published>2016-02-16T12:00:00.000Z</published>
    <updated>2017-07-31T13:54:08.796Z</updated>
    
    <content type="html"><![CDATA[<p>MarkDown基础语法<br><a id="more"></a></p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code># 一级标题 &#39;Hello World&#39;
## 二级标题 &#39;Hello World&#39;
### 三级标题 &#39;Hello World&#39;
#### 四级标题 &#39;Hello World&#39;
##### 五级标题 &#39;Hello World&#39;
###### 六级标题 &#39;Hello World&#39;
</code></pre><h2 id="二级标题-‘Hello-World’"><a href="#二级标题-‘Hello-World’" class="headerlink" title="二级标题 ‘Hello World’"></a>二级标题 ‘Hello World’</h2><h3 id="三级标题-‘Hello-World’"><a href="#三级标题-‘Hello-World’" class="headerlink" title="三级标题 ‘Hello World’"></a>三级标题 ‘Hello World’</h3><h4 id="四级标题-‘Hello-World’"><a href="#四级标题-‘Hello-World’" class="headerlink" title="四级标题 ‘Hello World’"></a>四级标题 ‘Hello World’</h4><h5 id="五级标题-‘Hello-World’"><a href="#五级标题-‘Hello-World’" class="headerlink" title="五级标题 ‘Hello World’"></a>五级标题 ‘Hello World’</h5><h6 id="六级标题-‘Hello-World’"><a href="#六级标题-‘Hello-World’" class="headerlink" title="六级标题 ‘Hello World’"></a>六级标题 ‘Hello World’</h6><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><pre><code>**Hello World**
</code></pre><p><strong>Hello World</strong></p>
<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><pre><code>*Hello World*
</code></pre><p><em>Hello World</em></p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre><code>~~Hello World~~
</code></pre><p><del>Hello World</del></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><pre><code>---
***
</code></pre><hr>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre><code>- Hello World
- Hello World
- Hello World

* Hello World
* Hello World
* Hello World

1. Hello World
2. Hello World
3. Hello World
</code></pre><ul>
<li>Hello World</li>
<li>Hello World</li>
<li>Hello World</li>
</ul>
<ul>
<li>Hello World</li>
<li>Hello World</li>
<li>Hello World</li>
</ul>
<ol>
<li>Hello World</li>
<li>Hello World</li>
<li>Hello World</li>
</ol>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><pre><code>- Hello World
 + Hello World
 + Hello World
 + Hello World


- Hello World
 + Hello World
     + Hello World
         + Hello World
 + Hello World
 + Hello World
</code></pre><ul>
<li>Hello World<ul>
<li>Hello World</li>
<li>Hello World</li>
<li>Hello World</li>
</ul>
</li>
</ul>
<ul>
<li>Hello World<ul>
<li>Hello World<ul>
<li>Hello World<ul>
<li>Hello World</li>
</ul>
</li>
</ul>
</li>
<li>Hello World</li>
<li>Hello World</li>
</ul>
</li>
</ul>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><pre><code>[Hello World](http://www.google.com)
[Hello World][1]

[1]:http://www.google.com
</code></pre><p><a href="http://www.google.com" target="_blank" rel="external">Hello World</a><br><a href="http://www.google.com" target="_blank" rel="external">Hello World</a></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre><code>| Hello World | Hello World | Hello World |
|-------------|-------------|-------------|
| Hello World | Hello World | Hello World |

| Hello World | Hello World | Hello World |
|-------------|------------:|:--------:|
| Hello World | Hello World | Hello World |

Hello World | Hello World | Hello World
-----|------|----
Hello World    | Hello World    | Hello World
Hello World    | Hello World    | Hello World
Hello World    | Hello World    | Hello World
</code></pre><table>
<thead>
<tr>
<th>Hello World</th>
<th>Hello World</th>
<th>Hello World</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hello World</td>
<td>Hello World</td>
<td>Hello World</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Hello World</th>
<th style="text-align:right">Hello World</th>
<th style="text-align:center">Hello World</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hello World</td>
<td style="text-align:right">Hello World</td>
<td style="text-align:center">Hello World</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Hello World</th>
<th>Hello World</th>
<th>Hello World</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hello World</td>
<td>Hello World</td>
<td>Hello World</td>
</tr>
<tr>
<td>Hello World</td>
<td>Hello World</td>
<td>Hello World</td>
</tr>
<tr>
<td>Hello World</td>
<td>Hello World</td>
<td>Hello World</td>
</tr>
</tbody>
</table>
<h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><pre><code>`Hello World`
</code></pre><p><code>Hello World</code></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><pre><code> &gt; Hello World
 &gt; Hello World

 &gt; Hello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello World

 &gt;&gt; Hello World

 &gt; &gt; Hello World
</code></pre><blockquote>
<p>Hello World<br>Hello World</p>
<p>Hello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello World</p>
<blockquote>
<p>Hello World</p>
<p>Hello World</p>
</blockquote>
</blockquote>
<h2 id="单行长文字"><a href="#单行长文字" class="headerlink" title="单行长文字"></a>单行长文字</h2><pre><code>    Hello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello World
</code></pre><pre><code>Hello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello WorldHello World    
</code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code>![头像](http://luoweiguang.github.io/img/head.jpg)
</code></pre><p><img src="http://luoweiguang.github.io/img/head.jpg" alt="头像"></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><pre><code>\\
\`
\*
\_
\{
\}
\[
\]
\(
\)
\#
\+
\-
\.
\!
</code></pre><p>\<br>`<br>*<br>_<br>{<br>}<br>[<br>]<br>(<br>)<br>#<br>+<br>-<br>.<br>!</p>
<h2 id="高亮一段代码"><a href="#高亮一段代码" class="headerlink" title="高亮一段代码"></a>高亮一段代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// Hello World</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><pre class=" language-Markdown"><code class="language-Markdown">title: Hello World | Markdown使用 | hexo #文章标题
date: 2016/02/16 20:00:00 #建立日期
updated: #更新日期
description: #文章描述
categories: #分类
- Tool
tags: #标签
- Hexo
- Markdown
toc: true # 生成目录
comments: true #开启文章的评论功能
</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://luuman.github.io/2015/12/24/markdown/" target="_blank" rel="external">Markdown使用指南</a><br><a href="http://luuman.github.io/2015/12/25/Hexo/" target="_blank" rel="external">Hexo的使用介绍</a><br><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter | Hexo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MarkDown基础语法&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://luoweiguang.github.io/categories/Tool/"/>
    
    
      <category term="Hexo" scheme="https://luoweiguang.github.io/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://luoweiguang.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
